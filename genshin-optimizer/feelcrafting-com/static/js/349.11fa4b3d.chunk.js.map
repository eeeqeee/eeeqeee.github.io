{"version":3,"file":"static/js/349.11fa4b3d.chunk.js","mappings":"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YAwBWC,GAtBqB,UAC7BD,EAD6B,CAEhC,aAoB0B,CAC1B,gBACA,cACA,kBACA,mBAE2B,UACxBA,EACAC,GAG6B,UAC7BD,EAxBwB,CAC3B,iBACA,eACA,mBACA,mBAE2B,CAC3B,iBACA,eACA,mBACA,oBA2LwB,UAxKQ,CAChC,kBACA,gBACA,sBACA,kBACA,YACA,oBACA,gBACA,YACA,gBACA,kBACA,cACA,eACA,oBACA,kBACA,YACA,iBACA,YACA,uBACA,uBACA,mBACA,iBACA,mBACA,eACA,cACA,gBACA,eACA,eACA,oBACA,gBACA,gBACA,WACA,sBACA,mBAImC,CACnC,YACA,oBACA,yBACA,aACA,qBACA,gBACA,gBACA,wBACA,cACA,mBACA,qBACA,cACA,mBACA,cACA,uBACA,kBACA,wBACA,eACA,qBACA,eACA,uBACA,oBACA,UACA,cACA,mBACA,aACA,sBACA,mBAIkC,CAClC,qBACA,iBACA,cACA,kBACA,eACA,aACA,cACA,mBACA,qBACA,gBACA,UACA,YACA,mBACA,cACA,mBACA,cACA,4BACA,uBACA,aACA,eACA,cACA,yBACA,WACA,mBACA,kBACA,eAI8B,CAC9B,cACA,UACA,gBACA,mBACA,cACA,iBACA,eACA,iBACA,iBACA,WACA,aACA,cACA,cACA,YACA,oBACA,aACA,YACA,WACA,oBACA,WACA,aACA,WACA,OACA,iBACA,qBACA,oBACA,cACA,YACA,gBACA,qBACA,kBACA,gBAImC,CACnC,mBACA,0BACA,kBACA,cACA,aACA,sBACA,kBACA,gBACA,cACA,qBACA,eACA,gBACA,6BACA,aACA,YACA,eACA,eACA,oBACA,iBACA,iBACA,gBACA,uBACA,eACA,aACA,aACA,gCACA,eACA,oBACA,gB,qBCkDeE,oBAAAA,GAAAA,EAAAA,EAAAA,KAAAA,KAoBAC,YAnYV,SAASC,SAASC,EAAkBC,EAAmBC,EAAuBC,EAAgBC,EAA4BC,GAU/H,IATA,IAAIC,EAASD,EAEPE,EACQ,CAAEC,gBAAgB,GAD1BD,EAEW,CAAEC,gBAAgB,GAF7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","sources":["Util/Util.ts","Formula/utils.ts","Formula/internal.ts","Formula/optimization.ts","Types/consts.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/common.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/BNBSplitWorker.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/BackgroundWorker.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/ComputeWorker.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/DefaultSplitWorker.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["export const getRandomElementFromArray = <T>(array: readonly T[]): T => array[Math.floor(Math.random() * array.length)];\nexport function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\nexport function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\nexport function getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * Assumes that the object entries are all primitives + objects\n * shallow copy the object,\n * deep copy the\n * @param obj\n * @returns\n */\nexport function deepClone<T>(obj: T): T {\n  if (!obj) return obj\n  if (!Object.keys(obj).length) return {} as T\n  const ret = { ...obj }\n  Object.entries(obj).forEach(([k, v]: any) => {\n    if (typeof v !== \"object\") return\n    ret[k] = JSON.parse(JSON.stringify(v))\n  })\n  return ret\n}\n\nexport const clamp = (val, low, high) => {\n  if (val < low) return low;\n  if (val > high) return high;\n  return val\n}\nexport const getArrLastElement = (arr) =>\n  arr.length ? arr[arr.length - 1] : null\n\nexport const clamp01 = (val) => clamp(val, 0, 1)\nexport const clampPercent = (val) => clamp(val, 0, 100)\n\n//use to pretty print timestamps, or anything really.\nexport function strPadLeft(string, pad, length) {\n  return (new Array(length + 1).join(pad) + string).slice(-length);\n}\n\n//fuzzy compare strings. longer the distance, the higher the mismatch.\nexport function hammingDistance(str1, str2) {\n  var dist = 0;\n  str1 = str1.toLowerCase();\n  str2 = str2.toLowerCase();\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\n    let match = true\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\n      match = false\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\n      match = true\n    if (!match) dist++\n  }\n  return dist;\n}\n\n//multiplies every numerical value in the obj by a multiplier.\nexport function objMultiplication(obj, multi) {\n  if (multi === 1) return obj\n  Object.keys(obj).forEach((prop: any) => {\n    if (typeof obj[prop] === \"object\") objMultiplication(obj[prop], multi)\n    if (typeof obj[prop] === \"number\") obj[prop] = obj[prop] * multi\n  })\n  return obj\n}\n\n//assign obj.[keys...] = value\nexport function layeredAssignment(obj, keys: readonly string[], value) {\n  keys.reduce((accu, key, i, arr) => {\n    if (i === arr.length - 1) return (accu[key] = value)\n    if (!accu[key]) accu[key] = {}\n    return accu[key]\n  }, obj)\n  return obj\n}\n//get the value in a nested object, giving array of path\nexport function objPathValue(obj: object | undefined, keys: readonly string[]): any {\n  if (!obj || !keys) return undefined;\n  !Array.isArray(keys) && console.error(keys)\n  return keys.reduce((a, k) => a?.[k], obj)\n}\n//delete the value denoted by the path. Will also delete empty objects as well.\nexport function deletePropPath(obj, path) {\n  const tempPath = [...path]\n  const lastKey = tempPath.pop()\n  const objPathed = objPathValue(obj, tempPath)\n  delete objPathed?.[lastKey];\n}\n\nexport function objClearEmpties(o) {\n  for (const k in o) {\n    if (typeof o[k] !== \"object\") continue\n    objClearEmpties(o[k])\n    if (!Object.keys(o[k]).length) delete o[k];\n  }\n}\nexport function crawlObject(obj: any, keys: string[] = [], validate: (o: any, keys: string[]) => boolean, cb: (o: any, keys: string[]) => void) {\n  if (validate(obj, keys)) cb(obj, keys)\n  else obj && typeof obj === \"object\" && Object.entries(obj).forEach(([key, val]) => crawlObject(val, [...keys, key], validate, cb))\n}\n// const getObjectKeysRecursive = (obj) => Object.values(obj).reduce((a, prop) => typeof prop === \"object\" ? [...a, ...getObjectKeysRecursive(prop)] : a, Object.keys(obj))\nexport const getObjectKeysRecursive = (obj) => typeof obj === \"object\" ? Object.values(obj).flatMap(getObjectKeysRecursive).concat(Object.keys(obj)) : (typeof obj === \"string\" ? [obj] : [])\n\nexport function evalIfFunc<T, X>(value: T | ((arg: X) => T), arg: X): T {\n  return typeof value === \"function\" ? (value as any)(arg) : value\n}\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\nexport function objectKeyMap<K extends string | number, V>(keys: readonly K[], map: (key: K, i: number) => V): StrictDict<`${K}`, V> {\n  return Object.fromEntries(keys.map((k, i) => [k, map(k, i)])) as any\n}\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\nexport function objectKeyValueMap<T, K extends string | number, V>(items: readonly T[], map: (item: T, i: number) => [K, V]): StrictDict<`${K}`, V> {\n  return Object.fromEntries(items.map((t, i) => map(t, i))) as any\n}\n\nexport function objectMap<K extends string, V, T>(obj: Record<K, Exclude<V, undefined>>, fn: (value: V, key: `${K}`, index: number) => T): Record<K, T>\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>>\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>> {\n  return Object.fromEntries(Object.entries(obj).map(\n    ([k, v], i) => [k, fn(v, k, i)]\n  )) as any\n}\n\nconst rangeGen = function* (from: number, to: number): Iterable<number> {\n  for (let i = from; i <= to; i++) yield i;\n};\n\n/** range of [from, to], inclusive */\nexport function range(from: number, to: number): number[] {\n  return [...rangeGen(from, to)]\n}\n\nexport function assertUnreachable(value: never): never {\n  throw new Error(`Should not reach this with value ${value}`)\n}\n\n/** Will change `arr` in-place */\nexport function toggleInArr<T>(arr: T[], value: T) {\n  const ind = arr.indexOf(value)\n  if (ind < 0) arr.push(value)\n  else arr.splice(ind, 1)\n}\n\nexport function toggleArr<T>(arr: T[], value: T) {\n  return arr.includes(value) ? arr.filter(a => a !== value) : [...arr, value]\n}\n\nexport function deepFreeze<T>(obj: T, layers: number = 5): T {\n  if (layers === 0) return obj\n  if (typeof obj === \"object\")\n    Object.values(Object.freeze(obj)).forEach(o => deepFreeze(o, layers--))\n  return obj\n}\n\nexport function arrayMove<T>(arr: T[], oldIndex: number, newIndex: number) {\n  if (newIndex < 0 || newIndex >= arr.length) return arr\n  if (oldIndex < 0 || oldIndex >= arr.length) return arr\n  arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\n  return arr\n}\n","\nimport { objectKeyMap } from \"../Util/Util\"\nimport type { OptNode } from \"./optimization\"\nimport type { ComputeNode, ConstantNode, Data, DataNode, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, StrPrioNode, SubscriptNode, ThresholdNode } from \"./type\"\n\ntype Opt = number | OptNode\ntype Num = number | NumNode\ntype Str = string | undefined | StrNode\ntype N_S = Num | Str\ntype AnyNode = NumNode | StrNode\n\nexport const todo: OptNode = constant(NaN, { name: \"TODO\" })\nexport const one = percent(1), naught = percent(0)\nexport const none = constant(\"none\")\n\nexport function constant(value: number, info?: Info): ConstantNode<number>\nexport function constant(value: string | undefined, info?: Info): ConstantNode<string | undefined>\nexport function constant(value: number | string | undefined, info?: Info): ConstantNode<number> | ConstantNode<string | undefined>\nexport function constant(value: number | string | undefined, info?: Info): ConstantNode<number | string | undefined> {\n  return typeof value === \"number\"\n    ? { operation: \"const\", operands: [], type: \"number\", value, info }\n    : { operation: \"const\", operands: [], type: \"string\", value, info }\n}\n/** `value` in percentage. The value is written as non-percentage, e.g., `percent(1)` for 100% */\nexport function percent(value: number, info?: Info): ConstantNode<number> {\n  if (value >= Number.MAX_VALUE / 100) value = Infinity\n  if (value <= -Number.MAX_VALUE / 100) value = -Infinity\n  return constant(value, { unit: \"%\", ...info })\n}\n/** Inject `info` to the node in-place */\nexport function infoMut(node: OptNode, info: Info): OptNode\nexport function infoMut(node: NumNode, info: Info): NumNode\nexport function infoMut(node: StrNode, info: Info): StrNode\nexport function infoMut(node: AnyNode, info: Info): AnyNode\nexport function infoMut(node: AnyNode, info: Info): AnyNode {\n  if (info) node.info = { ...node.info, ...info }\n  return node\n}\n\n/** `table[string] ?? defaultNode` */\nexport function lookup(index: StrNode, table: Dict<string, NumNode>, defaultV: Num | \"none\", info?: Info): LookupNode<NumNode>\nexport function lookup(index: StrNode, table: Dict<string, StrNode>, defaultV: Str | \"none\", info?: Info): LookupNode<StrNode>\nexport function lookup(index: StrNode, table: Dict<string, AnyNode>, defaultV: N_S | \"none\", info?: Info): LookupNode<AnyNode> {\n  return { operation: \"lookup\", operands: defaultV !== \"none\" ? [intoV(index), intoV(defaultV)] : [intoV(index)], table, info }\n}\n\n/** min( x1, x2, ... ) */\nexport function min(...values: Opt[]): ComputeNode<OptNode, OptNode>\nexport function min(...values: Num[]): ComputeNode\nexport function min(...values: Num[]): ComputeNode {\n  return { operation: \"min\", operands: intoOps(values) }\n}\n/** max( x1, x2, ... ) */\nexport function max(...values: Opt[]): ComputeNode<OptNode, OptNode>\nexport function max(...values: Num[]): ComputeNode\nexport function max(...values: Num[]): ComputeNode {\n  return { operation: \"max\", operands: intoOps(values) }\n}\n/** x1 + x2 + ... */\nexport function sum(...values: Opt[]): ComputeNode<OptNode, OptNode>\nexport function sum(...values: Num[]): ComputeNode\nexport function sum(...values: Num[]): ComputeNode {\n  return { operation: \"add\", operands: intoOps(values) }\n}\n/** x1 * x2 * ... */\nexport function prod(...values: Opt[]): ComputeNode<OptNode, OptNode>\nexport function prod(...values: Num[]): ComputeNode\nexport function prod(...values: Num[]): ComputeNode {\n  return { operation: \"mul\", operands: intoOps(values) }\n}\n/** x / (x + c) */\nexport function frac(x: Opt, c: Opt): ComputeNode<OptNode, OptNode>\nexport function frac(x: Num, c: Num): ComputeNode\nexport function frac(x: Num, c: Num): ComputeNode {\n  return { operation: \"sum_frac\", operands: intoOps([x, c]) }\n}\nexport function res(base: Opt): ComputeNode<OptNode, OptNode>\nexport function res(base: Num): ComputeNode\nexport function res(base: Num): ComputeNode {\n  return { operation: \"res\", operands: intoOps([base]) }\n}\n\n/** v1 == v2 ? eq : neq */\nexport function compareEq(v1: Num, v2: Num, eq: Num, neq: Num, info?: Info): MatchNode<NumNode>\nexport function compareEq(v1: Num, v2: Num, eq: Str, neq: Str, info?: Info): MatchNode<StrNode>\nexport function compareEq(v1: Str, v2: Str, eq: Num, neq: Num, info?: Info): MatchNode<NumNode>\nexport function compareEq(v1: Str, v2: Str, eq: Str, neq: Str, info?: Info): MatchNode<StrNode>\nexport function compareEq(v1: N_S, v2: N_S, eq: N_S, neq: N_S, info?: Info): MatchNode<AnyNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(eq), intoV(neq)], info }\n}\n/** v1 == v2 ? pass : 0 */\nexport function equal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode>\nexport function equal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode>\nexport function equal(v1: N_S, v2: N_S, pass: Num, info?: Info): MatchNode<NumNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoVInfo(pass, info), intoV(0)], emptyOn: \"unmatch\" }\n}\n/** v1 == v2 ? pass : `undefined` */\nexport function equalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode>\nexport function equalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode>\nexport function equalStr(v1: N_S, v2: N_S, pass: Str, info?: Info): MatchNode<StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoVInfo(pass, info), intoV(undefined)], emptyOn: \"unmatch\" }\n}\n/** v1 != v2 ? pass : 0 */\nexport function unequal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode>\nexport function unequal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode>\nexport function unequal(v1: N_S, v2: N_S, pass: Num, info?: Info): MatchNode<NumNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoVInfo(pass, info)], emptyOn: \"match\" }\n}\n/** v1 != v2 ? pass : `undefined` */\nexport function unequalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode>\nexport function unequalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode>\nexport function unequalStr(v1: N_S, v2: N_S, pass: Str, info?: Info): MatchNode<StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(undefined), intoVInfo(pass, info)], emptyOn: \"match\" }\n}\n/** v1 >= v2 ? pass : 0 */\nexport function greaterEq(v1: Opt, v2: Opt, pass: Opt, info?: Info): ThresholdNode<OptNode, OptNode, OptNode>\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): ThresholdNode<NumNode>\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): ThresholdNode<NumNode> {\n  return { operation: \"threshold\", operands: [intoV(v1), intoV(v2), intoVInfo(pass, info), intoV(0)], emptyOn: \"l\" }\n}\n/** v1 >= v2 ? pass : `undefined` */\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): ThresholdNode<StrNode> {\n  return { operation: \"threshold\", operands: [intoV(v1), intoV(v2), intoVInfo(pass, info), intoV(undefined)], emptyOn: \"l\" }\n}\n/** v1 < v2 ? pass : 0 */\nexport function lessThan(v1: Opt, v2: Opt, pass: Opt, info?: Info): ThresholdNode<OptNode, OptNode, OptNode>\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): ThresholdNode<NumNode>\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): ThresholdNode<NumNode> {\n  return { operation: \"threshold\", operands: [intoV(v1), intoV(v2), intoV(0), intoVInfo(pass, info)], emptyOn: \"ge\" }\n}\n/** v1 >= v2 ? ge : le */\nexport function threshold(v1: Opt, v2: Opt, ge: Opt, le: Opt, info?: Info): ThresholdNode<OptNode, OptNode, OptNode>\nexport function threshold(v1: Num, v2: Num, ge: Num, le: Num, info?: Info): ThresholdNode<NumNode>\nexport function threshold(v1: Num, v2: Num, ge: Num, le: Num, info?: Info): ThresholdNode<NumNode> {\n  return { operation: \"threshold\", operands: [intoV(v1), intoV(v2), intoV(ge), intoV(le)], info }\n}\n\nexport function setReadNodeKeys<T extends NodeList>(nodeList: T, prefix: string[] = []): T {\n  if (nodeList.operation) {\n    if (nodeList.operation !== \"read\")\n      throw new Error(`Found ${(nodeList as any).operation} node while making reader`)\n    return { ...nodeList, path: prefix }\n  } else {\n    return objectKeyMap(Object.keys(nodeList), key =>\n      setReadNodeKeys(nodeList[key], [...prefix, key])) as any\n  }\n}\nexport function data(base: NumNode, data: Data): DataNode<NumNode>\nexport function data(base: StrNode, data: Data): DataNode<StrNode>\nexport function data(base: AnyNode, data: Data): DataNode<NumNode> | DataNode<StrNode>\nexport function data(base: AnyNode, data: Data): DataNode<NumNode> | DataNode<StrNode> {\n  return { operation: \"data\", operands: [base as any], data }\n}\nexport function resetData(base: NumNode, data: Data, info?: Info): DataNode<NumNode>\nexport function resetData(base: StrNode, data: Data, info?: Info): DataNode<StrNode>\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<AnyNode>\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<AnyNode> {\n  return { operation: \"data\", operands: [base], data, reset: true, info }\n}\n\n\nexport function customRead(path: readonly string[], info?: Info): ReadNode<number> {\n  return { operation: \"read\", operands: [], path, info, type: \"number\" }\n}\nexport function customStringRead(path: readonly string[]): ReadNode<string> {\n  return { operation: \"read\", operands: [], path, type: \"string\" }\n}\nexport function read(accu?: ReadNode<number>[\"accu\"], info?: Info): ReadNode<number> {\n  return { operation: \"read\", operands: [], path: [], accu, info, type: \"number\" }\n}\n/**\n * CAUTION: Use `prio` accumulation sparingly. WR don't assume the reading order, so the result may be unstable\n */\nexport function stringRead(accu?: ReadNode<string | undefined>[\"accu\"]): ReadNode<string | undefined> {\n  return { operation: \"read\", operands: [], path: [], accu, type: \"string\" }\n}\nexport function stringPrio(...operands: Str[]): StrPrioNode {\n  return { operation: \"prio\", operands: intoOps(operands) }\n}\n/** list[index] */\nexport function subscript<V>(index: NumNode, list: V[], info?: Info): SubscriptNode<V> {\n  return { operation: \"subscript\", operands: [index], list, info }\n}\n\nfunction intoOps(values: Num[]): NumNode[]\nfunction intoOps(values: Str[]): StrNode[]\nfunction intoOps(values: N_S[]): AnyNode[] {\n  return values.map(value => typeof value === \"object\" ? value : constant(value))\n}\nfunction intoV(value: Num): NumNode\nfunction intoV(value: Str): StrNode\nfunction intoV(value: N_S): AnyNode\nfunction intoV(value: N_S): AnyNode {\n  return (typeof value !== \"object\") ? constant(value) : value\n}\nfunction intoVInfo(value: Num, info: Info | undefined): NumNode\nfunction intoVInfo(value: Str, info: Info | undefined): StrNode\nfunction intoVInfo(value: N_S, info: Info | undefined): AnyNode\nfunction intoVInfo(value: N_S, info: Info | undefined): AnyNode {\n  if (!info) return intoV(value)\n  return (typeof value !== \"object\") ? constant(value, info) : infoMut({ ...value }, info)\n}\n\ntype _NodeList = { [key: string]: NodeList } & { operation?: never }\ntype NodeList = _NodeList | ReadNode<number> | ReadNode<string>\n","import { AnyNode, Base, NodeData, NumNode, StrNode } from \"./type\"\nimport { constant } from \"./utils\"\n\nexport function deepNodeClone<T extends NodeData<NumNode | StrNode | undefined>>(data: T): T {\n  const map = new Map()\n  function internal(orig: any) {\n    if (typeof orig !== \"object\") return orig\n    const old = map.get(orig)\n    if (old) return old\n\n    const cache: any = Array.isArray(orig)\n      ? orig.map(val => internal(val))\n      : Object.fromEntries(Object.entries(orig).map(([key, val]) =>\n        [key, key === \"info\" ? val : internal(val)]))\n    map.set(orig, cache)\n    return cache\n  }\n  return internal(data)\n}\n\nexport function forEachNodes<T extends Base<T> = AnyNode>(formulas: T[], topDown: (formula: T) => void, bottomUp: (formula: T) => void): void {\n  const visiting = new Set<T>(), visited = new Set<T>()\n\n  function traverse(formula: T) {\n    if (visited.has(formula)) return\n\n    if (visiting.has(formula)) {\n      console.error(\"Found cyclical dependency during formula traversal\")\n      return\n    }\n    visiting.add(formula)\n\n    topDown(formula)\n\n    formula.operands.forEach(traverse)\n\n    bottomUp(formula)\n\n    visiting.delete(formula)\n    visited.add(formula)\n  }\n\n  formulas.forEach(traverse)\n}\n\nexport function mapFormulas<Input extends Base<Input> = AnyNode, Interim extends Base<Interim> = Input, Output extends Base<Output> = Interim>(formulas: Input[], topDownMap: (formula: Input | Interim) => Interim, bottomUpMap: (current: Interim | Output, orig: Input | Interim) => Output): Output[] {\n  const visiting = new Set<Input | Interim>()\n  const topDownMapped = new Map<Input | Interim, Output>()\n  const bottomUpMapped = new Map<Interim, Output>()\n\n  function check(formula: Input | Interim): Output {\n    let topDown: Interim | Output | undefined = topDownMapped.get(formula)\n    if (topDown) return topDown\n    topDown = topDownMap(formula)\n\n    let bottomUp = bottomUpMapped.get(topDown)\n    if (bottomUp) return bottomUp\n\n    if (visiting.has(topDown)) {\n      console.error(\"Found cyclical dependency during formula mapping\")\n      return constant(NaN) as any\n    }\n    visiting.add(topDown)\n\n    bottomUp = bottomUpMap(traverse(topDown), formula)\n\n    visiting.delete(topDown)\n\n    topDownMapped.set(formula, bottomUp)\n    bottomUpMapped.set(topDown, bottomUp)\n    return bottomUp\n  }\n\n  function traverse(formula: Interim): Interim | Output {\n    const operands = formula.operands.map(check)\n    return arrayEqual<Interim | Output>(operands, formula.operands) ? formula : { ...formula, operands }\n  }\n\n  const result = formulas.map(check)\n  return arrayEqual<Input | Output>(result, formulas) ? formulas as any : result\n}\n\nexport function customMapFormula<Context, Output, Input extends Base<Input>>(formulas: Input[], context: Context, map: (formula: Input, context: Context, map: (node: Input, context: Context) => Output) => Output): Output[] {\n  const contextMapping = new Map<Context, [Set<Input>, Map<Input, Output>]>()\n  function internalMap(formula: Input, context: Context): Output {\n    let current = contextMapping.get(context)\n    if (!current) contextMapping.set(context, current = [new Set(), new Map()])\n    const [visiting, mapping] = current\n\n    const old = mapping.get(formula)\n    if (old) return old\n\n    if (visiting.has(formula))\n      throw new Error(\"Found cyclical dependency during formula mapping\")\n\n    visiting.add(formula)\n    const newFormula = map(formula, context, internalMap)\n    mapping.set(formula, newFormula)\n    visiting.delete(formula)\n\n    return newFormula\n  }\n  return formulas.map(formula => internalMap(formula, context))\n}\n\nfunction arrayEqual<T>(a: readonly T[] | undefined, b: readonly T[] | undefined): boolean {\n  if (a === undefined) return b === undefined\n  if (b === undefined) return false\n\n  return a.length === b.length && a.every((value, i) => value === b[i])\n}\n","import type { ArtifactBuildData } from \"../PageCharacter/CharacterDisplay/Tabs/TabOptimize/common\"\nimport { assertUnreachable, objPathValue } from \"../Util/Util\"\nimport { customMapFormula, forEachNodes, mapFormulas } from \"./internal\"\nimport { AnyNode, CommutativeMonoidOperation, ComputeNode, ConstantNode, Data, NumNode, Operation, ReadNode, StrNode, StrPrioNode, ThresholdNode } from \"./type\"\nimport { constant } from \"./utils\"\n\nexport type OptNode = ComputeNode<OptNode, OptNode> | ThresholdNode<OptNode, OptNode, OptNode> |\n  ReadNode<number> | ConstantNode<number>\n\nconst allCommutativeMonoidOperations: StrictDict<CommutativeMonoidOperation, (_: number[]) => number> = {\n  min: (x: number[]): number => Math.min(...x),\n  max: (x: number[]): number => Math.max(...x),\n  add: (x: number[]): number => x.reduce((a, b) => a + b, 0),\n  mul: (x: number[]): number => x.reduce((a, b) => a * b, 1),\n}\nexport const allOperations: StrictDict<Operation | \"threshold\", (_: number[]) => number> = {\n  ...allCommutativeMonoidOperations,\n  res: ([res]: number[]): number => {\n    if (res < 0) return 1 - res / 2\n    else if (res >= 0.75) return 1 / (res * 4 + 1)\n    return 1 - res\n  },\n  sum_frac: (x: number[]): number => x[0] / x.reduce((a, b) => a + b),\n  threshold: ([value, threshold, pass, fail]: number[]): number => value >= threshold ? pass : fail,\n}\n\nconst commutativeMonoidOperationSet = new Set(Object.keys(allCommutativeMonoidOperations) as (NumNode[\"operation\"])[])\n\nexport function optimize(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): OptNode[] {\n  let opts = constantFold(formulas, topLevelData, shouldFold)\n  opts = flatten(opts)\n  return deduplicate(opts)\n}\nexport function precompute(formulas: OptNode[], initial: ArtifactBuildData[\"values\"], binding: (readNode: ReadNode<number> | ReadNode<string | undefined>) => string, slotCount: number): (_: ArtifactBuildData[]) => number[] {\n  let body = `\n\"use strict\";\n// copied from the code above\nfunction res(res) {\n  if (res < 0) return 1 - res / 2\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\n  return 1 - res\n}\nconst x0=0`; // making sure `const` has at least one entry\n\n  let i = 1;\n  const names = new Map<NumNode | StrNode, string>()\n  forEachNodes(formulas, _ => { }, f => {\n    const { operation, operands } = f, name = `x${i++}`, operandNames = operands.map((x: OptNode) => names.get(x)!)\n    names.set(f, name)\n    switch (operation) {\n      case \"read\": {\n        const key = binding(f)\n        let arr = new Array(slotCount).fill(null).map((x, i) => `(b[${i}].values[\"${key}\"] ?? 0)`)\n        if (initial[key] && initial[key] !== 0) {\n          arr = [initial[key].toString(), ...arr]\n        }\n        body += `,${name}=${arr.join('+')}`\n        break\n      }\n      case \"const\": names.set(f, `(${f.value})`); break\n      case \"add\": case \"mul\": body += `,${name}=${operandNames.join(operation === \"add\" ? \"+\" : \"*\")}`; break\n      case \"min\": case \"max\": body += `,${name}=Math.${operation}(${operandNames})`; break\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = operandNames\n        body += `,${name}=(${value}>=${threshold})?${pass}:${fail}`\n        break\n      }\n      case \"res\": body += `,${name}=res(${operandNames[0]})`; break\n      case \"sum_frac\": body += `,${name}=${operandNames[0]}/(${operandNames[0]}+${operandNames[1]})`; break\n\n      default: assertUnreachable(operation)\n    }\n  })\n  body += `;\\nreturn [${formulas.map(f => names.get(f)!)}]`\n  return new (Function as any)(`b`, body)\n}\n\nfunction flatten(formulas: OptNode[]): OptNode[] {\n  return mapFormulas(formulas, f => f, _formula => {\n    let result = _formula\n    if (commutativeMonoidOperationSet.has(_formula.operation as Operation)) {\n      const formula = _formula as ComputeNode<OptNode>\n      const { operation } = formula\n\n      let flattened = false\n      const operands = formula.operands.flatMap(dep =>\n        (dep.operation === operation) ? (flattened = true, dep.operands) : [dep])\n      result = flattened ? { ...formula, operands } : formula\n    }\n\n    return result\n  })\n}\nfunction deduplicate(formulas: OptNode[]): OptNode[] {\n  function elementCounts<T>(array: readonly T[]): Map<T, number> {\n    const result = new Map<T, number>()\n    for (const value of array) result.set(value, (result.get(value) ?? 0) + 1)\n    return result\n  }\n  function arrayFromCounts<T>(counts: Map<T, number>): T[] {\n    return [...counts].flatMap(([dep, count]) => Array(count).fill(dep))\n  }\n\n  const wrap = {\n    common: {\n      counts: new Map<OptNode, number>(),\n      formulas: new Set<OptNode>(),\n      operation: \"add\" as Operation\n    }\n  }\n\n  while (true) {\n    let next: typeof wrap.common | undefined\n\n    const factored: ComputeNode<OptNode> = { operation: wrap.common.operation, operands: arrayFromCounts(wrap.common.counts) }\n\n    let candidatesByOperation = new Map<Operation, [ComputeNode<OptNode>, Map<OptNode, number>][]>()\n    for (const operation of Object.keys(allCommutativeMonoidOperations))\n      candidatesByOperation.set(operation, [])\n\n    formulas = mapFormulas(formulas, _formula => {\n      if (wrap.common.formulas.has(_formula)) {\n        const formula = _formula as ComputeNode<OptNode>\n        const remainingCounts = new Map(wrap.common.counts)\n        const operands = formula.operands.filter(dep => {\n          const count = remainingCounts.get(dep)\n          if (count) {\n            remainingCounts.set(dep, count - 1)\n            return false\n          }\n          return true\n        })\n\n        if (!operands.length)\n          return factored\n        operands.push(factored)\n        return { ...formula, operands }\n      }\n      return _formula\n    }, _formula => {\n      if (!commutativeMonoidOperationSet.has(_formula.operation as any)) return _formula\n      const formula = _formula as ComputeNode<OptNode>\n\n      if (next) {\n        if (next.operation === formula.operation) {\n          const currentCounts = elementCounts(formula.operands), commonCounts = new Map<OptNode, number>()\n          const nextCounts = next.counts\n          let total = 0\n\n          for (const [dependency, currentCount] of currentCounts.entries()) {\n            const commonCount = Math.min(currentCount, nextCounts.get(dependency) ?? 0)\n            if (commonCount) {\n              commonCounts.set(dependency, commonCount)\n              total += commonCount\n            } else commonCounts.delete(dependency)\n          }\n          if (total > 1) {\n            next.counts = commonCounts\n            next.formulas.add(formula)\n          }\n        }\n      } else {\n        const candidates = candidatesByOperation.get(formula.operation)!\n        const counts = elementCounts(formula.operands)\n\n        for (const [candidate, candidateCounts] of candidates) {\n          let total = 0\n\n          const commonCounts = new Map<OptNode, number>()\n          for (const [dependency, candidateCount] of candidateCounts.entries()) {\n            const count = Math.min(candidateCount, counts.get(dependency) ?? 0)\n            if (count) {\n              commonCounts.set(dependency, count)\n              total += count\n            }\n          }\n          if (total > 1) {\n            next = {\n              counts: commonCounts,\n              formulas: new Set([formula, candidate]),\n              operation: formula.operation\n            }\n            candidatesByOperation.clear()\n            break\n          }\n        }\n        if (!next) candidates.push([formula, counts])\n      }\n\n      return formula\n    })\n\n    if (next) wrap.common = next\n    else break\n  }\n\n  return formulas\n}\n\n/**\n * Replace nodes with known values with appropriate constants,\n * avoiding removal of any nodes that pass `isFixed` predicate\n */\nexport function constantFold(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): OptNode[] {\n  type Context = { data: Data[], processed: Map<NumNode | StrNode, OptNode | StrNode> }\n  const origin: Context = { data: [], processed: new Map() }\n  const nextContextMap = new Map([[origin, new Map<Data, Context>()]])\n\n  const context = { data: [topLevelData], processed: new Map() }\n  nextContextMap.set(context, new Map())\n  nextContextMap.get(origin)!.set(topLevelData, context)\n  return customMapFormula<typeof context, OptNode | StrNode, AnyNode>(formulas, context, (formula, context, map) => {\n    const { operation } = formula, fold = (x: NumNode, c: typeof context) => map(x, c) as OptNode\n    const foldStr = (x: StrNode, c: typeof context) => map(x, c) as StrNode\n    let result: OptNode | StrNode\n    switch (operation) {\n      case \"const\": result = formula; break\n      case \"add\": case \"mul\": case \"max\": case \"min\":\n        const f = allOperations[operation]\n        const numericOperands: number[] = []\n        const formulaOperands: OptNode[] = formula.operands.filter(formula => {\n          const folded = fold(formula, context)\n          return (folded.operation === \"const\")\n            ? (numericOperands.push(folded.value), false)\n            : true\n        }).map(x => fold(x, context))\n        const numericValue = f(numericOperands)\n\n        // Fold degenerate cases. This may incorrectly compute NaN\n        // results, which shouldn't appear under expected usage.\n        // - zero\n        //   - 0 * ... = 0\n        // - infinity\n        //   - max(infinity, ...) = infinity\n        //   - infinity + ... = infinity\n        // - (-infinity)\n        //   - min(-infinity, ...) - infinity\n        //   - (-infinity) + ... = -infinity\n        // - NaN\n        //   - operation(NaN, ...) = NaN\n        if (!isFinite(numericValue)) {\n          if ((operation !== \"mul\") &&\n            (operation !== \"max\" || numericValue > 0) &&\n            (operation !== \"min\" || numericValue < 0)) {\n            result = constant(numericValue)\n            break\n          }\n        } else if (operation === \"mul\" && numericValue === 0) {\n          result = constant(numericValue)\n          break\n        }\n\n        if (numericValue !== f([])) // Skip vacuous values\n          formulaOperands.push(constant(numericValue))\n        if (formulaOperands.length <= 1) result = formulaOperands[0] ?? constant(f([]))\n        else result = { operation, operands: formulaOperands }\n        break\n      case \"res\": case \"sum_frac\": {\n        const operands = formula.operands.map(x => fold(x, context))\n        const f = allOperations[operation]\n        if (operands.every(x => x.operation === \"const\"))\n          result = constant(f(operands.map(x => (x as ConstantNode<number>).value)))\n        else result = { ...formula, operands }\n        break\n      }\n      case \"lookup\": {\n        const index = foldStr(formula.operands[0], context)\n        if (index.operation === \"const\") {\n          const selected = formula.table[index.value!] ?? formula.operands[1]\n          if (selected) {\n            result = map(selected, context)\n            break\n          }\n        }\n        throw new Error(`Unsupported ${operation} node while folding`)\n      }\n      case \"prio\": {\n        const first = formula.operands.find(op => {\n          const folded = foldStr(op, context)\n          if (folded.operation !== \"const\")\n            throw new Error(`Unsupported ${operation} node while folding`)\n          return folded.value !== undefined\n        })\n        result = first ? foldStr(first, context) : constant(undefined)\n        break\n      }\n      case \"small\": {\n        let smallest = undefined as ConstantNode<string | undefined> | undefined\n        for (const operand of formula.operands) {\n          const folded = foldStr(operand, context)\n          if (folded.operation !== \"const\")\n            throw new Error(`Unsupported ${operation} node while folding`)\n          if (smallest?.value === undefined || (folded.value !== undefined && folded.value < smallest.value))\n            smallest = folded\n        }\n        result = smallest ?? constant(undefined)\n        break\n      }\n      case \"match\": {\n        const [v1, v2, match, unmatch] = formula.operands.map((x: NumNode | StrNode) => map(x, context))\n        if (v1.operation !== \"const\" || v2.operation !== \"const\")\n          throw new Error(`Unsupported ${operation} node while folding`)\n        result = (v1.value === v2.value) ? match : unmatch\n        break\n      }\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = formula.operands.map(x => map(x, context) as OptNode)\n        if (pass.operation === \"const\" && fail.operation === \"const\" && pass.value === fail.value)\n          result = pass\n        else if (value.operation === \"const\" && threshold.operation === \"const\")\n          result = value.value >= threshold.value ? pass : fail\n        else\n          result = { ...formula, operands: [value, threshold, pass, fail] }\n        break\n      }\n      case \"subscript\": {\n        const index = fold(formula.operands[0], context)\n        if (index.operation !== \"const\")\n          throw new Error(\"Found non-constant subscript node while folding\")\n        result = constant(formula.list[index.value])\n        break\n      }\n      case \"read\": {\n        const operands = context.data\n          .map(x => objPathValue(x, formula.path) as (NumNode | StrNode))\n          .filter(x => x)\n\n        if (operands.length === 0) {\n          if (shouldFold(formula)) {\n            const { accu } = formula\n            if (accu === undefined || accu === \"small\")\n              result = formula.type === \"string\" ? constant(undefined) : constant(NaN)\n            else result = constant(allOperations[accu]([]))\n          } else result = formula\n        } else if (formula.accu === undefined || operands.length === 1)\n          result = map(operands[operands.length - 1], context)\n        else\n          result = map({ operation: formula.accu, operands } as ComputeNode | StrPrioNode, context)\n        break\n      }\n      case \"data\": {\n        if (formula.reset) context = origin\n        const nextMap = nextContextMap.get(context)!\n        let nextContext = nextMap.get(formula.data)\n        if (!nextContext) {\n          nextContext = { data: [...context.data, formula.data], processed: new Map() }\n          nextContextMap.set(nextContext, new Map())\n          nextMap.set(formula.data, nextContext)\n        }\n        result = map(formula.operands[0], nextContext)\n        break\n      }\n      default: assertUnreachable(operation)\n    }\n\n    if (result.info) {\n      result = { ...result }\n      delete result.info\n    }\n    return result\n  }) as OptNode[]\n}\n\nexport const testing = {\n  constantFold, flatten, deduplicate\n}\n","export const allHitModes = [\"hit\", \"avgHit\", \"critHit\"] as const\nexport const allRegions = [\"mondstadt\", \"liyue\", \"inazuma\", \"sumeru\", \"fontaine\", \"natlan\", \"snezhnaya\", \"khaenriah\"] as const\nexport const allAmpReactions = [\"vaporize\", \"melt\",] as const\nexport const allAdditiveReactions = [\"spread\", \"aggravate\"] as const\nexport const allArtifactSetCount = [1, 2, 3, 4, 5] as const\nexport const allRarities = [5, 4, 3, 2, 1] as const\nexport const allArtifactRarities = [5, 4, 3] as const\nexport const allSlotKeys = [\"flower\", \"plume\", \"sands\", \"goblet\", \"circlet\"] as const\nexport const allElements = ['anemo', 'geo', 'electro', 'hydro', 'pyro', 'cryo', 'dendro'] as const\nexport const allElementsWithPhy = [\"physical\", ...allElements] as const\nexport const allInfusionAuraElements = [\"pyro\", 'cryo', 'hydro'] as const\nexport const allWeaponTypeKeys = ['sword', 'claymore', 'polearm', 'bow', 'catalyst'] as const\nexport const allRollColorKeys = ['roll1', 'roll2', 'roll3', 'roll4', 'roll5', 'roll6'] as const\nexport const allAscension = [0, 1, 2, 3, 4, 5, 6] as const\nexport const allRefinement = [1, 2, 3, 4, 5] as const\nexport const substatType = [\"max\", \"mid\", \"min\"] as const\nexport const genderKeys = [\"F\", \"M\"] as const\nexport type Gender = typeof genderKeys[number]\n\n\nexport const allArtifactSets = [\n  \"Adventurer\",\n  \"ArchaicPetra\",\n  \"Berserker\",\n  \"BlizzardStrayer\",\n  \"BloodstainedChivalry\",\n  \"BraveHeart\",\n  \"CrimsonWitchOfFlames\",\n  \"DeepwoodMemories\",\n  \"DefendersWill\",\n  \"EchoesOfAnOffering\",\n  \"EmblemOfSeveredFate\",\n  \"Gambler\",\n  \"GildedDreams\",\n  \"GladiatorsFinale\",\n  \"HeartOfDepth\",\n  \"HuskOfOpulentDreams\",\n  \"Instructor\",\n  \"Lavawalker\",\n  \"LuckyDog\",\n  \"MaidenBeloved\",\n  \"MartialArtist\",\n  \"NoblesseOblige\",\n  \"OceanHuedClam\",\n  \"PaleFlame\",\n  \"PrayersForDestiny\",\n  \"PrayersForIllumination\",\n  \"PrayersForWisdom\",\n  \"PrayersToSpringtime\",\n  \"ResolutionOfSojourner\",\n  \"RetracingBolide\",\n  \"Scholar\",\n  \"ShimenawasReminiscence\",\n  \"TenacityOfTheMillelith\",\n  \"TheExile\",\n  \"ThunderingFury\",\n  \"Thundersoother\",\n  \"TinyMiracle\",\n  \"TravelingDoctor\",\n  \"VermillionHereafter\",\n  \"ViridescentVenerer\",\n  \"WanderersTroupe\",\n] as const\nexport const nonTravelerCharacterKeys = [\n  \"Albedo\",\n  \"Aloy\",\n  \"Amber\",\n  \"AratakiItto\",\n  \"Barbara\",\n  \"Beidou\",\n  \"Bennett\",\n  \"Candace\",\n  \"Chongyun\",\n  \"Collei\",\n  \"Cyno\",\n  \"Diluc\",\n  \"Diona\",\n  \"Dori\",\n  \"Eula\",\n  \"Fischl\",\n  \"Ganyu\",\n  \"Gorou\",\n  \"HuTao\",\n  \"Jean\",\n  \"KaedeharaKazuha\",\n  \"Kaeya\",\n  \"KamisatoAyaka\",\n  \"KamisatoAyato\",\n  \"Keqing\",\n  \"Klee\",\n  \"KujouSara\",\n  \"KukiShinobu\",\n  \"Layla\",\n  \"Lisa\",\n  \"Mona\",\n  \"Nahida\",\n  \"Nilou\",\n  \"Ningguang\",\n  \"Noelle\",\n  \"Qiqi\",\n  \"RaidenShogun\",\n  \"Razor\",\n  \"Rosaria\",\n  \"SangonomiyaKokomi\",\n  \"Sayu\",\n  \"Shenhe\",\n  \"ShikanoinHeizou\",\n  \"Sucrose\",\n  \"Tartaglia\",\n  \"Thoma\",\n  \"Tighnari\",\n  \"Venti\",\n  \"Xiangling\",\n  \"Xiao\",\n  \"Xingqiu\",\n  \"Xinyan\",\n  \"YaeMiko\",\n  \"Yanfei\",\n  \"Yelan\",\n  \"Yoimiya\",\n  \"YunJin\",\n  \"Zhongli\",\n] as const\nexport const locationCharacterKeys = [\n  ...nonTravelerCharacterKeys,\n  \"Traveler\",\n] as const\nexport const travelerElements = [\n  \"anemo\",\n  \"geo\",\n  \"electro\",\n  \"dendro\"\n] as const\nexport const travelerFKeys = [\n  \"TravelerAnemoF\",\n  \"TravelerGeoF\",\n  \"TravelerElectroF\",\n  \"TravelerDendroF\",\n] as const\nexport const travelerMKeys = [\n  \"TravelerAnemoM\",\n  \"TravelerGeoM\",\n  \"TravelerElectroM\",\n  \"TravelerDendroM\",\n] as const\nexport const travelerKeys = [\n  \"TravelerAnemo\",\n  \"TravelerGeo\",\n  \"TravelerElectro\",\n  \"TravelerDendro\",\n] as const\nexport const allCharacterKeys = [\n  ...nonTravelerCharacterKeys,\n  ...travelerKeys\n] as const\n\nexport const allCharacterSheetKeys = [\n  ...nonTravelerCharacterKeys,\n  ...travelerFKeys,\n  ...travelerMKeys,\n]\n\nexport const allWeaponSwordKeys = [\n  \"AmenomaKageuchi\",\n  \"AquilaFavonia\",\n  \"BlackcliffLongsword\",\n  \"CinnabarSpindle\",\n  \"CoolSteel\",\n  \"KagotsurubeIsshin\",\n  \"DarkIronSword\",\n  \"DullBlade\",\n  \"FavoniusSword\",\n  \"FesteringDesire\",\n  \"FilletBlade\",\n  \"FreedomSworn\",\n  \"HaranGeppakuFutsu\",\n  \"HarbingerOfDawn\",\n  \"IronSting\",\n  \"KeyOfKhajNisut\",\n  \"LionsRoar\",\n  \"MistsplitterReforged\",\n  \"PrimordialJadeCutter\",\n  \"PrototypeRancour\",\n  \"RoyalLongsword\",\n  \"SacrificialSword\",\n  \"SapwoodBlade\",\n  \"SilverSword\",\n  \"SkyriderSword\",\n  \"SkywardBlade\",\n  \"SummitShaper\",\n  \"SwordOfDescension\",\n  \"TheAlleyFlash\",\n  \"TheBlackSword\",\n  \"TheFlute\",\n  \"TravelersHandySword\",\n  \"XiphosMoonlight\",\n] as const\nexport type WeaponSwordKey = typeof allWeaponSwordKeys[number]\n\nexport const allWeaponClaymoreKeys = [\n  \"Akuoumaru\",\n  \"BlackcliffSlasher\",\n  \"BloodtaintedGreatsword\",\n  \"DebateClub\",\n  \"FavoniusGreatsword\",\n  \"FerrousShadow\",\n  \"ForestRegalia\",\n  \"KatsuragikiriNagamasa\",\n  \"LithicBlade\",\n  \"LuxuriousSeaLord\",\n  \"MakhairaAquamarine\",\n  \"OldMercsPal\",\n  \"PrototypeArchaic\",\n  \"Rainslasher\",\n  \"RedhornStonethresher\",\n  \"RoyalGreatsword\",\n  \"SacrificialGreatsword\",\n  \"SerpentSpine\",\n  \"SkyriderGreatsword\",\n  \"SkywardPride\",\n  \"SnowTombedStarsilver\",\n  \"SongOfBrokenPines\",\n  \"TheBell\",\n  \"TheUnforged\",\n  \"WasterGreatsword\",\n  \"Whiteblind\",\n  \"WhiteIronGreatsword\",\n  \"WolfsGravestone\",\n] as const\nexport type WeaponClaymoreKey = typeof allWeaponClaymoreKeys[number]\n\nexport const allWeaponPolearmKeys = [\n  \"BeginnersProtector\",\n  \"BlackcliffPole\",\n  \"BlackTassel\",\n  \"CalamityQueller\",\n  \"CrescentPike\",\n  \"Deathmatch\",\n  \"DragonsBane\",\n  \"DragonspineSpear\",\n  \"EngulfingLightning\",\n  \"FavoniusLance\",\n  \"Halberd\",\n  \"IronPoint\",\n  \"KitainCrossSpear\",\n  \"LithicSpear\",\n  \"MissiveWindspear\",\n  \"Moonpiercer\",\n  \"PrimordialJadeWingedSpear\",\n  \"PrototypeStarglitter\",\n  \"RoyalSpear\",\n  \"SkywardSpine\",\n  \"StaffOfHoma\",\n  \"StaffOfTheScarletSands\",\n  \"TheCatch\",\n  \"VortexVanquisher\",\n  \"WavebreakersFin\",\n  \"WhiteTassel\",\n] as const\nexport type WeaponPoleArmKey = typeof allWeaponPolearmKeys[number]\n\nexport const allWeaponBowKeys = [\n  \"AlleyHunter\",\n  \"AmosBow\",\n  \"AquaSimulacra\",\n  \"BlackcliffWarbow\",\n  \"CompoundBow\",\n  \"ElegyForTheEnd\",\n  \"EndOfTheLine\",\n  \"FadingTwilight\",\n  \"FavoniusWarbow\",\n  \"Hamayumi\",\n  \"HuntersBow\",\n  \"HuntersPath\",\n  \"KingsSquire\",\n  \"Messenger\",\n  \"MitternachtsWaltz\",\n  \"MouunsMoon\",\n  \"PolarStar\",\n  \"Predator\",\n  \"PrototypeCrescent\",\n  \"RavenBow\",\n  \"RecurveBow\",\n  \"RoyalBow\",\n  \"Rust\",\n  \"SacrificialBow\",\n  \"SeasonedHuntersBow\",\n  \"SharpshootersOath\",\n  \"SkywardHarp\",\n  \"Slingshot\",\n  \"TheStringless\",\n  \"TheViridescentHunt\",\n  \"ThunderingPulse\",\n  \"WindblumeOde\",\n] as const\nexport type WeaponBowKey = typeof allWeaponBowKeys[number]\n\nexport const allWeaponCatalystKeys = [\n  \"ApprenticesNotes\",\n  \"AThousandFloatingDreams\",\n  \"BlackcliffAgate\",\n  \"DodocoTales\",\n  \"EmeraldOrb\",\n  \"EverlastingMoonglow\",\n  \"EyeOfPerception\",\n  \"FavoniusCodex\",\n  \"Frostbearer\",\n  \"FruitOfFulfillment\",\n  \"HakushinRing\",\n  \"KagurasVerity\",\n  \"LostPrayerToTheSacredWinds\",\n  \"MagicGuide\",\n  \"MappaMare\",\n  \"MemoryOfDust\",\n  \"OathswornEye\",\n  \"OtherworldlyStory\",\n  \"PocketGrimoire\",\n  \"PrototypeAmber\",\n  \"RoyalGrimoire\",\n  \"SacrificialFragments\",\n  \"SkywardAtlas\",\n  \"SolarPearl\",\n  \"TheWidsith\",\n  \"ThrillingTalesOfDragonSlayers\",\n  \"TwinNephrite\",\n  \"WanderingEvenstar\",\n  \"WineAndSong\",\n] as const\nexport type WeaponCatalystKey = typeof allWeaponCatalystKeys[number]\n\nexport const allWeaponKeys = [\n  ...allWeaponSwordKeys,\n  ...allWeaponClaymoreKeys,\n  ...allWeaponPolearmKeys,\n  ...allWeaponBowKeys,\n  ...allWeaponCatalystKeys,\n] as const\nexport type WeaponKey = WeaponSwordKey | WeaponClaymoreKey | WeaponPoleArmKey | WeaponBowKey | WeaponCatalystKey\n\nexport const characterSpecializedStatKeys = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"dendro_dmg_\"] as const\n\nexport type HitModeKey = typeof allHitModes[number]\nexport type Region = typeof allRegions[number]\nexport type AmpReactionKey = typeof allAmpReactions[number]\nexport type AdditiveReactionKey = typeof allAdditiveReactions[number]\nexport type SetNum = typeof allArtifactSetCount[number]\nexport type Rarity = typeof allRarities[number]\nexport type ArtifactRarity = typeof allArtifactRarities[number]\nexport type SlotKey = typeof allSlotKeys[number]\nexport type ElementKey = typeof allElements[number]\nexport type ElementKeyWithPhy = typeof allElementsWithPhy[number]\nexport type InfusionAuraElements = typeof allInfusionAuraElements[number]\nexport type ArtifactSetKey = typeof allArtifactSets[number]\nexport type NonTravelerCharacterKey = typeof nonTravelerCharacterKeys[number]\nexport type CharacterKey = typeof allCharacterKeys[number]\nexport type CharacterSheetKey = typeof allCharacterSheetKeys[number]\nexport type LocationCharacterKey = typeof locationCharacterKeys[number]\nexport type TravelerKey = typeof travelerKeys[number]\nexport type TravelerElementKey = typeof travelerElements[number]\nexport type WeaponTypeKey = typeof allWeaponTypeKeys[number]\nexport type RollColorKey = typeof allRollColorKeys[number]\nexport type Ascension = typeof allAscension[number]\nexport type Refinement = typeof allRefinement[number]\nexport type CharacterSpecializedStatKey = typeof characterSpecializedStatKeys[number]\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\nexport const allowedAmpReactions: Dict<ElementKey, AmpReactionKey[]> = {\n  pyro: [\"vaporize\", \"melt\"],\n  hydro: [\"vaporize\"],\n  cryo: [\"melt\"],\n  anemo: [\"vaporize\", \"melt\"],\n}\nexport const allowedAdditiveReactions: Dict<ElementKey, AdditiveReactionKey[]> = {\n  dendro: [\"spread\"],\n  electro: [\"aggravate\"],\n  anemo: [\"aggravate\"],\n}\n\nexport type SubstatType = typeof substatType[number]\n\nexport function charKeyToLocCharKey(charKey: CharacterKey): LocationCharacterKey {\n  if (travelerKeys.includes(charKey as TravelerKey)) return \"Traveler\"\n  return charKey as LocationCharacterKey\n}\n\nexport function TravelerToElement(key: TravelerKey, element: TravelerElementKey): TravelerKey {\n  return \"Traveler\" + element.toUpperCase().slice(0, 1) + element.slice(1) as TravelerKey\n}\n\nexport type LocationKey = LocationCharacterKey | \"\"\n\nexport function charKeyToCharName(ck: CharacterKey, gender: Gender): string {\n  return ck.startsWith(\"Traveler\") ? \"Traveler\" + gender : ck\n}\n","import { ArtSetExclusion } from \"../../../../Database/DataManagers/BuildSettingData\";\nimport { forEachNodes, mapFormulas } from \"../../../../Formula/internal\";\nimport { allOperations, constantFold, OptNode } from \"../../../../Formula/optimization\";\nimport { ConstantNode } from \"../../../../Formula/type\";\nimport { constant, customRead, max, min, threshold } from \"../../../../Formula/utils\";\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from \"../../../../Types/consts\";\nimport { assertUnreachable, objectKeyMap, objectMap, range } from \"../../../../Util/Util\";\n\ntype MicropassOperation = \"reaffine\" | \"pruneArtRange\" | \"pruneNodeRange\" | \"pruneOrder\"\nexport function pruneAll(nodes: OptNode[], minimum: number[], arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion, forced: Dict<MicropassOperation, boolean>): { nodes: OptNode[], arts: ArtifactsBySlot } {\n  let should = forced\n  /** If `key` makes progress, all operations in `value` should be performed */\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\n    pruneOrder: { pruneNodeRange: true },\n    pruneArtRange: { pruneNodeRange: true },\n    pruneNodeRange: { reaffine: true },\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true }\n  }\n  let count = 0\n  while (Object.values(should).some(x => x) && count++ < 20) {\n    if (should.pruneOrder) {\n      delete should.pruneOrder\n      const newArts = pruneOrder(arts, numTop, exclusion)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneOrder }\n      }\n    }\n    if (should.pruneArtRange) {\n      delete should.pruneArtRange\n      const newArts = pruneArtRange(nodes, arts, minimum)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneArtRange }\n      }\n    }\n    if (should.pruneNodeRange) {\n      delete should.pruneNodeRange\n      const newNodes = pruneNodeRange(nodes, arts)\n      if (nodes !== newNodes) {\n        nodes = newNodes\n        should = { ...should, ...deps.pruneNodeRange }\n      }\n    }\n    if (should.reaffine) {\n      delete should.reaffine\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\n      if (nodes !== newNodes || arts !== newArts) {\n        nodes = newNodes\n        arts = newArts\n        should = { ...should, ...deps.reaffine }\n      }\n    }\n  }\n  return { nodes, arts }\n}\n\nexport function pruneExclusion(nodes: OptNode[], exclusion: ArtSetExclusion): OptNode[] {\n  const maxValues: Dict<keyof typeof exclusion, number> = {}\n  for (const [key, e] of Object.entries(exclusion)) {\n    if (!e.includes(4)) continue\n    maxValues[key] = e.includes(2) ? 1 : 3\n  }\n  return mapFormulas(nodes, f => f, f => {\n    if (f.operation !== \"threshold\") return f\n\n    const [v, t, pass, fail] = f.operands\n    if (v.operation === \"read\" && t.operation === \"const\") {\n      const key = v.path[v.path.length - 1], thres = t.value\n      if (key in maxValues) {\n        const max: number = maxValues[key]\n        if (max < thres) return fail\n        if (thres === 2 && exclusion[key]!.includes(2))\n          return threshold(v, 4, pass, fail)\n      }\n    }\n    return f\n  })\n}\n\nfunction reaffine(nodes: OptNode[], arts: ArtifactsBySlot, forceRename: boolean = false): { nodes: OptNode[], arts: ArtifactsBySlot } {\n  const affineNodes = new Set<OptNode>(), topLevelAffine = new Set<OptNode>()\n\n  function visit(node: OptNode, isAffine: boolean) {\n    if (isAffine) affineNodes.add(node)\n    else node.operands.forEach(op => affineNodes.has(op) && topLevelAffine.add(op))\n  }\n\n  const dynKeys = new Set<string>()\n\n  forEachNodes(nodes, _ => { }, f => {\n    const { operation } = f\n    switch (operation) {\n      case \"read\":\n        dynKeys.add(f.path[1])\n        visit(f, true)\n        break\n      case \"add\": visit(f, f.operands.every(op => affineNodes.has(op))); break\n      case \"mul\": {\n        const nonConst = f.operands.filter(op => op.operation !== \"const\")\n        visit(f, nonConst.length === 0 || (nonConst.length === 1 && affineNodes.has(nonConst[0])))\n        break\n      }\n      case \"const\": visit(f, true); break\n      case \"res\": case \"threshold\": case \"sum_frac\":\n      case \"max\": case \"min\": visit(f, false); break\n      default: assertUnreachable(operation)\n    }\n  })\n\n  if ([...topLevelAffine].every(({ operation }) => operation === \"read\" || operation === \"const\") &&\n    Object.keys(arts.base).length === dynKeys.size)\n    return { nodes, arts }\n\n  let current = -1\n  function nextDynKey(): string {\n    while (dynKeys.has(`${++current}`));\n    return `${current}`\n  }\n\n  nodes.forEach(node => affineNodes.has(node) && topLevelAffine.add(node))\n  const affine = [...topLevelAffine].filter(f => f.operation !== \"const\")\n  const affineMap = new Map(affine.map(node => [node,\n    !forceRename && node.operation === \"read\" && node.path[0] === \"dyn\"\n      ? node\n      : { ...customRead([\"dyn\", `${nextDynKey()}`]), accu: \"add\" as const }]))\n  nodes = mapFormulas(nodes, f => affineMap.get(f) ?? f, f => f)\n\n  function reaffineArt(stat: DynStat): DynStat {\n    const values = constantFold([...affineMap.keys()], {\n      dyn: objectMap(stat, (value) => constant(value))\n    } as any, _ => true)\n    return Object.fromEntries([...affineMap.values()].map((v, i) => [v.path[1], (values[i] as ConstantNode<number>).value]))\n  }\n  const result = {\n    nodes, arts: {\n      base: reaffineArt(arts.base),\n      values: objectKeyMap(allSlotKeys, slot =>\n        arts.values[slot].map(({ id, set, values }) => ({ id, set, values: reaffineArt(values) })))\n    }\n  }\n  const offsets = Object.entries(reaffineArt({}))\n  for (const arts of Object.values(result.arts.values))\n    for (const { values } of arts)\n      for (const [key, baseValue] of offsets)\n        values[key] -= baseValue\n  return result\n}\n/** Remove artifacts that cannot be in top `numTop` builds */\nfunction pruneOrder(arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion): ArtifactsBySlot {\n  let progress = false\n  /**\n   * Note:\n   * This function assumes that every base (reaffined) stats are monotonically increasing. That is, artifacts\n   * with higher stats are better. This remains true as long as the main and substats are in increasing. Set\n   * effects that decrease enemy resistance (which is monotonically decreasing) does not violate this assumption\n   * as set effects are not handled here.\n   */\n  const allowRainbow = !exclusion.rainbow?.length, keys = Object.keys(arts.base)\n  const noSwitchIn = new Set(Object.entries(exclusion).filter(([_, v]) => v.length).map(([k]) => k) as ArtifactSetKey[])\n  const noSwitchOut = new Set(Object.entries(exclusion).filter(([_, v]) => v.includes(2) && !v.includes(4)).map(([k]) => k) as ArtifactSetKey[])\n  const values = objectKeyMap(allSlotKeys, slot => {\n    const list = arts.values[slot]\n    const newList = list.filter(art => {\n      let count = 0\n      return list.every(other => {\n        const otherBetterEqual = keys.every(k => (other.values[k] ?? 0) >= (art.values[k] ?? 0))\n        const otherMaybeBetter = keys.some(k => (other.values[k] ?? 0) > (art.values[k] ?? 0))\n        const otherBetter = otherBetterEqual && (otherMaybeBetter || other.id > art.id)\n        const canSwitch = (allowRainbow && !noSwitchIn.has(other.set!) && !noSwitchOut.has(art.set!)) || art.set === other.set\n        if (otherBetter && canSwitch) count++\n        return count < numTop\n      })\n    })\n    if (newList.length !== list.length) progress = true\n    return newList\n  })\n  return progress ? { base: arts.base, values } : arts\n}\n/** Remove artifacts that cannot reach `minimum` in any build */\nfunction pruneArtRange(nodes: OptNode[], arts: ArtifactsBySlot, minimum: number[]): ArtifactsBySlot {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  const wrap = { arts }\n  while (true) {\n    const artRanges = objectKeyMap(allSlotKeys, slot => computeArtRange(wrap.arts.values[slot]))\n    const otherArtRanges = objectKeyMap(allSlotKeys, key =>\n      addArtRange(Object.entries(artRanges).map(a => a[0] === key ? baseRange : a[1]).filter(x => x)))\n\n    let progress = false\n    const values = objectKeyMap(allSlotKeys, slot => {\n      const result = wrap.arts.values[slot].filter(art => {\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\n        const newRange = computeNodeRange(nodes, read)\n        return nodes.every((node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity))\n      })\n      if (result.length !== wrap.arts.values[slot].length)\n        progress = true\n      return result\n    })\n    if (!progress) break\n    wrap.arts = { base: wrap.arts.base, values }\n  }\n  return wrap.arts\n}\nfunction pruneNodeRange(nodes: OptNode[], arts: ArtifactsBySlot): OptNode[] {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  const reads = addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\n  const nodeRange = computeNodeRange(nodes, reads)\n\n  return mapFormulas(nodes, f => {\n    {\n      const { min, max } = nodeRange.get(f)!\n      if (min === max) return constant(min)\n    }\n    const { operation } = f\n    const operandRanges = f.operands.map(x => nodeRange.get(x)!)\n    switch (operation) {\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = operandRanges\n        if (value.min >= threshold.max) return f.operands[2]\n        else if (value.max < threshold.min) return f.operands[3]\n        if (pass.max === pass.min &&\n          fail.max === fail.min &&\n          pass.min === fail.min && isFinite(pass.min))\n          return constant(pass.max)\n        break\n      }\n      case \"min\": {\n        const newOperands = f.operands.filter((_, i) => {\n          const op1 = operandRanges[i]\n          return operandRanges.every((op2, j) => op1.min <= op2.max)\n        })\n        if (newOperands.length < operandRanges.length) return min(...newOperands)\n        break\n      }\n      case \"max\": {\n        const newOperands = f.operands.filter((_, i) => {\n          const op1 = operandRanges[i]\n          return operandRanges.every(op2 => op1.max >= op2.min)\n        })\n        if (newOperands.length < operandRanges.length) return max(...newOperands)\n        break\n      }\n    }\n    return f\n  }, f => f)\n}\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\n  const result: DynMinMax = {}\n  ranges.forEach(range => {\n    Object.entries(range).forEach(([key, value]) => {\n      if (result[key]) {\n        result[key].min += value.min\n        result[key].max += value.max\n      } else result[key] = { ...value }\n    })\n  })\n  return result\n}\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\n  const result: DynMinMax = {}\n  if (arts.length) {\n    Object.keys(arts[0].values)\n      .filter(key => arts.every(art => art.values[key]))\n      .forEach(key => result[key] = { min: arts[0].values[key], max: arts[0].values[key] })\n    arts.forEach(({ values }) => {\n      for (const [key, value] of Object.entries(values)) {\n        if (!result[key]) result[key] = { min: 0, max: value }\n        else {\n          if (result[key].max < value) result[key].max = value\n          if (result[key].min > value) result[key].min = value\n        }\n      }\n    })\n  }\n  return result\n}\nexport function computeFullArtRange(arts: ArtifactsBySlot): DynMinMax {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  return addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\n}\nexport function computeNodeRange(nodes: OptNode[], reads: DynMinMax): Map<OptNode, MinMax> {\n  const range = new Map<OptNode, MinMax>()\n\n  forEachNodes(nodes, _ => { }, f => {\n    const { operation } = f\n    const operands = f.operands.map(op => range.get(op)!)\n    let current: MinMax\n    switch (operation) {\n      case \"read\":\n        if (f.path[0] !== \"dyn\")\n          throw new Error(`Found non-dyn path ${f.path} while computing range`)\n        current = reads[f.path[1]] ?? { min: 0, max: 0 }\n        break\n      case \"const\": current = computeMinMax([f.value]); break\n      case \"add\": case \"min\": case \"max\":\n        current = {\n          min: allOperations[operation](operands.map(x => x.min)),\n          max: allOperations[operation](operands.map(x => x.max)),\n        }; break\n      case \"res\": current = {\n        min: allOperations[operation]([operands[0].max]),\n        max: allOperations[operation]([operands[0].min]),\n      }; break\n      case \"mul\": current = operands.reduce((accu, current) => computeMinMax([\n        accu.min * current.min, accu.min * current.max,\n        accu.max * current.min, accu.max * current.max,\n      ])); break\n      case \"threshold\":\n        if (operands[0].min >= operands[1].max) current = operands[2]\n        else if (operands[0].max < operands[1].min) current = operands[3]\n        else current = computeMinMax([], [operands[2], operands[3]])\n        break\n      case \"sum_frac\": {\n        const [x, c] = operands, sum = { min: x.min + c.min, max: x.max + c.max }\n        if (sum.min <= 0 && sum.max >= 0)\n          current = (x.min <= 0 && x.max >= 0) ? { min: NaN, max: NaN } : { min: -Infinity, max: Infinity }\n        else\n          // TODO: Check this\n          current = computeMinMax([\n            x.min / sum.min, x.min / sum.max,\n            x.max / sum.min, x.max / sum.max\n          ])\n        break\n      }\n      default: assertUnreachable(operation)\n    }\n    range.set(f, current)\n  })\n  return range\n}\nfunction computeMinMax(values: readonly number[], minMaxes: readonly MinMax[] = []): MinMax {\n  const max = Math.max(...values, ...minMaxes.map(x => x.max))\n  const min = Math.min(...values, ...minMaxes.map(x => x.min))\n  return { min, max }\n}\n\nexport function filterArts(arts: ArtifactsBySlot, filters: RequestFilter): ArtifactsBySlot {\n  return {\n    base: arts.base,\n    values: objectKeyMap(allSlotKeys, slot => {\n      const filter = filters[slot]\n      switch (filter.kind) {\n        case \"id\": return arts.values[slot].filter(art => filter.ids.has(art.id))\n        case \"exclude\": return arts.values[slot].filter(art => !filter.sets.has(art.set!))\n        case \"required\": return arts.values[slot].filter(art => filter.sets.has(art.set!))\n      }\n    })\n  }\n}\n\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\n  return builds.flatMap(x => x).sort((a, b) => b.value - a.value).slice(0, maxNum)\n}\nexport function mergePlot(plots: PlotData[]): PlotData {\n  let scale = 0.01, reductionScaling = 2, maxCount = 1500\n  let keys = new Set(plots.flatMap(x => Object.values(x).map(v => Math.round(v.plot! / scale))))\n  while (keys.size > maxCount) {\n    scale *= reductionScaling\n    keys = new Set([...keys].map(key => Math.round(key / reductionScaling)))\n  }\n  const result: PlotData = {}\n  for (const plot of plots)\n    for (const build of Object.values(plot)) {\n      const x = Math.round(build.plot! / scale) * scale\n      if (!result[x] || result[x]!.value < build.value)\n        result[x] = build\n    }\n  return result\n}\n\nexport function countBuilds(arts: ArtifactsBySlot): number {\n  return allSlotKeys.reduce((_count, slot) => _count * arts.values[slot].length, 1)\n}\n\n\nexport function* filterFeasiblePerm(filters: Iterable<RequestFilter>, _artSets: ArtifactsBySlot): Iterable<RequestFilter> {\n  const artSets = objectMap(_artSets.values, values => new Set(values.map(v => v.set)))\n  filter_loop: for (const filter of filters) {\n    for (const [slot, f] of Object.entries(filter)) {\n      const available = artSets[slot]!\n      switch (f.kind) {\n        case \"required\": if ([...f.sets].every(s => !available.has(s))) continue filter_loop; break\n        case \"exclude\": if ([...available].every(s => f.sets.has(s!))) continue filter_loop; break\n        case \"id\": break\n      }\n    }\n    yield filter\n  }\n}\nexport function exclusionToAllowed(exclusion: number[] | undefined): Set<number> {\n  return new Set(exclusion?.includes(2)\n    ? exclusion.includes(4) ? [0, 1] : [0, 1, 4, 5]\n    : exclusion?.includes(4) ? [0, 1, 2, 3] : [0, 1, 2, 3, 4, 5])\n}\n/** A *disjoint* set of `RequestFilter` satisfying the exclusion rules */\nexport function* artSetPerm(exclusion: ArtSetExclusion, _artSets: ArtifactSetKey[]): Iterable<RequestFilter> {\n  /**\n   * This generation algorithm is separated into two parts:\n   * - \"Shape\" generation\n   *   - It first generates all build \"shapes\", e.g., AABBC, ABBCD\n   *   - It then filters the generated shapes according to the rainbow exclusion, e.g., removes ABBCD if excluding 3 rainbows\n   *   - It then merges the remaining shapes into wildcards, e.g. AABAA + AABAB + AABAC => AABA*\n   * - Shape filling\n   *   - From the given shapes, it tries to fill in all non-rainbow slots, e.g., slots A and B of AABBC, with actual artifacts\n   *   - It then fills the rainbow slots, e.g., slot C of AABBC while ensuring the exclusion rule of each sets\n   */\n  const artSets = [...new Set(_artSets)], allowedRainbows = exclusionToAllowed(exclusion.rainbow)\n  let shapes: number[][] = []\n  function populateShapes(current: number[], list: Set<number>, rainbows: number[]) {\n    if (current.length === 5) {\n      if (allowedRainbows.has(rainbows.length))\n        shapes.push(current)\n      return\n    }\n    for (const i of list) populateShapes([...current, i], list, rainbows.filter(j => j !== i))\n    populateShapes([...current, current.length], new Set([...list, current.length]), [...rainbows, current.length])\n  }\n  populateShapes([0], new Set([0]), [0])\n  function indexOfShape(shape: number[], replacing: number) {\n    if (range(replacing + 1, 4).some(i => shape[i] !== 5))\n      return undefined\n    shape = [...shape]\n    shape[replacing] = 5\n    return shape.reduce((a, b) => a * 6 + b, 0)\n  }\n  for (let replacing = 4; replacing >= 0; replacing--) {\n    const required: Map<number, number> = new Map()\n    for (const shape of shapes) {\n      const id = indexOfShape(shape, replacing)\n      if (id === undefined) continue\n      required.set(id, (required.get(id) ?? new Set(shape.slice(0, replacing)).size + 1) - 1)\n    }\n    for (const [id, remaining] of required.entries()) {\n      if (remaining === 0) {\n        const shape = [...shapes.find(shape => indexOfShape(shape, replacing) === id)!]\n        shape[replacing] = 5\n        shapes = shapes.filter(shape => indexOfShape(shape, replacing) !== id)\n        shapes.push(shape)\n      }\n    }\n  }\n\n  // Shapes are now calculated and merged, proceed to fill in the sets\n\n  const noFilter = { kind: \"exclude\" as const, sets: new Set<ArtifactSetKey>() }\n  const result: RequestFilter = objectKeyMap(allSlotKeys, _ => noFilter)\n\n  const counts = { ...objectMap(exclusion, _ => 0), ...objectKeyMap(artSets, _ => 0) }\n  const allowedCounts = objectMap(exclusion, exclusionToAllowed)\n\n  function* check(shape: number[]) {\n    const used: Set<ArtifactSetKey> = new Set()\n    let groupped: number[][] = [], rainbows: number[] = []\n    for (const i of shape) {\n      groupped.push([])\n      if (i === 5) rainbows.push(groupped.length - 1)\n      else groupped[i].push(groupped.length - 1)\n    }\n    groupped = groupped.filter(v => v.length).sort((a, b) => b.length - a.length)\n    let usableRainbows = rainbows.length\n\n    // Inception.. because js doesn't like functions inside a for-loop\n    function* check(i: number) {\n      if (i === groupped.length)\n        return yield* check_free(0)\n\n      for (const set of artSets) {\n        if (used.has(set)) continue\n        const length = groupped[i].length, allowedSet = allowedCounts[set]\n        let requiredRainbows = 0\n\n        if (allowedSet && !allowedSet.has(length)) {\n          // Look ahead and see if we have enough rainbows to fill to the next `allowedSet` if we use the current set\n          requiredRainbows = (range(length + 1, 5).find(l => allowedSet.has(l)) ?? 6) - length\n          if (requiredRainbows > usableRainbows) continue // Not enough rainbows. Next..\n        }\n\n        used.add(set)\n        counts[set] = groupped[i].length\n        groupped[i].forEach(j => result[allSlotKeys[j]] = { kind: \"required\", sets: new Set([set]) })\n        usableRainbows -= requiredRainbows\n\n        yield* check(i + 1)\n\n        usableRainbows += requiredRainbows\n        counts[set] = 0\n        used.delete(set)\n      }\n    }\n    // We separate filling rainbow slots from groupped slots because it has an entirely\n    // different set of rules regarding what can be filled and what states to be kept.\n    function* check_free(i: number) {\n      const remaining = rainbows.length - i, isolated: ArtifactSetKey[] = [], missing: ArtifactSetKey[] = [], rejected: ArtifactSetKey[] = []\n      let required = 0\n      for (const set of artSets) {\n        const allowedSet = allowedCounts[set], count = counts[set]\n        if (!allowedSet) continue\n        if (range(1, remaining).every(j => !allowedSet.has(count + j))) rejected.push(set)\n        else if (!allowedSet.has(count)) {\n          required += [...allowedSet].find(x => x > count)! - count\n          missing.push(set)\n        }\n        else if (range(0, remaining).some(j => !allowedSet.has(count + j))) isolated.push(set)\n      }\n      if (required > remaining) return\n      if (i === rainbows.length) {\n        yield { ...result }\n        return\n      }\n      if (required === remaining) {\n        for (const set of missing) {\n          counts[set]++\n          result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\n          yield* check_free(i + 1)\n          counts[set]--\n        }\n        return\n      }\n      for (const set of [...isolated, ...missing]) {\n        counts[set]++\n        result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\n        yield* check_free(i + 1)\n        counts[set]--\n      }\n      result[allSlotKeys[rainbows[i]]] = { kind: \"exclude\", sets: new Set([...missing, ...rejected, ...isolated]) }\n      yield* check_free(i + 1)\n    }\n    yield* check(0)\n  }\n  for (const shape of shapes) yield* check(shape)\n}\n\nexport type RequestFilter = StrictDict<SlotKey,\n  { kind: \"required\", sets: Set<ArtifactSetKey> } |\n  { kind: \"exclude\", sets: Set<ArtifactSetKey> } |\n  { kind: \"id\", ids: Set<string> }\n>\n\nexport type DynStat = { [key in string]: number }\nexport type ArtifactBuildData = {\n  id: string\n  set?: ArtifactSetKey\n  values: DynStat\n}\nexport type ArtifactsBySlot = { base: DynStat, values: StrictDict<SlotKey, ArtifactBuildData[]> }\n\nexport type PlotData = Dict<number, Build>\nexport interface Build {\n  value: number\n  plot?: number\n  artifactIds: string[]\n}\n\nexport type DynMinMax = { [key in string]: MinMax }\nexport type MinMax = { min: number, max: number }\n","import { customMapFormula, forEachNodes } from \"../../../../Formula/internal\";\nimport { allOperations, OptNode } from \"../../../../Formula/optimization\";\nimport { ConstantNode } from \"../../../../Formula/type\";\nimport { prod, threshold } from \"../../../../Formula/utils\";\nimport { SlotKey } from \"../../../../Types/consts\";\nimport { assertUnreachable, objectKeyValueMap, objectMap } from \"../../../../Util/Util\";\nimport type { InterimResult, Setup, SplitWorker } from \"./BackgroundWorker\";\nimport { ArtifactBuildData, ArtifactsBySlot, computeFullArtRange, computeNodeRange, countBuilds, DynStat, filterArts, MinMax, pruneAll, RequestFilter } from \"./common\";\n\ntype Approximation = {\n  base: number,\n  /** optimization target contribution from a given artifact (id) */\n  conts: StrictDict<string, number>\n}\ntype Filter = {\n  nodes: OptNode[], arts: ArtifactsBySlot\n  /**\n   * The contribution of each artifact to the optimization target. The (over)estimated\n   * optimization target value is the sum of contributions of all artifacts in the build.\n   */\n  approxs: Approximation[], maxConts: Record<SlotKey, number>[]\n  /** How many times has this filter been splitted */\n  age: number\n  /** Total number of builds in this filter */\n  count: number\n  /** Whether or not this filter is in a valid (calculated) state */\n  calculated?: boolean\n}\nexport class BNBSplitWorker implements SplitWorker {\n  min: number[]\n  nodes: OptNode[]\n  arts: ArtifactsBySlot\n  maxBuilds: number\n\n  /**\n   * Filters are not neccessarily in a valid state, i.e., \"calculated\".\n   * We amortize the calculation to 1-per-split so that the calculation\n   * overhead doesn't lead to lag.\n   */\n  filters: Filter[] = []\n  interim: InterimResult | undefined\n  firstUncalculated = 0\n\n  callback: (interim: InterimResult) => void\n\n  constructor({ arts, optimizationTarget, filters, maxBuilds }: Setup, callback: (interim: InterimResult) => void) {\n    this.arts = arts\n    this.min = [-Infinity, ...filters.map(x => x.min)]\n    this.nodes = [optimizationTarget, ...filters.map(x => x.value)]\n    this.callback = callback\n    this.maxBuilds = maxBuilds\n\n    // make sure we can approximate it\n    linearUpperBound(this.nodes, arts)\n  }\n\n  addFilter(filter: RequestFilter): void {\n    const arts = filterArts(this.arts, filter), count = countBuilds(arts)\n    if (count)\n      this.filters.push({ nodes: this.nodes, arts, maxConts: [], approxs: [], age: 0, count })\n  }\n  split(newThreshold: number, minCount: number): RequestFilter | undefined {\n    if (newThreshold > this.min[0]) {\n      this.min[0] = newThreshold\n      // All calculations become stale\n      this.firstUncalculated = 0\n      this.filters.forEach(filter => delete filter.calculated)\n    }\n    if (this.firstUncalculated < this.filters.length)\n      this.calculateFilter(this.firstUncalculated++) // Amortize the filter calculation to 1-per-split\n\n    while (this.filters.length) {\n      const filter = this.getApproxFilter(), { arts, count } = filter\n      this.reportInterim(false)\n      if (!count) continue\n\n      if (count <= minCount) {\n        this.reportInterim(true)\n        return objectMap(arts.values, arts => ({ kind: \"id\" as const, ids: new Set(arts.map(art => art.id)) }))\n      }\n      this.splitOldFilter(filter)\n    }\n    this.reportInterim(true)\n    return undefined\n  }\n\n  reportInterim(forced = false) {\n    if (this.interim && (this.interim.skipped > 1000000 || forced === true)) {\n      this.callback(this.interim)\n      this.interim = undefined\n    }\n  }\n\n  splitOldFilter({ nodes, arts, approxs, age }: Filter) {\n    /**\n     * Split the artifacts in each slot into high/low main (index 0) contribution along 1/3 of the\n     * contribution range. If the main contribution of a slot is in range 500-2000, the the high-\n     * contibution artifact has contribution of at least 1500, and the rest are low-contribution.\n     */\n    const splitted = objectMap(arts.values, arts => {\n      const remaining = arts.map((art) => ({ art, cont: approxs[0].conts[art.id] }))\n        .sort(({ cont: c1 }, { cont: c2 }) => c2 - c1)\n      const minCont = remaining[remaining.length - 1]?.cont ?? 0\n      let contCutoff = remaining.reduce((accu, { cont }) => accu + cont, -minCont * remaining.length) / 3\n\n      const index = Math.max(1, remaining.findIndex(({ cont }) => (contCutoff -= cont - minCont) <= 0))\n      const lowArts = remaining.splice(index).map(({ art }) => art), highArts = remaining.map(({ art }) => art)\n      return {\n        high: { arts: highArts, maxConts: approxs.map(approx => maxContribution(highArts, approx)), },\n        low: { arts: lowArts, maxConts: approxs.map(approx => maxContribution(lowArts, approx)) },\n      }\n    })\n    const remaining = Object.keys(splitted), { filters } = this\n    const current: StrictDict<SlotKey, ArtifactBuildData[]> = {} as any\n    const currentCont: StrictDict<SlotKey, number[]> = {} as any\n    function partialSplit(count: number) {\n      if (!remaining.length) {\n        const maxConts = approxs.map((_, i) => objectMap(currentCont, val => val[i]))\n        const currentArts = { base: arts.base, values: { ...current } }\n        filters.push({ nodes, arts: currentArts, maxConts, approxs, age: age + 1, count })\n        return\n      }\n      const slot = remaining.pop()!, { high, low } = splitted[slot]\n      if (low.arts.length) {\n        current[slot] = low.arts\n        currentCont[slot] = low.maxConts\n        partialSplit(count * low.arts.length)\n      }\n      if (high.arts.length) {\n        current[slot] = high.arts\n        currentCont[slot] = high.maxConts\n        partialSplit(count * high.arts.length)\n      }\n      remaining.push(slot)\n    }\n    partialSplit(1)\n  }\n\n  /** *Precondition*: `this.filters` must not be empty */\n  getApproxFilter(): Filter {\n    this.calculateFilter(this.filters.length - 1)\n    if (this.firstUncalculated > this.filters.length)\n      this.firstUncalculated = this.filters.length\n    return this.filters.pop()!\n  }\n  /** Update calculate on filter at index `i` if not done so already */\n  calculateFilter(i: number): void {\n    let { nodes, arts, maxConts, approxs, age, count: oldCount, calculated } = this.filters[i]\n    if (calculated) return\n    if (age < 3 || age % 5 === 2) { // Make sure the condition includes initial filter `age === 0`\n      // Either the filter is so early that we can get a good cutoff, or the problem has\n      // gotten small enough that the old approximation becomes inaccurate\n      ({ nodes, arts } = pruneAll(nodes, this.min, arts, this.maxBuilds, {}, { pruneNodeRange: true }))\n      if (Object.values(arts.values).every(x => x.length)) {\n        approxs = approximation(nodes, arts)\n        maxConts = approxs.map(approx => objectMap(arts.values, val => maxContribution(val, approx)))\n      }\n    }\n    // Removing artifacts that doesn't meet the required opt target contributions.\n    //\n    // We could actually loop `newValues` computation if the removed artifacts have\n    // the highest contribution in one of the target node as the removal will raise\n    // the required contribution even further. However, once is generally enough.\n    const leadingConts = maxConts.map((cont, i) => Object.values(cont)\n      .reduce((accu, val) => accu + val, approxs[i].base - this.min[i]))\n    const newValues = objectMap(arts.values, (arts, slot) => {\n      const requiredConts = leadingConts.map((lc, i) => maxConts[i][slot] - lc)\n      return arts.filter(({ id }) => approxs.every(({ conts }, i) => conts[id] > requiredConts[i]))\n    })\n    arts = { base: arts.base, values: newValues }\n    const newCount = countBuilds(arts)\n    if (newCount !== oldCount)\n      if (this.interim) this.interim.skipped += oldCount - newCount\n      else this.interim = { command: \"interim\", buildValues: undefined, tested: 0, failed: 0, skipped: oldCount - newCount }\n    this.filters[i] = { nodes, arts, maxConts, approxs, age, count: newCount, calculated: true }\n  }\n}\n\nfunction maxContribution(arts: ArtifactBuildData[], approximation: Approximation): number {\n  return Math.max(...arts.map(({ id }) => approximation.conts[id]!))\n}\nfunction approximation(nodes: OptNode[], arts: ArtifactsBySlot): Approximation[] {\n  return linearUpperBound(nodes, arts).map(weight => ({\n    base: dot(arts.base, weight, weight.$c),\n    conts: objectKeyValueMap(Object.values(arts.values).flat(),\n      data => [data.id, dot(data.values, weight, 0)])\n  }))\n}\nfunction dot(values: DynStat, lin: DynStat, c: number): number {\n  return Object.entries(values).reduce((accu, [k, v]) => accu + (lin[k] ?? 0) * v, c)\n}\n\nfunction weightedSum(...entries: readonly (readonly [number, Linear])[]): Linear\nfunction weightedSum(...entries: readonly (readonly [number, DynStat])[]): DynStat\nfunction weightedSum(...entries: readonly (readonly [number, DynStat])[]): DynStat {\n  const result = {}\n  for (const [weight, entry] of entries)\n    for (const [k, v] of Object.entries(entry))\n      result[k] = (result[k] ?? 0) + weight * v\n  return result\n}\nexport type Linear = DynStat & { $c: number }\n/** Compute a linear upper bound of `nodes` */\nexport function linearUpperBound(nodes: OptNode[], arts: ArtifactsBySlot): Linear[] {\n  const cents = weightedSum([1, arts.base], ...Object.values(arts.values).map(arts =>\n    [1 / arts.length, weightedSum(...arts.map(art => [1, art.values] as const))] as const))\n  const getCent = (lin: Linear) => dot(cents, lin, lin.$c)\n\n  const minMaxes = new Map<OptNode, MinMax>()\n  forEachNodes(nodes, f => {\n    const { operation } = f\n    if (operation === \"mul\") minMaxes.set(f, { min: NaN, max: NaN })\n    switch (operation) {\n      case \"mul\": case \"min\": case \"max\": case \"threshold\": case \"res\": case \"sum_frac\":\n        f.operands.forEach(op => minMaxes.set(op, { min: NaN, max: NaN })); break\n    }\n  }, _ => _)\n  const nodeRanges = computeNodeRange([...minMaxes.keys()], computeFullArtRange(arts))\n  for (const [node, minMax] of nodeRanges.entries()) minMaxes.set(node, minMax)\n\n  function slopePoint(slope: number, x0: number, y0: number, lin: Linear): Linear {\n    return weightedSum([1, { $c: y0 - slope * x0 }], [slope, lin])\n  }\n  function interpolate(x0: number, y0: number, x1: number, y1: number, lin: Linear, upper: boolean): Linear {\n    if (Math.abs(x0 - x1) < 1e-10)\n      return { $c: upper ? Math.max(y0, y1) : Math.min(y0, y1) }\n    return slopePoint((y1 - y0) / (x1 - x0), x0, y0, lin)\n  }\n\n  const upper = \"u\", lower = \"l\", outward = \"o\"\n  type Context = typeof upper | typeof lower | typeof outward\n  return customMapFormula<Context, Linear, OptNode>(nodes, upper, (f, context, _map) => {\n    const { operation } = f\n    const map: (op: OptNode, c?: Context) => Linear = (op, c = context) => _map(op, c)\n    const oppositeContext = context === upper ? lower : upper\n\n    if (context === outward) {\n      const { min, max } = minMaxes.get(f)!\n      if (min < 0 && max > 0)\n        // TODO: We can bypass this restriction by converting `f`\n        // to `min(f, 0)` or `max(f, 0)` as appropriate\n        throw new PolyError(\"Zero-crossing\", operation)\n      return map(f, max <= 0 ? lower : upper)\n    }\n\n    switch (operation) {\n      case \"const\": return { $c: f.value }\n      case \"read\": return { $c: 0, [f.path[1]]: 1 }\n      case \"add\": return weightedSum(...f.operands.map(op => [1, map(op)] as const))\n      case \"min\": case \"max\": {\n        const op = allOperations[operation]\n        const xs = f.operands.filter(op => op.operation !== \"const\"), [xOp] = xs\n        if (xs.length !== 1) throw new PolyError(\"Multivariate\", operation)\n\n        const x = map(xOp), c = op(f.operands.filter(op => op.operation === \"const\")\n          .map(c => (c as ConstantNode<number>).value))\n        if ((operation === \"max\" && context === lower) || (operation === \"min\" && context === upper))\n          return x\n        const { min, max } = minMaxes.get(xOp)!, yMin = op([min, c]), yMax = op([max, c])\n        return interpolate(min, yMin, max, yMax, x, context === upper)\n      }\n      case \"res\": {\n        if (context !== upper) throw new PolyError(\"Unsupported direction\", operation)\n        const op = allOperations[operation]\n        const [xOp] = f.operands, { min, max } = minMaxes.get(xOp)!\n        const x = map(xOp, oppositeContext)\n        // Linear region 1 - base/2 or concave region with peak at base = 0\n        if (min < 0 && max < 1.75) return weightedSum([1, { $c: 1 }], [-0.5, x])\n        // Clamp `min` to guarantee upper bound\n        else return interpolate(min, op([min]), max, op([max]), x, context === upper)\n      }\n      case \"sum_frac\": {\n        if (context !== upper) throw new PolyError(\"Unsupported direction\", operation)\n        const [xOp, cOp] = f.operands\n        if (cOp.operation !== \"const\") throw new PolyError(\"Non-constant node\", operation)\n        const x = map(xOp), c = cOp.value, { min, max } = minMaxes.get(xOp)!\n        const loc = Math.sqrt((min + c) * (max + c))\n        if (min <= -c) throw new PolyError(\"Unsupported pattern\", operation)\n        return slopePoint(c / (c + loc) / (c + loc), loc, loc / (loc + c), x)\n      }\n      case \"threshold\": {\n        const [vOp, tOp, pOp, fOp] = f.operands\n        if (fOp.operation !== \"const\" || tOp.operation !== \"const\")\n          throw new PolyError(\"Non-constant node\", operation)\n        if (pOp.operation !== \"const\") {\n          if (fOp.value !== 0) throw new PolyError(\"Unsupported pattern\", operation)\n\n          const threshOp = threshold(vOp, tOp, 1, fOp), mulOp = prod(threshOp, pOp)\n          // Populate `minMaxes` to ensure consistency\n          const { min, max } = minMaxes.get(pOp)!\n          minMaxes.set(threshOp, { min: 0, max: 1 })\n          minMaxes.set(mulOp, { min: Math.min(min, 0), max: Math.max(max, 0) })\n          return map(mulOp)\n        }\n        const { min, max } = minMaxes.get(vOp)!\n        const thresh = tOp.value, pass = pOp.value, fail = fOp.value\n        const isFirstHalf = (pass > fail) === (context === upper)\n\n        const v = map(vOp, pass > fail ? context : oppositeContext)\n        const yThresh = isFirstHalf ? pass : fail\n        const slope = (pass - fail) / (isFirstHalf ? (thresh - min) : (max - thresh))\n        return slopePoint(slope, thresh, yThresh, v)\n      }\n      case \"mul\": {\n        const { min, max } = minMaxes.get(f)!\n        if (min < 0 && max > 0) throw new PolyError(\"Zero-crossing\", operation)\n        if ((min < 0 && context !== lower) || (max > 0 && context !== upper))\n          throw new PolyError(\"Unsupported direction\", operation)\n\n        // For x/a >= 0, sum{x/a} <= n, and k > 0, it follows that\n        //\n        //   k prod{x} <= k/n prod{a} sum{x/a}\n        //\n        // This follows from AM-GM; prod{x/a} <= (sum{x/a}/n)^n <= sum{x/a}/n\n        const operands = [...f.operands], flattenedOperands: OptNode[] = []\n        let coeff = 1\n        while (operands.length) {\n          const operand = operands.pop()!\n          if (operand.operation === \"mul\") operands.push(...operand.operands)\n          else if (operand.operation === \"const\") coeff *= operand.value;\n          else flattenedOperands.push(operand)\n        }\n        const lins = flattenedOperands.map(op => map(op, outward))\n        const ranges = flattenedOperands.map(op => minMaxes.get(op)!)\n\n        // Set `a` to the centroid of `x`, normalizing so that `sum{x/a} = n`\n        const cents = lins.map(getCent)\n        const factor = cents.reduce((accu, cent, i) => accu + (cent >= 0 ? ranges[i].max : ranges[i].min) / cent, 0)\n        const prod = cents.reduce((a, b) => a * factor * b / lins.length, coeff / factor)\n        return weightedSum(...lins.map((op, i) => [prod / cents[i], op] as const))\n      }\n\n      default: assertUnreachable(operation)\n    }\n  })\n}\nclass PolyError extends Error {\n  constructor(cause: string, operation: string) {\n    super(`Found ${cause} in ${operation} node when generating polynomial upper bound`)\n  }\n}\n","import { ArtSetExclusion } from '../../../../Database/DataManagers/BuildSettingData'\nimport { OptNode } from '../../../../Formula/optimization'\nimport { assertUnreachable } from '../../../../Util/Util'\nimport { BNBSplitWorker } from \"./BNBSplitWorker\"\nimport { ArtifactsBySlot, artSetPerm, Build, countBuilds, filterArts, filterFeasiblePerm, PlotData, RequestFilter } from \"./common\"\nimport { ComputeWorker } from \"./ComputeWorker\"\nimport { DefaultSplitWorker } from './DefaultSplitWorker'\n\nlet id: number, splitWorker: SplitWorker, computeWorker: ComputeWorker\n\nonmessage = ({ data }: { data: WorkerCommand }) => {\n  const { command } = data\n  let result: WorkerResult\n  switch (command) {\n    case \"setup\":\n      id = data.id\n      const splitID = `split${id}`, computeID = `compute${id}`\n      try {\n        splitWorker = new BNBSplitWorker(data, interim => postMessage({ id, source: splitID, ...interim }))\n      } catch {\n        splitWorker = new DefaultSplitWorker(data, interim => postMessage({ id, source: splitID, ...interim }))\n      }\n      computeWorker = new ComputeWorker(data, interim => postMessage({ id, source: computeID, ...interim }))\n      result = { command: \"iterate\" }\n      break\n    case \"split\": {\n      if (data.filter) splitWorker.addFilter(data.filter)\n      const filter = splitWorker.split(data.threshold, data.minCount)\n      result = { command: \"split\", filter }\n      break\n    }\n    case \"iterate\": {\n      const { threshold, filter } = data\n      computeWorker.compute(threshold, filter)\n      result = { command: \"iterate\" }\n      break\n    }\n    case \"finalize\": {\n      computeWorker.refresh(true)\n      const { builds, plotData } = computeWorker\n      result = { command: \"finalize\", builds, plotData }\n      break\n    }\n    case \"count\": {\n      const { exclusion } = data, arts = computeWorker.arts\n      const setPerm = filterFeasiblePerm(artSetPerm(exclusion, [...new Set(Object.values(arts.values).flatMap(x => x.map(x => x.set!)))]), arts)\n      let counts = data.arts.map(_ => 0)\n      for (const perm of setPerm)\n        data.arts.forEach((arts, i) => counts[i] += countBuilds(filterArts(arts, perm)));\n      result = { command: \"count\", counts }\n      break\n    }\n    default: assertUnreachable(command)\n  }\n  postMessage({ id, ...result })\n}\n\nexport interface SplitWorker {\n  addFilter(filter: RequestFilter): void\n  split(newThreshold: number, minCount: number): RequestFilter | undefined\n}\n\nexport type WorkerCommand = Setup | Split | Iterate | Finalize | Count\nexport type WorkerResult = SourcedInterimResult | SplitResult | IterateResult | FinalizeResult | CountResult\n\nexport interface Setup {\n  command: \"setup\"\n\n  id: number\n  arts: ArtifactsBySlot\n\n  optimizationTarget: OptNode\n  filters: { value: OptNode, min: number }[]\n  plotBase: OptNode | undefined,\n  maxBuilds: number\n}\nexport interface Split {\n  command: \"split\"\n  threshold: number\n  minCount: number\n  filter?: RequestFilter\n}\nexport interface Iterate {\n  command: \"iterate\"\n  threshold: number\n  filter: RequestFilter\n}\n\nexport interface Finalize {\n  command: \"finalize\"\n}\nexport interface Count {\n  command: \"count\"\n  arts: ArtifactsBySlot[]\n  exclusion: ArtSetExclusion\n}\nexport interface SplitResult {\n  command: \"split\"\n  filter: RequestFilter | undefined\n}\nexport interface IterateResult {\n  command: \"iterate\"\n}\nexport interface FinalizeResult {\n  command: \"finalize\"\n  builds: Build[]\n  plotData?: PlotData\n}\nexport interface CountResult {\n  command: \"count\"\n  counts: number[]\n}\nexport interface InterimResult {\n  command: \"interim\"\n  buildValues: number[] | undefined\n  /** The number of builds since last report, including failed builds */\n  tested: number\n  /** The number of builds that does not meet the min-filter requirement since last report */\n  failed: number\n  skipped: number\n}\nexport interface SourcedInterimResult extends InterimResult {\n  /** the source of the message, must be unique for each source of `buildValues` */\n  source: string\n}\n","import { optimize, OptNode, precompute } from '../../../../Formula/optimization';\nimport type { InterimResult, Setup } from './BackgroundWorker';\nimport { ArtifactBuildData, ArtifactsBySlot, Build, countBuilds, filterArts, mergePlot, PlotData, pruneAll, RequestFilter } from './common';\n\nexport class ComputeWorker {\n  builds: Build[] = []\n  buildValues: number[] | undefined = undefined\n  plotData: PlotData | undefined\n  threshold: number = -Infinity\n  maxBuilds: number\n  min: number[]\n\n  arts: ArtifactsBySlot\n  nodes: OptNode[]\n\n  callback: (interim: InterimResult) => void\n\n  constructor({ arts, optimizationTarget, filters, plotBase, maxBuilds }: Setup, callback: (interim: InterimResult) => void) {\n    this.arts = arts\n    this.min = filters.map(x => x.min)\n    this.maxBuilds = maxBuilds\n    this.callback = callback\n    this.nodes = filters.map(x => x.value)\n    this.nodes.push(optimizationTarget)\n    if (plotBase) {\n      this.plotData = {}\n      this.nodes.push(plotBase)\n    }\n    this.nodes = optimize(this.nodes, {}, _ => false)\n  }\n\n  compute(newThreshold: number, filter: RequestFilter) {\n    if (this.threshold > newThreshold) this.threshold = newThreshold\n    const { min, interimReport } = this, self = this // `this` in nested functions means different things\n    let preArts = filterArts(this.arts, filter)\n    const totalCount = countBuilds(preArts), oldMaxBuildCount = this.builds.length\n\n    let nodes = this.nodes;\n    ({ nodes, arts: preArts } = pruneAll(nodes, min, preArts, this.maxBuilds, {}, {\n      pruneArtRange: true, pruneNodeRange: true,\n    }))\n    const arts = Object.values(preArts.values).sort((a, b) => a.length - b.length)\n    const compute = precompute(nodes, preArts.base, f => f.path[1], arts.length)\n\n    const buffer = Array<ArtifactBuildData>(arts.length)\n    const count = { tested: 0, failed: 0, skipped: totalCount - countBuilds(preArts) }\n\n    function permute(i: number) {\n      if (i < 0) {\n        const result = compute(buffer)\n        if (min.every((m, i) => (m <= result[i]))) {\n          const value = result[min.length], { builds, plotData } = self\n          let build: Build | undefined\n          if (value >= self.threshold) {\n            build = { value, artifactIds: buffer.map(x => x.id).filter(id => id) }\n            builds.push(build)\n          }\n          if (plotData) {\n            const x = result[min.length + 1]\n            if (!plotData[x] || plotData[x]!.value < value) {\n              if (!build) build = { value, artifactIds: buffer.map(x => x.id).filter(id => id) }\n              build.plot = x\n              plotData[x] = build\n            }\n          }\n        }\n        else count.failed += 1\n        return\n      }\n      arts[i].forEach(art => {\n        buffer[i] = art\n        permute(i - 1)\n      })\n      if (i === 0) {\n        count.tested += arts[0].length\n        if (count.tested > 1 << 16)\n          interimReport(count)\n      }\n    }\n\n    permute(arts.length - 1)\n    interimReport(count, this.builds.length > oldMaxBuildCount)\n  }\n\n  refresh(force: boolean): void {\n    const { maxBuilds } = this\n    if (Object.keys(this.plotData ?? {}).length >= 100000)\n      this.plotData = mergePlot([this.plotData!])\n\n    if (this.builds.length >= 1000 || force) {\n      this.builds = this.builds\n        .sort((a, b) => b.value - a.value)\n        .slice(0, maxBuilds)\n      this.buildValues = this.builds.map(x => x.value)\n      this.threshold = Math.max(this.threshold, this.buildValues[maxBuilds - 1] ?? -Infinity)\n    }\n  }\n  interimReport = (count: { tested: number, failed: number, skipped: number }, forced = false) => {\n    this.refresh(forced)\n    this.callback({ command: \"interim\", buildValues: this.buildValues, ...count })\n    this.buildValues = undefined\n    count.tested = 0\n    count.failed = 0\n    count.skipped = 0\n  }\n}\n","import { allSlotKeys } from '../../../../Types/consts';\nimport type { InterimResult, Setup, SplitWorker } from './BackgroundWorker';\nimport { ArtifactsBySlot, countBuilds, filterArts, RequestFilter } from './common';\n\nexport class DefaultSplitWorker implements SplitWorker {\n  arts: ArtifactsBySlot\n  filters: RequestFilter[] = []\n\n  constructor({ arts }: Setup, _callback: (interim: InterimResult) => void) {\n    this.arts = arts\n  }\n  addFilter(filter: RequestFilter) {\n    this.filters.push(filter)\n  }\n  split(_newThreshold: number, minCount: number) {\n    while (this.filters.length) {\n      const filter = this.filters.pop()!, count = countBuilds(filterArts(this.arts, filter))\n      if (count <= minCount) return filter\n      splitBySetOrID(this.arts, filter, minCount).forEach(filter => this.addFilter(filter))\n    }\n  }\n}\n\nfunction splitBySetOrID(_arts: ArtifactsBySlot, filter: RequestFilter, limit: number): RequestFilter[] {\n  const arts = filterArts(_arts, filter)\n\n  const candidates = allSlotKeys\n    .map(slot => ({ slot, sets: new Set(arts.values[slot].map(x => x.set)) }))\n    .filter(({ sets }) => sets.size > 1)\n  if (!candidates.length)\n    return splitByID(arts, filter, limit)\n  const { sets, slot } = candidates.reduce((a, b) => a.sets.size < b.sets.size ? a : b)\n  return [...sets].map(set => ({ ...filter, [slot]: { kind: \"required\", sets: new Set([set]) } }))\n}\nfunction splitByID(_arts: ArtifactsBySlot, filter: RequestFilter, limit: number): RequestFilter[] {\n  const arts = filterArts(_arts, filter)\n  const count = countBuilds(arts)\n\n  const candidates = allSlotKeys\n    .map(slot => ({ slot, length: arts.values[slot].length }))\n    .filter(x => x.length > 1)\n  const { slot, length } = candidates.reduce((a, b) => a.length < b.length ? a : b)\n\n  const numChunks = Math.ceil(count / limit)\n  const boundedNumChunks = Math.min(numChunks, length)\n  const chunk = Array(boundedNumChunks).fill(0).map(_ => new Set<string>())\n  arts.values[slot].forEach(({ id }, i) => chunk[i % boundedNumChunks].add(id))\n  return chunk.map(ids => ({ ...filter, [slot]: { kind: \"id\", ids } }))\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [676], function() { return __webpack_require__(18349); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"e3357613\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/genshin-optimizer/feelcrafting-com/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t349: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkgenshin_optimizer\"] = self[\"webpackChunkgenshin_optimizer\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(676).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["objPathValue","obj","keys","Array","isArray","console","error","reduce","a","k","objectKeyMap","map","Object","fromEntries","i","objectKeyValueMap","items","t","objectMap","fn","entries","v","rangeGen","from","to","range","assertUnreachable","value","Error","constant","NaN","name","percent","info","operation","operands","type","Number","MAX_VALUE","Infinity","unit","min","values","intoOps","max","customRead","path","intoV","forEachNodes","formulas","topDown","bottomUp","visiting","Set","visited","forEach","traverse","formula","has","add","delete","mapFormulas","topDownMap","bottomUpMap","topDownMapped","Map","bottomUpMapped","check","get","arrayEqual","set","result","customMapFormula","context","contextMapping","internalMap","current","mapping","old","newFormula","b","undefined","length","every","allCommutativeMonoidOperations","x","Math","mul","allOperations","res","sum_frac","threshold","pass","fail","commutativeMonoidOperationSet","flatten","f","_formula","flattened","flatMap","dep","deduplicate","elementCounts","array","wrap","common","counts","next","factored","count","fill","candidatesByOperation","remainingCounts","filter","push","currentCounts","commonCounts","nextCounts","total","dependency","currentCount","commonCount","candidates","candidate","candidateCounts","candidateCount","clear","constantFold","topLevelData","shouldFold","origin","data","processed","nextContextMap","fold","c","foldStr","numericOperands","formulaOperands","folded","numericValue","isFinite","index","selected","table","first","find","op","smallest","operand","v1","v2","match","unmatch","list","accu","reset","nextMap","nextContext","allSlotKeys","nonTravelerCharacterKeys","travelerKeys","filterFeasiblePerm","artSetPerm","pruneAll","nodes","minimum","arts","numTop","exclusion","forced","should","deps","pruneNodeRange","reaffine","pruneOrder","pruneArtRange","some","newArts","newNodes","forceRename","affineNodes","topLevelAffine","visit","node","isAffine","dynKeys","_","nonConst","base","size","nextDynKey","affine","affineMap","reaffineArt","stat","dyn","slot","id","offsets","key","baseValue","progress","allowRainbow","rainbow","noSwitchIn","noSwitchOut","includes","newList","art","other","otherBetterEqual","otherMaybeBetter","otherBetter","canSwitch","baseRange","artRanges","computeArtRange","otherArtRanges","addArtRange","read","newRange","computeNodeRange","nodeRange","operandRanges","newOperands","op1","op2","j","ranges","reads","computeMinMax","sum","minMaxes","filterArts","filters","kind","ids","sets","countBuilds","_count","_artSets","artSets","available","s","exclusionToAllowed","populateShapes","indexOfShape","shape","check_free","remaining","rainbows","isolated","missing","rejected","required","allowedSet","allowedCounts","groupped","used","requiredRainbows","l","usableRainbows","sort","replacing","allowedRainbows","shapes","slice","noFilter","BNBSplitWorker","callback","optimizationTarget","maxBuilds","interim","firstUncalculated","this","linearUpperBound","addFilter","maxConts","approxs","age","split","newThreshold","minCount","calculated","calculateFilter","getApproxFilter","reportInterim","splitOldFilter","skipped","splitted","cont","conts","c1","minCont","contCutoff","findIndex","lowArts","splice","highArts","high","approx","maxContribution","low","currentCont","partialSplit","pop","val","currentArts","oldCount","approximation","weight","dot","$c","flat","leadingConts","newValues","requiredConts","lc","newCount","command","buildValues","tested","failed","lin","weightedSum","entry","cents","getCent","nodeRanges","computeFullArtRange","minMax","slopePoint","slope","x0","y0","interpolate","x1","y1","upper","abs","lower","_map","oppositeContext","PolyError","xs","xOp","cOp","loc","sqrt","vOp","tOp","pOp","fOp","threshOp","ge","le","mulOp","prod","thresh","isFirstHalf","flattenedOperands","coeff","lins","factor","cent","splitWorker","computeWorker","cause","ComputeWorker","plotBase","builds","plotData","interimReport","refresh","optimize","opts","compute","self","preArts","totalCount","oldMaxBuildCount","precompute","initial","binding","slotCount","body","names","operandNames","arr","toString","join","Function","buffer","permute","m","build","artifactIds","plot","force","mergePlot","plots","scale","round","DefaultSplitWorker","_callback","_newThreshold","splitBySetOrID","_arts","limit","splitByID","numChunks","ceil","boundedNumChunks","chunk","onmessage","splitID","computeID","postMessage","source","setPerm","perm","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","__webpack_exports__","O","deferred","chunkIds","priority","notFulfilled","fulfilled","r","d","definition","o","defineProperty","enumerable","e","chunkId","Promise","all","promises","u","miniCssF","prop","prototype","hasOwnProperty","call","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","then"],"sourceRoot":""}