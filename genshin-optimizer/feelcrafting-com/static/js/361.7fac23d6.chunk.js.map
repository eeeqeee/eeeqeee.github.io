{"version":3,"file":"static/js/361.7fac23d6.chunk.js","mappings":"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","sources":["Components/Weapon/WeaponSelectionModal.tsx"],"sourcesContent":["import { Box, CardActionArea, CardContent, Divider, Grid, TextField, ToggleButton, Typography } from \"@mui/material\"\nimport { ChangeEvent, useContext, useDeferredValue, useEffect, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Assets from \"../../Assets/Assets\"\nimport WeaponSheet from \"../../Data/Weapons/WeaponSheet\"\nimport { DatabaseContext } from \"../../Database/Database\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { allRarities, allWeaponKeys, allWeaponTypeKeys, WeaponKey, WeaponTypeKey } from \"../../Types/consts\"\nimport { handleMultiSelect } from \"../../Util/MultiSelect\"\nimport CardDark from \"../Card/CardDark\"\nimport CardLight from \"../Card/CardLight\"\nimport CloseButton from \"../CloseButton\"\nimport ImgIcon from \"../Image/ImgIcon\"\nimport ModalWrapper from \"../ModalWrapper\"\nimport SolidToggleButtonGroup from \"../SolidToggleButtonGroup\"\nimport { StarsDisplay } from \"../StarDisplay\"\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\"\n\ntype WeaponSelectionModalProps = {\n  show: boolean,\n  ascension?: number,\n  onHide: () => void,\n  onSelect: (wKey: WeaponKey) => void,\n  filter?: (sheet: WeaponSheet) => boolean,\n  weaponTypeFilter?: WeaponTypeKey,\n}\n\nconst rarityHandler = handleMultiSelect([...allRarities])\nexport default function WeaponSelectionModal({ show, ascension = 0, onHide, onSelect, filter = () => true, weaponTypeFilter }: WeaponSelectionModalProps) {\n  const { t } = useTranslation([\"page_weapon\", \"weaponNames_gen\"])\n  const weaponSheets = usePromise(() => WeaponSheet.getAll, [])\n  const [weaponFilter, setWeaponfilter] = useState<WeaponTypeKey[]>(weaponTypeFilter ? [weaponTypeFilter] : [...allWeaponTypeKeys])\n\n  const { database } = useContext(DatabaseContext)\n  const [state, setState] = useState(database.displayWeapon.get())\n  useEffect(() => database.displayWeapon.follow((r, dbMeta) => setState(dbMeta)), [database])\n\n  useEffect(() => weaponTypeFilter && setWeaponfilter([weaponTypeFilter]), [weaponTypeFilter])\n\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const deferredSearchTerm = useDeferredValue(searchTerm)\n\n  const { rarity } = state\n  const weaponIdList = !weaponSheets ? [] : allWeaponKeys.filter(wKey => filter(weaponSheets(wKey)))\n    .filter(wKey => weaponFilter.includes(weaponSheets(wKey).weaponType))\n    .filter(wKey => !deferredSearchTerm || t(`weaponNames_gen:${wKey}`).toLowerCase().includes(deferredSearchTerm.toLowerCase()))\n    .filter(wKey => rarity.includes(weaponSheets(wKey).rarity))\n    .sort((a, b) => weaponSheets(b).rarity - weaponSheets(a).rarity)\n\n  if (!weaponSheets) return null\n\n  return <ModalWrapper open={show} onClose={onHide}>\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container spacing={1}>\n          <Grid item>\n            <WeaponToggle value={weaponFilter} onChange={setWeaponfilter} disabled={!!weaponTypeFilter} size=\"small\" />\n          </Grid >\n          <Grid item>\n            <SolidToggleButtonGroup sx={{ height: \"100%\" }} value={rarity} size=\"small\">\n              {allRarities.map(star => <ToggleButton key={star} value={star} onClick={() => database.displayWeapon.set({ rarity: rarityHandler(rarity, star) })}><Box display=\"flex\" gap={1}><strong>{star}</strong><StarsDisplay stars={1} /></Box></ToggleButton>)}\n            </SolidToggleButtonGroup>\n          </Grid>\n          <Grid item flexGrow={1}>\n            <TextField\n              autoFocus\n              size=\"small\"\n              value={searchTerm}\n              onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setSearchTerm(e.target.value)}\n              label={t(\"weaponName\")}\n              sx={{ height: \"100%\" }}\n              InputProps={{\n                sx: { height: \"100%\" }\n              }}\n            />\n          </Grid>\n          <Grid item>\n            <CloseButton onClick={onHide} />\n          </Grid >\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent><Grid container spacing={1}>\n        {weaponIdList.map(weaponKey => {\n          const weaponSheet = weaponSheets(weaponKey)\n          return <Grid item key={weaponKey} lg={3} md={4}>\n            <CardLight sx={{ height: \"100%\" }} >\n              <CardActionArea onClick={() => { onHide(); onSelect(weaponKey) }} sx={{ display: \"flex\" }}>\n                <Box component=\"img\" src={weaponSheet.getImg(ascension)} sx={{ width: 100, height: \"auto\" }} className={` grad-${weaponSheet.rarity}star`} />\n                <Box sx={{ flexGrow: 1, px: 1 }}>\n                  <Typography variant=\"subtitle1\">{weaponSheet.name}</Typography>\n                  <Typography><ImgIcon src={Assets.weaponTypes?.[weaponSheet.weaponType]} /> <StarsDisplay stars={weaponSheet.rarity} colored /></Typography>\n                </Box>\n              </CardActionArea>\n            </CardLight>\n          </Grid>\n        })}\n      </Grid></CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <CloseButton large onClick={onHide} />\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n"],"names":["rarityHandler","handleMultiSelect","allRarities","WeaponSelectionModal","show","ascension","onHide","onSelect","filter","weaponTypeFilter","t","useTranslation","weaponSheets","usePromise","WeaponSheet","useState","allWeaponTypeKeys","weaponFilter","setWeaponfilter","database","useContext","DatabaseContext","displayWeapon","get","state","setState","useEffect","follow","r","dbMeta","searchTerm","setSearchTerm","deferredSearchTerm","useDeferredValue","rarity","weaponIdList","allWeaponKeys","wKey","includes","weaponType","toLowerCase","sort","a","b","open","onClose","sx","py","container","spacing","item","value","onChange","disabled","size","height","star","onClick","set","display","gap","stars","flexGrow","autoFocus","e","target","label","InputProps","map","weaponKey","weaponSheet","lg","md","component","src","getImg","width","className","px","variant","name","Assets","colored","large"],"sourceRoot":""}