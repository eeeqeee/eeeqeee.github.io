{"version":3,"file":"234.7fa072139dd33bc4.js","mappings":"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","sources":["webpack:///./src/app/Components/ToggleButton/WeaponToggle.tsx","webpack:///./src/app/PageWeapon/index.tsx","webpack:///./src/app/ReactHooks/useWeapon.tsx","webpack:///./src/app/Util/totalUtils.ts"],"sourcesContent":["import { Chip, ToggleButton, useMediaQuery, useTheme } from \"@mui/material\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport { allWeaponTypeKeys, WeaponTypeKey } from \"@genshin-optimizer/consts\";\r\nimport { handleMultiSelect } from \"../../Util/MultiSelect\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport SolidToggleButtonGroup, { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\r\ntype WeaponToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\r\n  onChange: (value: WeaponTypeKey[]) => void\r\n  value: WeaponTypeKey[],\r\n  totals: Record<WeaponTypeKey, Displayable>\r\n}\r\n\r\nconst weaponTypeHandler = handleMultiSelect([...allWeaponTypeKeys])\r\nexport default function WeaponToggle({ value, totals, onChange, ...props }: WeaponToggleProps) {\r\n  const theme = useTheme();\r\n  const xs = !useMediaQuery(theme.breakpoints.up('sm'));\r\n  return <SolidToggleButtonGroup exclusive value={value} {...props}>\r\n    {allWeaponTypeKeys.map(wt => <ToggleButton key={wt} value={wt} sx={{ p: xs ? 1 : undefined, minWidth: xs ? 0 : \"7em\", display: \"flex\", gap: xs ? 0 : 1 }} onClick={() => onChange(weaponTypeHandler(value, wt))}>\r\n      <ImgIcon src={Assets.weaponTypes?.[wt]} size={2} sideMargin /><Chip label={totals[wt]} size=\"small\" />\r\n    </ToggleButton>)}\r\n  </SolidToggleButtonGroup>\r\n}\r\n","import { allRarities, allWeaponTypeKeys, WeaponKey } from '@genshin-optimizer/consts';\r\nimport { Add } from '@mui/icons-material';\r\nimport { Box, Button, CardContent, Grid, Pagination, Skeleton, TextField, Typography } from '@mui/material';\r\nimport React, { ChangeEvent, lazy, Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useRef, useState } from 'react';\r\nimport ReactGA from 'react-ga4';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport SortByButton from '../Components/SortByButton';\r\nimport RarityToggle from '../Components/ToggleButton/RarityToggle';\r\nimport WeaponToggle from '../Components/ToggleButton/WeaponToggle';\r\nimport { getWeaponSheet } from '../Data/Weapons';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport useMediaQueryUp from '../ReactHooks/useMediaQueryUp';\r\nimport { filterFunction, sortFunction } from '../Util/SortByFilters';\r\nimport { catTotal } from '../Util/totalUtils';\r\nimport { clamp } from '../Util/Util';\r\nimport { weaponFilterConfigs, weaponSortConfigs, weaponSortMap } from '../Util/WeaponSort';\r\nimport { initialWeapon } from '../Util/WeaponUtil';\r\nimport WeaponCard from './WeaponCard';\r\nconst WeaponSelectionModal = React.lazy(() => import('../Components/Weapon/WeaponSelectionModal'))\r\n// Lazy load the weapon display\r\nconst WeaponEditor = lazy(() => import('./WeaponEditor'))\r\n\r\nconst columns = { xs: 1, sm: 2, md: 3, lg: 3, xl: 4 }\r\nconst numToShowMap = { xs: 10, sm: 12, md: 24, lg: 24, xl: 24 }\r\n\r\nconst sortKeys = Object.keys(weaponSortMap)\r\nexport default function PageWeapon() {\r\n  const { t } = useTranslation([\"page_weapon\", \"ui\", \"weaponNames_gen\"])\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useState(database.displayWeapon.get())\r\n  useEffect(() => database.displayWeapon.follow((r, dbMeta) => setState(dbMeta)), [database])\r\n\r\n  const [newWeaponModalShow, setnewWeaponModalShow] = useState(false)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  const invScrollRef = useRef<HTMLDivElement>(null)\r\n  const [pageIndex, setPageIndex] = useState(0)\r\n  //set follow, should run only once\r\n  useEffect(() => {\r\n    ReactGA.send({ hitType: \"pageview\", page: '/weapon' })\r\n    return database.weapons.followAny((k, r) => (r === \"new\" || r === \"remove\") && forceUpdate())\r\n  }, [forceUpdate, database])\r\n\r\n  const brPt = useMediaQueryUp()\r\n  const maxNumToDisplay = numToShowMap[brPt]\r\n\r\n  const deleteWeapon = useCallback(async (key: string) => {\r\n    const weapon = database.weapons.get(key)\r\n    if (!weapon) return\r\n    const name = t(`weaponNames_gen:${weapon.key}`)\r\n\r\n    if (!window.confirm(t(\"removeWeapon\", { value: name }))) return\r\n    database.weapons.remove(key)\r\n    if (state.editWeaponId === key)\r\n      database.displayWeapon.set({ editWeaponId: \"\" })\r\n  }, [state.editWeaponId, database, t])\r\n\r\n  const editWeapon = useCallback((key: string | undefined) => {\r\n    database.displayWeapon.set({ editWeaponId: key })\r\n  }, [database])\r\n\r\n  const newWeapon = useCallback((weaponKey: WeaponKey) => {\r\n    editWeapon(database.weapons.new(initialWeapon(weaponKey)))\r\n  }, [database, editWeapon])\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const deferredSearchTerm = useDeferredValue(searchTerm)\r\n\r\n  const { sortType, ascending, weaponType, rarity } = state\r\n  const { weaponIdList, totalWeaponNum } = useMemo(() => {\r\n    const weapons = database.weapons.values\r\n    const totalWeaponNum = weapons.length\r\n    const weaponIdList = weapons\r\n      .filter(filterFunction({ weaponType, rarity, name: deferredSearchTerm }, weaponFilterConfigs()))\r\n      .sort(sortFunction(weaponSortMap[sortType] ?? [], ascending, weaponSortConfigs()))\r\n      .map(weapon => weapon.id)\r\n    return dbDirty && { weaponIdList, totalWeaponNum }\r\n  }, [dbDirty, database, sortType, ascending, rarity, weaponType, deferredSearchTerm])\r\n\r\n  const { weaponIdsToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(weaponIdList.length / maxNumToDisplay)\r\n    const currentPageIndex = clamp(pageIndex, 0, numPages - 1)\r\n    return { weaponIdsToShow: weaponIdList.slice(currentPageIndex * maxNumToDisplay, (currentPageIndex + 1) * maxNumToDisplay), numPages, currentPageIndex }\r\n  }, [weaponIdList, pageIndex, maxNumToDisplay])\r\n\r\n  // Pagination\r\n  const totalShowing = weaponIdList.length !== totalWeaponNum ? `${weaponIdList.length}/${totalWeaponNum}` : `${totalWeaponNum}`\r\n  const setPage = useCallback(\r\n    (_: ChangeEvent<unknown>, value: number) => {\r\n      invScrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n      setPageIndex(value - 1);\r\n    },\r\n    [setPageIndex, invScrollRef]\r\n  )\r\n\r\n  const resetEditWeapon = useCallback(() => database.displayWeapon.set({ editWeaponId: \"\" }), [database])\r\n\r\n  const { editWeaponId } = state\r\n\r\n  // Validate weaponId to be an actual weapon\r\n  useEffect(() => {\r\n    if (!editWeaponId) return\r\n    if (!database.weapons.get(editWeaponId))\r\n      resetEditWeapon()\r\n  }, [database, editWeaponId, resetEditWeapon])\r\n\r\n  const weaponTotals = useMemo(() =>\r\n    catTotal(allWeaponTypeKeys, ct => Object.entries(database.weapons.data).forEach(([id, weapon]) => {\r\n      const wtk = getWeaponSheet(weapon.key).weaponType\r\n      ct[wtk].total++\r\n      if (weaponIdList.includes(id)) ct[wtk].current++\r\n    })), [database, weaponIdList])\r\n\r\n  const weaponRarityTotals = useMemo(() =>\r\n    catTotal(allRarities, ct => Object.entries(database.weapons.data).forEach(([id, weapon]) => {\r\n      const wr = getWeaponSheet(weapon.key).rarity\r\n      ct[wr].total++\r\n      if (weaponIdList.includes(id)) ct[wr].current++\r\n    })), [database, weaponIdList])\r\n\r\n  return <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n    <Suspense fallback={false}>\r\n      <WeaponSelectionModal show={newWeaponModalShow} onHide={() => setnewWeaponModalShow(false)} onSelect={newWeapon} />\r\n    </Suspense>\r\n    {/* Editor/character detail display */}\r\n    <Suspense fallback={false}>\r\n      <WeaponEditor\r\n        weaponId={editWeaponId}\r\n        footer\r\n        onClose={resetEditWeapon}\r\n      />\r\n    </Suspense>\r\n\r\n    <CardDark ref={invScrollRef}><CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n      <Box display=\"flex\" flexWrap=\"wrap\" gap={1} alignItems=\"stretch\">\r\n        <WeaponToggle onChange={weaponType => database.displayWeapon.set({ weaponType })} value={weaponType} totals={weaponTotals} size=\"small\" />\r\n        <RarityToggle sx={{ height: \"100%\" }} onChange={rarity => database.displayWeapon.set({ rarity })} value={rarity} totals={weaponRarityTotals} size=\"small\" />\r\n        <Box flexGrow={1} />\r\n        <TextField\r\n          autoFocus\r\n          size=\"small\"\r\n          value={searchTerm}\r\n          onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setSearchTerm(e.target.value)}\r\n          label={t(\"weaponName\")}\r\n          sx={{ height: \"100%\" }}\r\n          InputProps={{\r\n            sx: { height: \"100%\" }\r\n          }}\r\n        />\r\n      </Box>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"flex-end\" flexWrap=\"wrap\">\r\n        <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\r\n        <ShowingWeapon numShowing={weaponIdsToShow.length} total={totalShowing} t={t} />\r\n        <SortByButton sx={{ height: \"100%\" }} sortKeys={sortKeys}\r\n          value={sortType} onChange={sortType => database.displayWeapon.set({ sortType })}\r\n          ascending={ascending} onChangeAsc={ascending => database.displayWeapon.set({ ascending })}\r\n        />\r\n      </Box>\r\n    </CardContent></CardDark>\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 500 }} />}>\r\n      <Button fullWidth onClick={() => setnewWeaponModalShow(true)} color=\"info\" startIcon={<Add />} >{t(\"page_weapon:addWeapon\")}</Button>\r\n      <Grid container spacing={1} columns={columns}>\r\n        {weaponIdsToShow.map(weaponId =>\r\n          <Grid item key={weaponId} xs={1} >\r\n            <WeaponCard\r\n              weaponId={weaponId}\r\n              onDelete={deleteWeapon}\r\n              onEdit={editWeapon}\r\n              canEquip\r\n            />\r\n          </Grid>)}\r\n      </Grid>\r\n    </Suspense>\r\n    {numPages > 1 && <CardDark><CardContent>\r\n      <Grid container alignItems=\"flex-end\">\r\n        <Grid item flexGrow={1}>\r\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\r\n        </Grid>\r\n        <Grid item>\r\n          <ShowingWeapon numShowing={weaponIdsToShow.length} total={totalShowing} t={t} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent></CardDark>}\r\n  </Box>\r\n}\r\nfunction ShowingWeapon({ numShowing, total, t }) {\r\n  return <Typography color=\"text.secondary\">\r\n    <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total} >\r\n      Showing <b>{{ count: numShowing } as TransObject}</b> out of {{ value: total }} Weapons\r\n    </Trans>\r\n  </Typography>\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useWeapon(weaponID: string | undefined = \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [weapon, setWeapon] = useState(database.weapons.get(weaponID))\r\n  useEffect(() => setWeapon(database.weapons.get(weaponID)), [database, weaponID])\r\n  useEffect(() =>\r\n    weaponID ? database.weapons.follow(weaponID, (k, r, v) => r === \"update\" && setWeapon(v)) : undefined,\r\n    [weaponID, setWeapon, database])\r\n  return weapon\r\n}\r\n","import { objectMap } from \"./Util\"\r\ntype Entry = {\r\n  total: number,\r\n  current: number,\r\n}\r\n// A helper function to generate a `current/total` formated string object with categories\r\nexport function catTotal<T extends string | number | symbol>(keys: readonly T[], cb: (ct: Record<T, Entry>) => void) {\r\n  const ct = catTotalObj(keys)\r\n  cb(ct)\r\n  return catTotalToStringObj(ct)\r\n}\r\n\r\nfunction catTotalObj<T extends string | number | symbol>(keys: readonly T[]): Record<T, Entry> {\r\n  return Object.fromEntries(keys.map(k => [k, { total: 0, current: 0 }])) as Record<T, Entry>\r\n}\r\n\r\nfunction catTotalToStringObj<T extends string | number | symbol>(tot: Record<T, Entry>) {\r\n  return objectMap(tot, ({ total, current }) => current === total ? `${total}` : `${current}/${total}`) as Record<T, string>\r\n}\r\n"],"names":["weaponTypeHandler","handleMultiSelect","allWeaponTypeKeys","WeaponToggle","_ref","value","totals","onChange","props","_objectWithoutPropertiesLoose","_excluded","theme","useTheme","xs","useMediaQuery","breakpoints","up","_jsx","SolidToggleButtonGroup","Object","assign","exclusive","children","wt","_Assets$weaponTypes","_jsxs","ToggleButton","sx","p","undefined","minWidth","display","gap","onClick","ImgIcon","src","Assets","size","sideMargin","Chip","label","WeaponSelectionModal","React","WeaponEditor","lazy","columns","sm","md","lg","xl","numToShowMap","sortKeys","keys","weaponSortMap","PageWeapon","t","useTranslation","database","useContext","DatabaseContext","state","setState","useState","displayWeapon","get","useEffect","follow","r","dbMeta","newWeaponModalShow","setnewWeaponModalShow","dbDirty","forceUpdate","useForceUpdate","invScrollRef","useRef","pageIndex","setPageIndex","ReactGA","hitType","page","weapons","followAny","k","brPt","useMediaQueryUp","maxNumToDisplay","deleteWeapon","useCallback","async","weapon","key","name","window","confirm","remove","editWeaponId","set","editWeapon","newWeapon","weaponKey","new","initialWeapon","searchTerm","setSearchTerm","deferredSearchTerm","useDeferredValue","sortType","ascending","weaponType","rarity","weaponIdList","totalWeaponNum","useMemo","_weaponSortMap$sortTy","values","length","filter","filterFunction","weaponFilterConfigs","sort","sortFunction","weaponSortConfigs","map","id","weaponIdsToShow","numPages","currentPageIndex","Math","ceil","clamp","slice","totalShowing","setPage","_","_invScrollRef$current","current","scrollIntoView","behavior","resetEditWeapon","weaponTotals","catTotal","ct","entries","data","forEach","wtk","getWeaponSheet","total","includes","weaponRarityTotals","allRarities","wr","Box","my","flexDirection","Suspense","fallback","show","onHide","onSelect","weaponId","footer","onClose","CardDark","ref","CardContent","flexWrap","alignItems","RarityToggle","height","flexGrow","TextField","autoFocus","e","target","InputProps","justifyContent","Pagination","count","ShowingWeapon","numShowing","SortByButton","onChangeAsc","Skeleton","variant","width","minHeight","Button","fullWidth","color","startIcon","Add","Grid","container","spacing","item","WeaponCard","onDelete","onEdit","canEquip","Typography","Trans","i18nKey","useWeapon","weaponID","setWeapon","v","cb","fromEntries","catTotalObj","tot","objectMap"],"sourceRoot":""}