{"version":3,"file":"184.dd3a28b17b93579a.js","mappings":"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","sources":["webpack:///./src/app/Context/GraphContext.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/CharSelectButton.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/FormulaModal.tsx","webpack:///./src/app/Components/ExpandButton.tsx","webpack:///./src/app/Components/StatInput.tsx","webpack:///./src/app/Components/EnemyEditor.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/StatModal.tsx","webpack:///./src/app/Context/OptimizationTargetContext.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/common.ts","webpack:///./src/app/Components/Artifact/SetEffectDisplay.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/useBuildSetting.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ArtifactSetConfig.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/AssumeFullLevelToggle.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BonusStatsCard.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BuildAlert.tsx","webpack:///./src/app/Components/Artifact/ArtifactCardNano.tsx","webpack:///./src/app/Components/Character/StatDisplayComponent.tsx","webpack:///./src/app/Components/Weapon/WeaponCardNano.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ArtifactSetBadges.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BuildDisplayItem.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/useBuildResult.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/CustomDot.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/CustomTooltip.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/EnhancedPoint.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/index.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/MainStatSelectionCard.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/OptimizationTargetEditorList.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/StatFilterCard.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/UseEquipped.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/UseExcluded.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/WorkerErr.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/foreground.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/index.tsx","webpack:///../../libs/char-cards/src/index.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/CompareBuildButton.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/ArtifactSwapModal.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/WeaponSwapModal.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/EquipmentSection.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/index.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTalent.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTeambuffs.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTheorycraft/index.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTheorycraft/useCharTC.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/TravelerElementSelect.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/TravelerGenderSelect.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/index.tsx"],"sourcesContent":["import { createContext } from \"react\"\nimport { NumNode } from \"../Formula/type\"\nimport { Build } from \"../PageCharacter/CharacterDisplay/Tabs/TabOptimize/common\"\n\nexport type ChartData = {\n  valueNode: NumNode,\n  plotNode: NumNode,\n  data: Build[]\n}\nexport type GraphContextObj = {\n  chartData?: ChartData\n  setChartData: (data: ChartData | undefined) => void\n  graphBuilds: string[][] | undefined\n  setGraphBuilds: (builds: string[][] | undefined) => void\n}\nexport const GraphContext = createContext({} as GraphContextObj)\n","import { Button } from '@mui/material';\r\nimport React, { Suspense, useContext, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { characterAsset } from '@genshin-optimizer/g-assets';\r\nimport ThumbSide from '../../Components/Character/ThumbSide';\r\nimport { CharacterContext } from '../../Context/CharacterContext';\r\nimport useCharSelectionCallback from '../../ReactHooks/useCharSelectionCallback';\r\nimport useDBMeta from '../../ReactHooks/useDBMeta';\r\n\r\nconst CharacterSelectionModal = React.lazy(() => import('../CharacterSelectionModal'))\r\n\r\nexport default function CharSelectButton() {\r\n  const { t } = useTranslation(\"page_character\")\r\n  const { characterSheet, character: { key: characterKey } } = useContext(CharacterContext)\r\n  const [showModal, setshowModal] = useState(false)\r\n  const { gender } = useDBMeta()\r\n  const setCharacter = useCharSelectionCallback()\r\n  return <>\r\n    <Suspense fallback={false}>\r\n      <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacter} />\r\n    </Suspense>\r\n    <Button color=\"info\" onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterAsset(characterKey, \"iconSide\", gender)} />} >{characterSheet?.name ?? t(\"selectCharacter\")}</Button>\r\n  </>\r\n}\r\n","import { ExpandMore } from '@mui/icons-material';\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CardContent, CardHeader, Divider, Skeleton, Typography } from '@mui/material';\r\nimport { MutableRefObject, Suspense, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport AmpReactionModeText from '../../Components/AmpReactionModeText';\r\nimport CardDark from '../../Components/Card/CardDark';\r\nimport CardHeaderCustom from '../../Components/Card/CardHeaderCustom';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport CloseButton from '../../Components/CloseButton';\r\nimport ColorText from '../../Components/ColoredText';\r\nimport ImgIcon from '../../Components/Image/ImgIcon';\r\nimport ModalWrapper from \"../../Components/ModalWrapper\";\r\nimport SqBadge from '../../Components/SqBadge';\r\nimport { DataContext } from '../../Context/DataContext';\r\nimport { FormulaDataContext } from '../../Context/FormulaDataContext';\r\nimport { DatabaseContext } from '../../Database/Database';\r\nimport { getDisplayHeader, getDisplaySections } from '../../Formula/DisplayUtil';\r\nimport { DisplaySub, Variant } from '../../Formula/type';\r\nimport { NodeDisplay, nodeVStr } from '../../Formula/uiData';\r\nimport { allAmpReactions, AmpReactionKey } from '../../Types/consts';\r\n\r\nexport default function FormulaModal() {\r\n  const { modalOpen } = useContext(FormulaDataContext)\r\n  const { setFormulaData } = useContext(FormulaDataContext)\r\n  const onCloseHandler = useCallback(() => setFormulaData?.(undefined, undefined), [setFormulaData])\r\n  return <ModalWrapper open={!!modalOpen} onClose={onCloseHandler}>\r\n    <CardDark>\r\n      <CardHeader title=\"Formulas & Calculations\" action={<CloseButton onClick={onCloseHandler} />} />\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <CalculationDisplay />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n\r\nfunction CalculationDisplay() {\r\n  const { data } = useContext(DataContext)\r\n  const { data: contextData } = useContext(FormulaDataContext)\r\n  const sections = getDisplaySections(contextData ?? data)\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\r\n    <Box sx={{ mr: -1, mb: -1 }}>\r\n      {sections.map(([key, Nodes]) =>\r\n        <FormulaCalc key={key} displayNs={Nodes} sectionKey={key} />)}\r\n    </Box>\r\n  </Suspense>\r\n}\r\nfunction FormulaCalc({ sectionKey, displayNs }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\r\n  const { data } = useContext(DataContext)\r\n  const { database } = useContext(DatabaseContext)\r\n  const { data: contextData } = useContext(FormulaDataContext)\r\n  const header = useMemo(() => getDisplayHeader(contextData ?? data, sectionKey, database), [database, contextData, data, sectionKey])\r\n  if (!header) return null\r\n  if (Object.entries(displayNs).every(([_, node]) => node.isEmpty)) return null\r\n  const { title, icon, action } = header\r\n  return <CardLight sx={{ mb: 1 }}>\r\n    <CardHeaderCustom avatar={icon && <ImgIcon size={2} src={icon} />} title={title} action={action && <SqBadge>{action}</SqBadge>} />\r\n    <Divider />\r\n    <CardContent>\r\n      {Object.entries(displayNs).map(([key, node]) => !node.isEmpty && <FormulaAccordian key={key} node={node} />)}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction FormulaAccordian({ node }: { node: NodeDisplay }) {\r\n  const { node: contextNode } = useContext(FormulaDataContext)\r\n  const [expanded, setExpanded] = useState(false);\r\n  const handleChange = useCallback((e: React.SyntheticEvent, isExpanded: boolean) => setExpanded(isExpanded), [])\r\n  const scrollRef = useRef<HTMLDivElement>() as MutableRefObject<HTMLDivElement | null>\r\n\r\n  useEffect(() => {\r\n    if (node === contextNode) setTimeout(() => scrollRef?.current?.scrollIntoView?.({ behavior: \"smooth\" }), 300)\r\n  }, [scrollRef, node, contextNode])\r\n\r\n  return <Accordion sx={{ bgcolor: \"contentDark.main\" }} expanded={node === contextNode || expanded} onChange={handleChange} ref={scrollRef} >\r\n    <AccordionSummary expandIcon={<ExpandMore />} >\r\n      <Typography><ColorText color={node.info.variant}>{node.info.name}</ColorText> <strong>{nodeVStr(node)}</strong></Typography>\r\n      {allAmpReactions.includes(node.info.variant as \"vaporize\" | \"melt\") && <Box sx={{ display: \"inline-block\", ml: \"auto\", mr: 2 }}>\r\n        <AmpReactionModeText reaction={node.info.variant as AmpReactionKey} trigger={node.info.subVariant as \"cryo\" | \"pyro\" | \"hydro\" | undefined} />\r\n      </Box>}\r\n    </AccordionSummary>\r\n    <AccordionDetails >\r\n      {node.formulas.map((subform, i) => <Typography key={i} component=\"div\">{subform}</Typography>)}\r\n    </AccordionDetails>\r\n  </Accordion>\r\n}\r\n","import { IconButton, IconButtonProps, styled } from \"@mui/material\";\r\n\r\ninterface ExpandMoreProps extends IconButtonProps {\r\n  expand: boolean;\r\n}\r\nconst ExpandButton = styled((props: ExpandMoreProps) => {\r\n  const { expand, ...other } = props;\r\n  return <IconButton {...other} />;\r\n})(({ theme, expand }) => ({\r\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\r\n  marginLeft: 'auto',\r\n  transition: (theme as any).transitions.create('transform', {\r\n    duration: (theme as any).transitions.duration.shortest,\r\n  }),\r\n}));\r\n\r\nexport default ExpandButton","import { Replay } from \"@mui/icons-material\"\r\nimport { Button, ButtonGroup, ButtonGroupProps, styled } from \"@mui/material\"\r\nimport { ReactNode } from \"react\"\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"./CustomNumberInput\"\r\nimport TextButton from \"./TextButton\"\r\n\r\ntype StatInputInput = ButtonGroupProps & {\r\n  name: Displayable,\r\n  children?: ReactNode,\r\n  value: number,\r\n  placeholder?: string,\r\n  defaultValue?: number,\r\n  onValueChange: (newValue: number | undefined) => void,\r\n  percent?: boolean,\r\n  disabled?: boolean,\r\n  onReset?: () => void\r\n}\r\nconst FlexButtonGroup = styled(ButtonGroup)({\r\n  display: \"flex\"\r\n})\r\n\r\nexport default function StatInput({ name, children, value, placeholder, defaultValue = 0, onValueChange, percent = false, disabled = false, onReset, ...restProps }: StatInputInput) {\r\n\r\n  return <FlexButtonGroup {...restProps} >\r\n    {children}\r\n    <TextButton sx={{ px: 1 }}>\r\n      {name}\r\n    </TextButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: \"10em\", flexGrow: 1 }} >\r\n      <CustomNumberInput\r\n        sx={{ px: 1 }}\r\n        inputProps={{\r\n          sx: { textAlign: \"right\" }\r\n        }}\r\n        float={percent}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onValueChange}\r\n        disabled={disabled}\r\n        endAdornment={percent ? \"%\" : undefined}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    <Button sx={{ flexShrink: 2 }} size=\"small\" color=\"error\" onClick={() => onReset ? onReset() : onValueChange(defaultValue)} disabled={disabled || value === defaultValue} >\r\n      <Replay />\r\n    </Button>\r\n  </FlexButtonGroup>\r\n}\r\n","import { allElementsWithPhy, ElementKeyWithPhy } from \"@genshin-optimizer/consts\";\r\nimport { CheckBox, CheckBoxOutlineBlank, ExpandMore, Replay } from \"@mui/icons-material\";\r\nimport { Box, Button, CardContent, Chip, Collapse, Grid, Typography } from \"@mui/material\";\r\nimport { useCallback, useContext, useState } from 'react';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { CharacterContext } from \"../Context/CharacterContext\";\r\nimport { DataContext } from \"../Context/DataContext\";\r\nimport { uiInput as input } from \"../Formula\";\r\nimport { nodeVStr } from \"../Formula/uiData\";\r\nimport KeyMap from '../KeyMap';\r\nimport { ElementIcon } from \"../KeyMap/StatIcon\";\r\nimport { iconInlineProps } from \"../SVGIcons\";\r\nimport CardLight from \"./Card/CardLight\";\r\nimport ColorText from \"./ColoredText\";\r\nimport ExpandButton from \"./ExpandButton\";\r\nimport StatInput from \"./StatInput\";\r\n\r\nexport function EnemyExpandCard() {\r\n  const { t } = useTranslation(\"ui\")\r\n  const { characterDispatch } = useContext(CharacterContext)\r\n  const { data } = useContext(DataContext)\r\n  const [expanded, setexpanded] = useState(false)\r\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\r\n  const eLvlNode = data.get(input.enemy.level)\r\n  const eDefRed = data.get(input.enemy.defRed)\r\n  const eDefIgn = data.get(input.enemy.defIgn)\r\n  const onReset = useCallback(() => characterDispatch({ enemyOverride: {} }), [characterDispatch])\r\n\r\n  return <CardLight>\r\n    <CardContent sx={{ display: \"flex\", gap: 1, alignItems: \"center\", flexWrap: \"wrap\" }}>\r\n      <Chip size=\"small\" color=\"success\" label={<span>{eLvlNode.info.name} <strong>{eLvlNode.value}</strong></span>} />\r\n      {allElementsWithPhy.map(element => <Typography key={element} ><EnemyResText element={element} /></Typography>)}\r\n      <Typography>DEF Red. {nodeVStr(eDefRed)}</Typography>\r\n      <Typography>DEF Ignore {nodeVStr(eDefIgn)}</Typography>\r\n      <Box flexGrow={1} display=\"flex\" justifyContent=\"flex-end\" gap={1}>\r\n        <Button size=\"small\" color=\"error\" onClick={onReset} startIcon={<Replay />}>{t`reset`}</Button>\r\n        <ExpandButton\r\n          expand={expanded}\r\n          onClick={toggle}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n          size=\"small\"\r\n          sx={{ marginLeft: 0 }}\r\n        >\r\n          <ExpandMore />\r\n        </ExpandButton>\r\n      </Box>\r\n    </CardContent>\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <EnemyEditor />\r\n      </CardContent>\r\n    </Collapse>\r\n  </CardLight>\r\n}\r\n\r\nexport function EnemyResText({ element }: { element: ElementKeyWithPhy }) {\r\n  const { data } = useContext(DataContext)\r\n  const node = data.get(input.enemy[`${element}_res_`])\r\n  const immune = !isFinite(node.value)\r\n  const icon = <ElementIcon ele={element} iconProps={iconInlineProps} />\r\n  const content = immune ? <span >{icon} &#8734;</span> :\r\n    <span>{icon} <strong>{nodeVStr(node)}</strong></span>\r\n  return <ColorText color={element}>{content}</ColorText>\r\n}\r\n\r\nexport function EnemyEditor({ bsProps = { xs: 12, md: 6 } }: { bsProps?: object }) {\r\n  const { character: { enemyOverride }, characterDispatch } = useContext(CharacterContext)\r\n  const { data } = useContext(DataContext)\r\n  const defaultVal = 10\r\n\r\n  const eLvl = enemyOverride.enemyLevel ?? data.get(input.lvl).value\r\n  const eDefRed = enemyOverride.enemyDefIgn_ ?? 0\r\n  const eDefIgn = enemyOverride.enemyDefRed_ ?? 0\r\n  return <Grid container spacing={1}>\r\n    <Grid item {...bsProps}>\r\n      <Button fullWidth sx={{ height: \"100%\" }} size=\"small\" component=\"a\" color=\"warning\" href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n        To get the specific resistance values of enemies, please visit the wiki.\r\n      </Button>\r\n    </Grid>\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{KeyMap.get(\"enemyLevel\")}</b>}\r\n        value={eLvl}\r\n        placeholder={KeyMap.getStr(\"enemyLevel\")}\r\n        defaultValue={data.get(input.lvl).value}\r\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value })}\r\n        onReset={() => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value: undefined })}\r\n      />\r\n    </Grid>\r\n    {allElementsWithPhy.map(eleKey => {\r\n      const statKey = `${eleKey}_enemyRes_`\r\n      const val = enemyOverride[statKey]\r\n      const elementImmunity = val === Number.MAX_VALUE\r\n      return <Grid item key={eleKey} {...bsProps}>\r\n        <StatInput\r\n          sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n          name={<ColorText color={eleKey}><b>{KeyMap.get(statKey)}</b></ColorText>}\r\n          value={val !== undefined ? (elementImmunity ? Infinity : val) : 10}\r\n          placeholder={elementImmunity ? \"∞ \" : KeyMap.getStr(statKey)}\r\n          defaultValue={defaultVal}\r\n          onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey, value })}\r\n          disabled={elementImmunity}\r\n          percent\r\n        >\r\n          <Button color={eleKey} onClick={() => characterDispatch({ type: \"enemyOverride\", statKey, value: elementImmunity ? defaultVal : Number.MAX_VALUE })} startIcon={elementImmunity ? <CheckBox /> : <CheckBoxOutlineBlank />} >\r\n            Immunity\r\n          </Button>\r\n        </StatInput>\r\n      </Grid>\r\n    })}\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{KeyMap.get(\"enemyDefIgn_\")}</b>}\r\n        value={eDefRed}\r\n        placeholder={KeyMap.getStr(\"enemyDefIgn_\")}\r\n        defaultValue={0}\r\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefIgn_\", value })}\r\n        percent\r\n      />\r\n    </Grid>\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{KeyMap.get(\"enemyDefRed_\")}</b>}\r\n        value={eDefIgn}\r\n        placeholder={KeyMap.getStr(\"enemyDefRed_\")}\r\n        defaultValue={0}\r\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefRed_\", value })}\r\n        percent\r\n      />\r\n    </Grid>\r\n    <Grid item xs={12}>\r\n      <small>Note: Genshin Impact halves resistance shred values below 0%. For the sake of calculations enter the RAW value and GO will do the rest. (e.g. 10% - 20% = -10%)</small>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import { CardContent, CardHeader, Grid, ListItem, Stack, Typography, Box } from \"@mui/material\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport CardDark from \"../../Components/Card/CardDark\";\nimport CardLight from \"../../Components/Card/CardLight\";\nimport CloseButton from \"../../Components/CloseButton\";\nimport ColorText from \"../../Components/ColoredText\";\nimport { EnemyExpandCard } from \"../../Components/EnemyEditor\";\nimport { FieldDisplayList, NodeFieldDisplay } from \"../../Components/FieldDisplay\";\nimport ModalWrapper from \"../../Components/ModalWrapper\";\nimport StatEditorList from \"../../Components/StatEditorList\";\nimport { CharacterContext } from \"../../Context/CharacterContext\";\nimport { DataContext } from \"../../Context/DataContext\";\nimport { allInputPremodKeys, uiInput as input } from \"../../Formula\";\nimport { ReadNode } from \"../../Formula/type\";\nimport { nodeVStr } from \"../../Formula/uiData\";\nimport { allEleDmgKeys, allEleResKeys } from \"../../KeyMap\";\n\nconst cols = {\n  xs: 1, md: 2, lg: 3\n}\n\nexport default function StatModal({ open, onClose }) {\n  const { t } = useTranslation(\"page_character\")\n  return <ModalWrapper open={open} onClose={onClose}>\n    <CardDark>\n      <CardHeader title={t`addStats.title`} action={<CloseButton onClick={onClose} />} />\n      <CardContent sx={{ pt: 0 }}>\n        <Stack spacing={1}>\n          <BonusStatsEditor />\n          <EnemyExpandCard />\n          <MainStatsCards />\n        </Stack>\n      </CardContent></CardDark>\n  </ModalWrapper>\n}\nconst keys = [...allInputPremodKeys]\nconst wrapperFunc = (e: JSX.Element, key?: string) => <Grid item key={key} xs={1}>{e}</Grid>\nfunction BonusStatsEditor() {\n  const { character: { bonusStats }, characterDispatch } = useContext(CharacterContext)\n  const setFilter = useCallback((bonusStats) => characterDispatch({ bonusStats }), [characterDispatch],)\n  return <CardLight>\n    <CardContent sx={{ display: \"flex\" }}>\n      <Grid container columns={cols} sx={{ pt: 1 }} spacing={1}>\n        <StatEditorList statKeys={keys} statFilters={bonusStats} setStatFilters={setFilter} wrapperFunc={wrapperFunc} />\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\n\nconst mainBaseKeys = [\"hp\", \"atk\", \"def\"] as const\nconst mainSubKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"] as const\nconst mainReadNodes = [...mainBaseKeys, ...mainSubKeys].map(k => input.total[k])\nconst mainEditKeys = [\"atk_\", \"atk\", \"hp_\", \"hp\", \"def_\", \"def\", ...mainSubKeys] as const\n\nconst otherStatKeys = [\n  ...allEleDmgKeys,\n  ...allEleResKeys,\n  \"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\"\n] as const\n\nconst miscStatkeys = allInputPremodKeys.filter(k => !mainEditKeys.includes(k as any) && !otherStatKeys.includes(k as any))\n\n\nfunction StatDisplayContent({ nodes, extra }: { nodes: ReadNode<number>[], extra?: Displayable }) {\n  const { data, oldData } = useContext(DataContext)\n  return <FieldDisplayList >\n    {nodes.map(rn => <NodeFieldDisplay component={ListItem} key={JSON.stringify(rn.info)} node={data.get(rn)} oldValue={oldData?.get(rn)?.value} />)}\n    {extra}\n  </FieldDisplayList>\n}\n\nfunction MainStatsCards() {\n  const { characterSheet } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const specialNode = data.get(input.special)\n  const charEle = characterSheet.elementKey\n  const isMelee = characterSheet.isMelee()\n\n  const otherStatReadNodes = useMemo(() => {\n    const nodes = otherStatKeys.filter(k => {\n      if (k.includes(charEle)) return false\n      if (isMelee && k.includes(\"physical\")) return true\n      return true\n    }).map(k => input.total[k])\n\n    return nodes.filter(n => !!data.get(n).value)\n  }, [data, charEle, isMelee])\n\n\n  const miscStatReadNodes = useMemo(() => miscStatkeys.map(k => input.total[k]).filter(n => data.get(n).value), [data])\n\n  return <CardLight><CardContent>\n    <Grid container columns={cols} spacing={1}>\n      <Grid item xs={1}>\n        <StatDisplayCard title=\"Main Stats\">\n          <StatDisplayContent nodes={mainReadNodes}\n            extra={specialNode && <ListItem sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n              <span><b>Special:</b> <ColorText color={specialNode.info.variant}>{specialNode.info.icon} {specialNode.info.name}</ColorText></span>\n              <span >{nodeVStr(specialNode)}</span>\n            </ListItem>}\n          />\n        </StatDisplayCard>\n      </Grid>\n      <Grid item xs={1}>\n        <StatDisplayCard title=\"Other Stats\">\n          <StatDisplayContent nodes={otherStatReadNodes} />\n        </StatDisplayCard>\n      </Grid>\n      {!!miscStatReadNodes.length && <Grid item xs={1}>\n        <StatDisplayCard title=\"Misc Stats\">\n          <StatDisplayContent nodes={miscStatReadNodes} />\n        </StatDisplayCard>\n      </Grid>}\n    </Grid>\n  </CardContent></CardLight>\n}\nfunction StatDisplayCard({ title, children }) {\n  return <CardDark>\n    <CardContent sx={{ py: 1 }}>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"subtitle1\">{title}</Typography>\n      </Box>\n    </CardContent>\n    {children}\n  </CardDark>\n}\n","import { createContext } from \"react\";\r\n\r\nexport const OptimizationTargetContext = createContext(undefined as string[] | undefined)\r\n","import { ArtSetExclusion } from \"../../../../Database/DataManagers/BuildSettingData\";\r\nimport { forEachNodes, mapFormulas } from \"../../../../Formula/internal\";\r\nimport { allOperations, constantFold, OptNode } from \"../../../../Formula/optimization\";\r\nimport { ConstantNode } from \"../../../../Formula/type\";\r\nimport { constant, customRead, max, min, threshold } from \"../../../../Formula/utils\";\r\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from \"../../../../Types/consts\";\r\nimport { assertUnreachable, objectKeyMap, objectMap, range } from \"../../../../Util/Util\";\r\n\r\ntype MicropassOperation = \"reaffine\" | \"pruneArtRange\" | \"pruneNodeRange\" | \"pruneOrder\"\r\nexport function pruneAll(nodes: OptNode[], minimum: number[], arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion, forced: Dict<MicropassOperation, boolean>): { nodes: OptNode[], arts: ArtifactsBySlot } {\r\n  let should = forced\r\n  /** If `key` makes progress, all operations in `value` should be performed */\r\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\r\n    pruneOrder: { pruneNodeRange: true },\r\n    pruneArtRange: { pruneNodeRange: true },\r\n    pruneNodeRange: { reaffine: true },\r\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true }\r\n  }\r\n  let count = 0\r\n  while (Object.values(should).some(x => x) && count++ < 20) {\r\n    if (should.pruneOrder) {\r\n      delete should.pruneOrder\r\n      const newArts = pruneOrder(arts, numTop, exclusion)\r\n      if (arts !== newArts) {\r\n        arts = newArts\r\n        should = { ...should, ...deps.pruneOrder }\r\n      }\r\n    }\r\n    if (should.pruneArtRange) {\r\n      delete should.pruneArtRange\r\n      const newArts = pruneArtRange(nodes, arts, minimum)\r\n      if (arts !== newArts) {\r\n        arts = newArts\r\n        should = { ...should, ...deps.pruneArtRange }\r\n      }\r\n    }\r\n    if (should.pruneNodeRange) {\r\n      delete should.pruneNodeRange\r\n      const newNodes = pruneNodeRange(nodes, arts)\r\n      if (nodes !== newNodes) {\r\n        nodes = newNodes\r\n        should = { ...should, ...deps.pruneNodeRange }\r\n      }\r\n    }\r\n    if (should.reaffine) {\r\n      delete should.reaffine\r\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\r\n      if (nodes !== newNodes || arts !== newArts) {\r\n        nodes = newNodes\r\n        arts = newArts\r\n        should = { ...should, ...deps.reaffine }\r\n      }\r\n    }\r\n  }\r\n  return { nodes, arts }\r\n}\r\n\r\nexport function pruneExclusion(nodes: OptNode[], exclusion: ArtSetExclusion): OptNode[] {\r\n  const maxValues: Dict<keyof typeof exclusion, number> = {}\r\n  for (const [key, e] of Object.entries(exclusion)) {\r\n    if (!e.includes(4)) continue\r\n    maxValues[key] = e.includes(2) ? 1 : 3\r\n  }\r\n  return mapFormulas(nodes, f => f, f => {\r\n    if (f.operation !== \"threshold\") return f\r\n\r\n    const [v, t, pass, fail] = f.operands\r\n    if (v.operation === \"read\" && t.operation === \"const\") {\r\n      const key = v.path[v.path.length - 1], thres = t.value\r\n      if (key in maxValues) {\r\n        const max: number = maxValues[key]\r\n        if (max < thres) return fail\r\n        if (thres === 2 && exclusion[key]!.includes(2))\r\n          return threshold(v, 4, pass, fail)\r\n      }\r\n    }\r\n    return f\r\n  })\r\n}\r\n\r\nfunction reaffine(nodes: OptNode[], arts: ArtifactsBySlot, forceRename = false): { nodes: OptNode[], arts: ArtifactsBySlot } {\r\n  const affineNodes = new Set<OptNode>(), topLevelAffine = new Set<OptNode>()\r\n\r\n  function visit(node: OptNode, isAffine: boolean) {\r\n    if (isAffine) affineNodes.add(node)\r\n    else node.operands.forEach(op => affineNodes.has(op) && topLevelAffine.add(op))\r\n  }\r\n\r\n  const dynKeys = new Set<string>()\r\n\r\n  forEachNodes(nodes, _ => { }, f => {\r\n    const { operation } = f\r\n    switch (operation) {\r\n      case \"read\":\r\n        dynKeys.add(f.path[1])\r\n        visit(f, true)\r\n        break\r\n      case \"add\": visit(f, f.operands.every(op => affineNodes.has(op))); break\r\n      case \"mul\": {\r\n        const nonConst = f.operands.filter(op => op.operation !== \"const\")\r\n        visit(f, nonConst.length === 0 || (nonConst.length === 1 && affineNodes.has(nonConst[0])))\r\n        break\r\n      }\r\n      case \"const\": visit(f, true); break\r\n      case \"res\": case \"threshold\": case \"sum_frac\":\r\n      case \"max\": case \"min\": visit(f, false); break\r\n      default: assertUnreachable(operation)\r\n    }\r\n  })\r\n\r\n  if ([...topLevelAffine].every(({ operation }) => operation === \"read\" || operation === \"const\") &&\r\n    Object.keys(arts.base).length === dynKeys.size)\r\n    return { nodes, arts }\r\n\r\n  let current = -1\r\n  function nextDynKey(): string {\r\n    while (dynKeys.has(`${++current}`));\r\n    return `${current}`\r\n  }\r\n\r\n  nodes.forEach(node => affineNodes.has(node) && topLevelAffine.add(node))\r\n  const affine = [...topLevelAffine].filter(f => f.operation !== \"const\")\r\n  const affineMap = new Map(affine.map(node => [node,\r\n    !forceRename && node.operation === \"read\" && node.path[0] === \"dyn\"\r\n      ? node\r\n      : { ...customRead([\"dyn\", `${nextDynKey()}`]), accu: \"add\" as const }]))\r\n  nodes = mapFormulas(nodes, f => affineMap.get(f) ?? f, f => f)\r\n\r\n  function reaffineArt(stat: DynStat): DynStat {\r\n    const values = constantFold([...affineMap.keys()], {\r\n      dyn: objectMap(stat, (value) => constant(value))\r\n    } as any, _ => true)\r\n    return Object.fromEntries([...affineMap.values()].map((v, i) => [v.path[1], (values[i] as ConstantNode<number>).value]))\r\n  }\r\n  const result = {\r\n    nodes, arts: {\r\n      base: reaffineArt(arts.base),\r\n      values: objectKeyMap(allSlotKeys, slot =>\r\n        arts.values[slot].map(({ id, set, values }) => ({ id, set, values: reaffineArt(values) })))\r\n    }\r\n  }\r\n  const offsets = Object.entries(reaffineArt({}))\r\n  for (const arts of Object.values(result.arts.values))\r\n    for (const { values } of arts)\r\n      for (const [key, baseValue] of offsets)\r\n        values[key] -= baseValue\r\n  return result\r\n}\r\n/** Remove artifacts that cannot be in top `numTop` builds */\r\nfunction pruneOrder(arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion): ArtifactsBySlot {\r\n  let progress = false\r\n  /**\r\n   * Note:\r\n   * This function assumes that every base (reaffined) stats are monotonically increasing. That is, artifacts\r\n   * with higher stats are better. This remains true as long as the main and substats are in increasing. Set\r\n   * effects that decrease enemy resistance (which is monotonically decreasing) does not violate this assumption\r\n   * as set effects are not handled here.\r\n   */\r\n  const allowRainbow = !exclusion.rainbow?.length, keys = Object.keys(arts.base)\r\n  const noSwitchIn = new Set(Object.entries(exclusion).filter(([_, v]) => v.length).map(([k]) => k) as ArtifactSetKey[])\r\n  const noSwitchOut = new Set(Object.entries(exclusion).filter(([_, v]) => v.includes(2) && !v.includes(4)).map(([k]) => k) as ArtifactSetKey[])\r\n  const values = objectKeyMap(allSlotKeys, slot => {\r\n    const list = arts.values[slot]\r\n    const newList = list.filter(art => {\r\n      let count = 0\r\n      return list.every(other => {\r\n        const otherBetterEqual = keys.every(k => (other.values[k] ?? 0) >= (art.values[k] ?? 0))\r\n        const otherMaybeBetter = keys.some(k => (other.values[k] ?? 0) > (art.values[k] ?? 0))\r\n        const otherBetter = otherBetterEqual && (otherMaybeBetter || other.id > art.id)\r\n        const canSwitch = (allowRainbow && !noSwitchIn.has(other.set!) && !noSwitchOut.has(art.set!)) || art.set === other.set\r\n        if (otherBetter && canSwitch) count++\r\n        return count < numTop\r\n      })\r\n    })\r\n    if (newList.length !== list.length) progress = true\r\n    return newList\r\n  })\r\n  return progress ? { base: arts.base, values } : arts\r\n}\r\n/** Remove artifacts that cannot reach `minimum` in any build */\r\nfunction pruneArtRange(nodes: OptNode[], arts: ArtifactsBySlot, minimum: number[]): ArtifactsBySlot {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  const wrap = { arts }\r\n  while (true) {\r\n    const artRanges = objectKeyMap(allSlotKeys, slot => computeArtRange(wrap.arts.values[slot]))\r\n    const otherArtRanges = objectKeyMap(allSlotKeys, key =>\r\n      addArtRange(Object.entries(artRanges).map(a => a[0] === key ? baseRange : a[1]).filter(x => x)))\r\n\r\n    let progress = false\r\n    const values = objectKeyMap(allSlotKeys, slot => {\r\n      const result = wrap.arts.values[slot].filter(art => {\r\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\r\n        const newRange = computeNodeRange(nodes, read)\r\n        return nodes.every((node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity))\r\n      })\r\n      if (result.length !== wrap.arts.values[slot].length)\r\n        progress = true\r\n      return result\r\n    })\r\n    if (!progress) break\r\n    wrap.arts = { base: wrap.arts.base, values }\r\n  }\r\n  return wrap.arts\r\n}\r\nfunction pruneNodeRange(nodes: OptNode[], arts: ArtifactsBySlot): OptNode[] {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  const reads = addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\r\n  const nodeRange = computeNodeRange(nodes, reads)\r\n\r\n  return mapFormulas(nodes, f => {\r\n    {\r\n      const { min, max } = nodeRange.get(f)!\r\n      if (min === max) return constant(min)\r\n    }\r\n    const { operation } = f\r\n    const operandRanges = f.operands.map(x => nodeRange.get(x)!)\r\n    switch (operation) {\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = operandRanges\r\n        if (value.min >= threshold.max) return f.operands[2]\r\n        else if (value.max < threshold.min) return f.operands[3]\r\n        if (pass.max === pass.min &&\r\n          fail.max === fail.min &&\r\n          pass.min === fail.min && isFinite(pass.min))\r\n          return constant(pass.max)\r\n        break\r\n      }\r\n      case \"min\": {\r\n        const newOperands = f.operands.filter((_, i) => {\r\n          const op1 = operandRanges[i]\r\n          return operandRanges.every((op2, j) => op1.min <= op2.max)\r\n        })\r\n        if (newOperands.length < operandRanges.length) return min(...newOperands)\r\n        break\r\n      }\r\n      case \"max\": {\r\n        const newOperands = f.operands.filter((_, i) => {\r\n          const op1 = operandRanges[i]\r\n          return operandRanges.every(op2 => op1.max >= op2.min)\r\n        })\r\n        if (newOperands.length < operandRanges.length) return max(...newOperands)\r\n        break\r\n      }\r\n    }\r\n    return f\r\n  }, f => f)\r\n}\r\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\r\n  const result: DynMinMax = {}\r\n  ranges.forEach(range => {\r\n    Object.entries(range).forEach(([key, value]) => {\r\n      if (result[key]) {\r\n        result[key].min += value.min\r\n        result[key].max += value.max\r\n      } else result[key] = { ...value }\r\n    })\r\n  })\r\n  return result\r\n}\r\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\r\n  const result: DynMinMax = {}\r\n  if (arts.length) {\r\n    Object.keys(arts[0].values)\r\n      .filter(key => arts.every(art => art.values[key]))\r\n      .forEach(key => result[key] = { min: arts[0].values[key], max: arts[0].values[key] })\r\n    arts.forEach(({ values }) => {\r\n      for (const [key, value] of Object.entries(values)) {\r\n        if (!result[key]) result[key] = { min: 0, max: value }\r\n        else {\r\n          if (result[key].max < value) result[key].max = value\r\n          if (result[key].min > value) result[key].min = value\r\n        }\r\n      }\r\n    })\r\n  }\r\n  return result\r\n}\r\nexport function computeFullArtRange(arts: ArtifactsBySlot): DynMinMax {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  return addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\r\n}\r\nexport function computeNodeRange(nodes: OptNode[], reads: DynMinMax): Map<OptNode, MinMax> {\r\n  const range = new Map<OptNode, MinMax>()\r\n\r\n  forEachNodes(nodes, _ => { }, f => {\r\n    const { operation } = f\r\n    const operands = f.operands.map(op => range.get(op)!)\r\n    let current: MinMax\r\n    switch (operation) {\r\n      case \"read\":\r\n        if (f.path[0] !== \"dyn\")\r\n          throw new Error(`Found non-dyn path ${f.path} while computing range`)\r\n        current = reads[f.path[1]] ?? { min: 0, max: 0 }\r\n        break\r\n      case \"const\": current = computeMinMax([f.value]); break\r\n      case \"add\": case \"min\": case \"max\":\r\n        current = {\r\n          min: allOperations[operation](operands.map(x => x.min)),\r\n          max: allOperations[operation](operands.map(x => x.max)),\r\n        }; break\r\n      case \"res\": current = {\r\n        min: allOperations[operation]([operands[0].max]),\r\n        max: allOperations[operation]([operands[0].min]),\r\n      }; break\r\n      case \"mul\": current = operands.reduce((accu, current) => computeMinMax([\r\n        accu.min * current.min, accu.min * current.max,\r\n        accu.max * current.min, accu.max * current.max,\r\n      ])); break\r\n      case \"threshold\":\r\n        if (operands[0].min >= operands[1].max) current = operands[2]\r\n        else if (operands[0].max < operands[1].min) current = operands[3]\r\n        else current = computeMinMax([], [operands[2], operands[3]])\r\n        break\r\n      case \"sum_frac\": {\r\n        const [x, c] = operands, sum = { min: x.min + c.min, max: x.max + c.max }\r\n        if (sum.min <= 0 && sum.max >= 0)\r\n          current = (x.min <= 0 && x.max >= 0) ? { min: NaN, max: NaN } : { min: -Infinity, max: Infinity }\r\n        else\r\n          // TODO: Check this\r\n          current = computeMinMax([\r\n            x.min / sum.min, x.min / sum.max,\r\n            x.max / sum.min, x.max / sum.max\r\n          ])\r\n        break\r\n      }\r\n      default: assertUnreachable(operation)\r\n    }\r\n    range.set(f, current)\r\n  })\r\n  return range\r\n}\r\nfunction computeMinMax(values: readonly number[], minMaxes: readonly MinMax[] = []): MinMax {\r\n  const max = Math.max(...values, ...minMaxes.map(x => x.max))\r\n  const min = Math.min(...values, ...minMaxes.map(x => x.min))\r\n  return { min, max }\r\n}\r\n\r\nexport function filterArts(arts: ArtifactsBySlot, filters: RequestFilter): ArtifactsBySlot {\r\n  return {\r\n    base: arts.base,\r\n    values: objectKeyMap(allSlotKeys, slot => {\r\n      const filter = filters[slot]\r\n      switch (filter.kind) {\r\n        case \"id\": return arts.values[slot].filter(art => filter.ids.has(art.id))\r\n        case \"exclude\": return arts.values[slot].filter(art => !filter.sets.has(art.set!))\r\n        case \"required\": return arts.values[slot].filter(art => filter.sets.has(art.set!))\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\r\n  return builds.flatMap(x => x).sort((a, b) => b.value - a.value).slice(0, maxNum)\r\n}\r\nexport function mergePlot(plots: PlotData[]): PlotData {\r\n  let scale = 0.01, reductionScaling = 2, maxCount = 1500\r\n  let keys = new Set(plots.flatMap(x => Object.values(x).map(v => Math.round(v.plot! / scale))))\r\n  while (keys.size > maxCount) {\r\n    scale *= reductionScaling\r\n    keys = new Set([...keys].map(key => Math.round(key / reductionScaling)))\r\n  }\r\n  const result: PlotData = {}\r\n  for (const plot of plots)\r\n    for (const build of Object.values(plot)) {\r\n      const x = Math.round(build.plot! / scale) * scale\r\n      if (!result[x] || result[x]!.value < build.value)\r\n        result[x] = build\r\n    }\r\n  return result\r\n}\r\n\r\nexport function countBuilds(arts: ArtifactsBySlot): number {\r\n  return allSlotKeys.reduce((_count, slot) => _count * arts.values[slot].length, 1)\r\n}\r\n\r\n\r\nexport function* filterFeasiblePerm(filters: Iterable<RequestFilter>, _artSets: ArtifactsBySlot): Iterable<RequestFilter> {\r\n  const artSets = objectMap(_artSets.values, values => new Set(values.map(v => v.set)))\r\n  filter_loop: for (const filter of filters) {\r\n    for (const [slot, f] of Object.entries(filter)) {\r\n      const available = artSets[slot]!\r\n      switch (f.kind) {\r\n        case \"required\": if ([...f.sets].every(s => !available.has(s))) continue filter_loop; break\r\n        case \"exclude\": if ([...available].every(s => f.sets.has(s!))) continue filter_loop; break\r\n        case \"id\": break\r\n      }\r\n    }\r\n    yield filter\r\n  }\r\n}\r\nexport function exclusionToAllowed(exclusion: number[] | undefined): Set<number> {\r\n  return new Set(exclusion?.includes(2)\r\n    ? exclusion.includes(4) ? [0, 1] : [0, 1, 4, 5]\r\n    : exclusion?.includes(4) ? [0, 1, 2, 3] : [0, 1, 2, 3, 4, 5])\r\n}\r\n/** A *disjoint* set of `RequestFilter` satisfying the exclusion rules */\r\nexport function* artSetPerm(exclusion: ArtSetExclusion, _artSets: ArtifactSetKey[]): Iterable<RequestFilter> {\r\n  /**\r\n   * This generation algorithm is separated into two parts:\r\n   * - \"Shape\" generation\r\n   *   - It first generates all build \"shapes\", e.g., AABBC, ABBCD\r\n   *   - It then filters the generated shapes according to the rainbow exclusion, e.g., removes ABBCD if excluding 3 rainbows\r\n   *   - It then merges the remaining shapes into wildcards, e.g. AABAA + AABAB + AABAC => AABA*\r\n   * - Shape filling\r\n   *   - From the given shapes, it tries to fill in all non-rainbow slots, e.g., slots A and B of AABBC, with actual artifacts\r\n   *   - It then fills the rainbow slots, e.g., slot C of AABBC while ensuring the exclusion rule of each sets\r\n   */\r\n  const artSets = [...new Set(_artSets)], allowedRainbows = exclusionToAllowed(exclusion.rainbow)\r\n  let shapes: number[][] = []\r\n  function populateShapes(current: number[], list: Set<number>, rainbows: number[]) {\r\n    if (current.length === 5) {\r\n      if (allowedRainbows.has(rainbows.length))\r\n        shapes.push(current)\r\n      return\r\n    }\r\n    for (const i of list) populateShapes([...current, i], list, rainbows.filter(j => j !== i))\r\n    populateShapes([...current, current.length], new Set([...list, current.length]), [...rainbows, current.length])\r\n  }\r\n  populateShapes([0], new Set([0]), [0])\r\n  function indexOfShape(shape: number[], replacing: number) {\r\n    if (range(replacing + 1, 4).some(i => shape[i] !== 5))\r\n      return undefined\r\n    shape = [...shape]\r\n    shape[replacing] = 5\r\n    return shape.reduce((a, b) => a * 6 + b, 0)\r\n  }\r\n  for (let replacing = 4; replacing >= 0; replacing--) {\r\n    const required: Map<number, number> = new Map()\r\n    for (const shape of shapes) {\r\n      const id = indexOfShape(shape, replacing)\r\n      if (id === undefined) continue\r\n      required.set(id, (required.get(id) ?? new Set(shape.slice(0, replacing)).size + 1) - 1)\r\n    }\r\n    for (const [id, remaining] of required.entries()) {\r\n      if (remaining === 0) {\r\n        const shape = [...shapes.find(shape => indexOfShape(shape, replacing) === id)!]\r\n        shape[replacing] = 5\r\n        shapes = shapes.filter(shape => indexOfShape(shape, replacing) !== id)\r\n        shapes.push(shape)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Shapes are now calculated and merged, proceed to fill in the sets\r\n\r\n  const noFilter = { kind: \"exclude\" as const, sets: new Set<ArtifactSetKey>() }\r\n  const result: RequestFilter = objectKeyMap(allSlotKeys, _ => noFilter)\r\n\r\n  const counts = { ...objectMap(exclusion, _ => 0), ...objectKeyMap(artSets, _ => 0) }\r\n  const allowedCounts = objectMap(exclusion, exclusionToAllowed)\r\n\r\n  function* check(shape: number[]) {\r\n    const used: Set<ArtifactSetKey> = new Set()\r\n    let groupped: number[][] = [], rainbows: number[] = []\r\n    for (const i of shape) {\r\n      groupped.push([])\r\n      if (i === 5) rainbows.push(groupped.length - 1)\r\n      else groupped[i].push(groupped.length - 1)\r\n    }\r\n    groupped = groupped.filter(v => v.length).sort((a, b) => b.length - a.length)\r\n    let usableRainbows = rainbows.length\r\n\r\n    // Inception.. because js doesn't like functions inside a for-loop\r\n    function* check(i: number) {\r\n      if (i === groupped.length)\r\n        return yield* check_free(0)\r\n\r\n      for (const set of artSets) {\r\n        if (used.has(set)) continue\r\n        const length = groupped[i].length, allowedSet = allowedCounts[set]\r\n        let requiredRainbows = 0\r\n\r\n        if (allowedSet && !allowedSet.has(length)) {\r\n          // Look ahead and see if we have enough rainbows to fill to the next `allowedSet` if we use the current set\r\n          requiredRainbows = (range(length + 1, 5).find(l => allowedSet.has(l)) ?? 6) - length\r\n          if (requiredRainbows > usableRainbows) continue // Not enough rainbows. Next..\r\n        }\r\n\r\n        used.add(set)\r\n        counts[set] = groupped[i].length\r\n        groupped[i].forEach(j => result[allSlotKeys[j]] = { kind: \"required\", sets: new Set([set]) })\r\n        usableRainbows -= requiredRainbows\r\n\r\n        yield* check(i + 1)\r\n\r\n        usableRainbows += requiredRainbows\r\n        counts[set] = 0\r\n        used.delete(set)\r\n      }\r\n    }\r\n    // We separate filling rainbow slots from groupped slots because it has an entirely\r\n    // different set of rules regarding what can be filled and what states to be kept.\r\n    function* check_free(i: number) {\r\n      const remaining = rainbows.length - i, isolated: ArtifactSetKey[] = [], missing: ArtifactSetKey[] = [], rejected: ArtifactSetKey[] = []\r\n      let required = 0\r\n      for (const set of artSets) {\r\n        const allowedSet = allowedCounts[set], count = counts[set]\r\n        if (!allowedSet) continue\r\n        if (range(1, remaining).every(j => !allowedSet.has(count + j))) rejected.push(set)\r\n        else if (!allowedSet.has(count)) {\r\n          required += [...allowedSet].find(x => x > count)! - count\r\n          missing.push(set)\r\n        }\r\n        else if (range(0, remaining).some(j => !allowedSet.has(count + j))) isolated.push(set)\r\n      }\r\n      if (required > remaining) return\r\n      if (i === rainbows.length) {\r\n        yield { ...result }\r\n        return\r\n      }\r\n      if (required === remaining) {\r\n        for (const set of missing) {\r\n          counts[set]++\r\n          result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\r\n          yield* check_free(i + 1)\r\n          counts[set]--\r\n        }\r\n        return\r\n      }\r\n      for (const set of [...isolated, ...missing]) {\r\n        counts[set]++\r\n        result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\r\n        yield* check_free(i + 1)\r\n        counts[set]--\r\n      }\r\n      result[allSlotKeys[rainbows[i]]] = { kind: \"exclude\", sets: new Set([...missing, ...rejected, ...isolated]) }\r\n      yield* check_free(i + 1)\r\n    }\r\n    yield* check(0)\r\n  }\r\n  for (const shape of shapes) yield* check(shape)\r\n}\r\n\r\nexport type RequestFilter = StrictDict<SlotKey,\r\n  { kind: \"required\", sets: Set<ArtifactSetKey> } |\r\n  { kind: \"exclude\", sets: Set<ArtifactSetKey> } |\r\n  { kind: \"id\", ids: Set<string> }\r\n>\r\n\r\nexport type DynStat = { [key in string]: number }\r\nexport type ArtifactBuildData = {\r\n  id: string\r\n  set?: ArtifactSetKey\r\n  values: DynStat\r\n}\r\nexport type ArtifactsBySlot = { base: DynStat, values: StrictDict<SlotKey, ArtifactBuildData[]> }\r\n\r\nexport type PlotData = Dict<number, Build>\r\nexport interface Build {\r\n  value: number\r\n  plot?: number\r\n  artifactIds: string[]\r\n}\r\n\r\nexport type DynMinMax = { [key in string]: MinMax }\r\nexport type MinMax = { min: number, max: number }\r\n","import { Box } from \"@mui/material\"\r\nimport { getArtSheet } from \"../../Data/Artifacts\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport DocumentDisplay from \"../DocumentDisplay\"\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum,\r\n  hideHeader?: boolean,\r\n  conditionalsOnly?: boolean\r\n}\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, hideHeader = false, conditionalsOnly = false }: Data) {\r\n  const sheet = getArtSheet(setKey)\r\n\r\n  const document = conditionalsOnly ? sheet.setEffectDocument(setNumKey)?.filter(section => \"states\" in section) : sheet.setEffectDocument(setNumKey)\r\n  return <Box display=\"flex\" flexDirection=\"column\">\r\n    {document ? <DocumentDisplay sections={document} hideHeader={hideHeader} /> : null}\r\n  </Box>\r\n}\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../../../../Database/Database\";\r\nimport { BuildSetting } from \"../../../../Database/DataManagers/BuildSettingData\";\r\nimport { CharacterKey } from \"../../../../Types/consts\";\r\n\r\nexport default function useBuildSetting(characterKey: CharacterKey) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [buildSetting, setBuildSetting] = useState(() => database.buildSettings.get(characterKey))\r\n  useEffect(() => setBuildSetting(database.buildSettings.get(characterKey)), [database, characterKey])\r\n  useEffect(() =>\r\n    database.buildSettings.follow(characterKey, (k, r, v) => r === \"update\" && setBuildSetting(v)),\r\n    [characterKey, setBuildSetting, database])\r\n  const buildSettingDispatch = useCallback((action: Partial<BuildSetting>) => characterKey && database.buildSettings.set(characterKey, action), [characterKey, database],)\r\n\r\n  return { buildSetting: buildSetting as BuildSetting, buildSettingDispatch }\r\n}\r\n","import { allArtifactSets, allSlotKeys, ArtifactSetKey, SlotKey } from '@genshin-optimizer/consts';\nimport { CheckBox, CheckBoxOutlineBlank, Replay, Settings } from '@mui/icons-material';\nimport BlockIcon from '@mui/icons-material/Block';\nimport ShowChartIcon from '@mui/icons-material/ShowChart';\nimport StarRoundedIcon from '@mui/icons-material/StarRounded';\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, Stack, Typography } from '@mui/material';\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport SetEffectDisplay from '../../../../../Components/Artifact/SetEffectDisplay';\nimport SlotIcon from '../../../../../Components/Artifact/SlotIcon';\nimport CardDark from '../../../../../Components/Card/CardDark';\nimport CardLight from '../../../../../Components/Card/CardLight';\nimport CloseButton from '../../../../../Components/CloseButton';\nimport ColorText from '../../../../../Components/ColoredText';\nimport InfoTooltip, { InfoTooltipInline } from '../../../../../Components/InfoTooltip';\nimport ModalWrapper from '../../../../../Components/ModalWrapper';\nimport SqBadge from '../../../../../Components/SqBadge';\nimport { Translate } from '../../../../../Components/Translate';\nimport { CharacterContext } from '../../../../../Context/CharacterContext';\nimport { DataContext, dataContextObj } from '../../../../../Context/DataContext';\nimport { getArtSheet, setKeysByRarities } from '../../../../../Data/Artifacts';\nimport { artifactDefIcon } from '../../../../../Data/Artifacts/ArtifactSheet';\nimport { DatabaseContext } from '../../../../../Database/Database';\nimport { handleArtSetExclusion } from '../../../../../Database/DataManagers/BuildSettingData';\nimport { UIData } from '../../../../../Formula/uiData';\nimport { constant } from '../../../../../Formula/utils';\nimport useForceUpdate from '../../../../../ReactHooks/useForceUpdate';\nimport { iconInlineProps } from '../../../../../SVGIcons';\nimport { SetNum } from '../../../../../Types/consts';\nimport { deepClone, objectKeyMap } from '../../../../../Util/Util';\nimport useBuildSetting from '../useBuildSetting';\n\nexport default function ArtifactSetConfig({ disabled }: { disabled?: boolean, }) {\n  const { t } = useTranslation([\"page_character_optimize\", \"sheet\"])\n  const dataContext = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const { character: { key: characterKey, conditional }, characterDispatch } = useContext(CharacterContext)\n  const { buildSetting: { artSetExclusion }, buildSettingDispatch } = useBuildSetting(characterKey)\n  const [open, setOpen] = useState(false)\n  const onOpen = useCallback(() => setOpen(true), [setOpen])\n  const onClose = useCallback(() => setOpen(false), [setOpen])\n\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  useEffect(() => database.arts.followAny(forceUpdate), [database, forceUpdate])\n\n  const artKeysByRarity = useMemo(() => Object.entries(setKeysByRarities)\n    .reverse().flatMap(([, sets]) => sets)\n    .filter(key => !key.includes(\"Prayers\"))\n    , [])\n  const { artKeys, artSlotCount } = useMemo(() => {\n    const artSlotCount = objectKeyMap(artKeysByRarity, _ => objectKeyMap(allSlotKeys, _ => 0))\n    database.arts.values.forEach(art => artSlotCount[art.setKey] && artSlotCount[art.setKey][art.slotKey]++)\n    const artKeys = [...artKeysByRarity].sort((a, b) =>\n      +(getNumSlots(artSlotCount[a]) < 2) - +(getNumSlots(artSlotCount[b]) < 2))\n    return dbDirty && { artKeys, artSlotCount }\n  }, [dbDirty, database, artKeysByRarity])\n\n  const allowRainbow2 = !artSetExclusion.rainbow?.includes(2)\n  const allowRainbow4 = !artSetExclusion.rainbow?.includes(4)\n\n  const { allow2, allow4 } = useMemo(() => ({\n    allow2: artKeysByRarity.filter(k => !artSetExclusion[k]?.includes(2)).length,\n    allow4: artKeysByRarity.filter(k => !artSetExclusion[k]?.includes(4)).length,\n  }), [artKeysByRarity, artSetExclusion])\n  const exclude2 = artKeysByRarity.length - allow2, exclude4 = artKeysByRarity.length - allow4\n  const artifactCondCount = useMemo(() =>\n    (Object.keys(conditional)).filter(k =>\n      allArtifactSets.includes(k as ArtifactSetKey) && conditional[k]).length\n    , [conditional])\n  const fakeDataContextObj = useMemo(() => ({\n    ...dataContext,\n    data: new UIData({ ...dataContext.data.data[0], artSet: objectKeyMap(allArtifactSets, _ => constant(4)) }, undefined)\n  }), [dataContext])\n  const resetArtConds = useCallback(() => {\n    const tconditional = Object.fromEntries(Object.entries(conditional).filter(([k, v]) => !allArtifactSets.includes(k as any)))\n    characterDispatch({ conditional: tconditional })\n  }, [conditional, characterDispatch]);\n  const setAllExclusion = useCallback(\n    (setnum: number, exclude = true) => {\n      const artSetExclusion_ = deepClone(artSetExclusion)\n      artKeysByRarity.forEach(k => {\n        if (exclude) artSetExclusion_[k] = [...(artSetExclusion_[k] ?? []), setnum];\n        else if (artSetExclusion_[k]) artSetExclusion_[k] = artSetExclusion_[k].filter(n => n !== setnum);\n      })\n      buildSettingDispatch({ artSetExclusion: artSetExclusion_ })\n    },\n    [artKeysByRarity, artSetExclusion, buildSettingDispatch],\n  )\n\n  return <>\n    <CardLight sx={{ display: \"flex\" }}>\n      <CardContent sx={{ flexGrow: 1 }} >\n        <Typography>\n          <strong>{t`artSetConfig.title`}</strong>\n        </Typography>\n        <Stack spacing={1}>\n          <Typography>{t`artSetConfig.setEffCond`} <SqBadge color={artifactCondCount ? \"success\" : \"warning\"}>{artifactCondCount} {t(\"artSetConfig.enabled\")}</SqBadge></Typography>\n          <Typography>{t`sheet:2set`} <SqBadge color=\"success\">{allow2} <ShowChartIcon {...iconInlineProps} /> {t(\"artSetConfig.allowed\")}</SqBadge>{!!exclude2 && \" / \"}{!!exclude2 && <SqBadge color=\"secondary\">{exclude2} <BlockIcon {...iconInlineProps} /> {t(\"artSetConfig.excluded\")}</SqBadge>}</Typography>\n          <Typography>{t`sheet:4set`} <SqBadge color=\"success\">{allow4} <ShowChartIcon {...iconInlineProps} /> {t(\"artSetConfig.allowed\")}</SqBadge>{!!exclude4 && \" / \"}{!!exclude4 && <SqBadge color=\"secondary\">{exclude4} <BlockIcon {...iconInlineProps} /> {t(\"artSetConfig.excluded\")}</SqBadge>}</Typography>\n          <Typography>{t`artSetConfig.2rainbow`} <SqBadge color={allowRainbow2 ? \"success\" : \"secondary\"}>{allowRainbow2 ? <ShowChartIcon  {...iconInlineProps} /> : <BlockIcon {...iconInlineProps} />} {allowRainbow2 ? t(\"artSetConfig.allowed\") : \"Excluded\"}</SqBadge></Typography>\n          <Typography>{t`artSetConfig.4rainbow`} <SqBadge color={allowRainbow4 ? \"success\" : \"secondary\"}>{allowRainbow4 ? <ShowChartIcon  {...iconInlineProps} /> : <BlockIcon {...iconInlineProps} />} {allowRainbow4 ? t(\"artSetConfig.allowed\") : \"Excluded\"}</SqBadge></Typography>\n        </Stack>\n\n      </CardContent>\n      <Button onClick={onOpen} disabled={disabled} color=\"info\" sx={{ borderRadius: 0 }}>\n        <Settings />\n      </Button>\n    </CardLight>\n    <ModalWrapper open={open} onClose={onClose} ><CardDark>\n      <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\n        <Typography variant=\"h6\" >{t`artSetConfig.title`}</Typography>\n        <CloseButton onClick={onClose} />\n      </CardContent>\n      <Divider />\n      <CardContent >\n        <CardLight sx={{ mb: 1 }}><CardContent>\n          <Box display=\"flex\" gap={1}>\n            <Typography><strong>{t`artSetConfig.modal.setCond.title`}</strong></Typography>\n            <Typography sx={{ flexGrow: 1 }}><SqBadge color={artifactCondCount ? \"success\" : \"warning\"}>{artifactCondCount} {t(\"artSetConfig.selected\")}</SqBadge></Typography>\n            <Button size='small' onClick={resetArtConds} color=\"error\" startIcon={<Replay />}>{t`artSetConfig.modal.setCond.reset`}</Button>\n          </Box>\n          <Typography>{t`artSetConfig.modal.setCond.text`}</Typography>\n        </CardContent></CardLight>\n        <CardLight sx={{ mb: 1 }}><CardContent>\n          <Typography sx={{ flexGrow: 1 }}><strong>\n            <Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.title\" >Artifact Sets <ColorText color='success'>Allowed<ShowChartIcon  {...iconInlineProps} /></ColorText> / <ColorText color='secondary' variant='light'>Excluded<BlockIcon {...iconInlineProps} /></ColorText></Trans>\n          </strong></Typography>\n          <Typography><Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.intro\">You can allow/exclude which sets you want the builder to consider. In the following examples, <strong>A</strong> is on-set, and <strong>R</strong> is rainbow(off-set)</Trans></Typography>\n          <Typography><Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.2set\"><strong><ColorText color='secondary' variant='light'>Excluding<BlockIcon {...iconInlineProps} /> 2-Set</ColorText></strong> would exclude 2-Set builds: <strong><ColorText color='secondary' variant='light'>AA</ColorText>RRR</strong> and <strong><ColorText color='secondary' variant='light'>AAA</ColorText>RR</strong>.</Trans></Typography>\n          <Typography><Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.4set\"><strong><ColorText color='secondary' variant='light'>Excluding<BlockIcon {...iconInlineProps} /> 4-Set</ColorText></strong> would exclude 4-Set builds: <strong><ColorText color='secondary' variant='light'>AAAA</ColorText>R</strong> and <strong><ColorText color='secondary' variant='light'>AAAAA</ColorText></strong>.</Trans></Typography>\n          <Typography><Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.2rain\"><strong><ColorText color='secondary' variant='light'>Excluding<BlockIcon {...iconInlineProps} /> 3-Rainbow</ColorText></strong> would exclude 2-Set + 3-Rainbow builds: <strong>AA<ColorText color='secondary' variant='light'>RRR</ColorText></strong> and <strong>AAA<ColorText color='secondary' variant='light'>RR</ColorText></strong>.</Trans></Typography>\n          <Typography><Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.4rain\"><strong><ColorText color='secondary' variant='light'>Excluding<BlockIcon {...iconInlineProps} /> 5-Rainbow</ColorText></strong> would exclude full 5-Rainbow builds: <strong><ColorText color='secondary' variant='light'>RRRRR</ColorText></strong>.</Trans></Typography>\n        </CardContent></CardLight>\n        <Grid container columns={{ xs: 2, lg: 3 }} sx={{ mb: 1 }} spacing={1}>\n          <Grid item xs={1}>\n            <AllSetAllowExcludeCard setNum={2} numAllow={allow2} numExclude={exclude2} setAllExclusion={setAllExclusion} />\n          </Grid>\n          <Grid item xs={1}>\n            <AllSetAllowExcludeCard setNum={4} numAllow={allow4} numExclude={exclude4} setAllExclusion={setAllExclusion} />\n          </Grid>\n          <Grid item xs={1}>\n            <CardLight>\n              <CardContent>\n                <Typography gutterBottom><strong><Trans t={t} i18nKey=\"artSetConfig.alExRainbow\"><ColorText color='success'>Allow <ShowChartIcon  {...iconInlineProps} /></ColorText> / <ColorText color='secondary' variant='light'>Exclude <BlockIcon {...iconInlineProps} /></ColorText> Rainbow Builds</Trans></strong></Typography>\n                <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n                  <Button fullWidth onClick={() => buildSettingDispatch({ artSetExclusion: handleArtSetExclusion(artSetExclusion, \"rainbow\", 2) })} color={allowRainbow2 ? \"success\" : \"secondary\"} startIcon={!allowRainbow2 ? <CheckBoxOutlineBlank /> : <CheckBox />} endIcon={allowRainbow2 ? <ShowChartIcon /> : <BlockIcon />}>{t`artSetConfig.2rainbow`}</Button>\n                  <Button fullWidth onClick={() => buildSettingDispatch({ artSetExclusion: handleArtSetExclusion(artSetExclusion, \"rainbow\", 4) })} color={allowRainbow4 ? \"success\" : \"secondary\"} startIcon={!allowRainbow4 ? <CheckBoxOutlineBlank /> : <CheckBox />} endIcon={allowRainbow4 ? <ShowChartIcon /> : <BlockIcon />}>{t`artSetConfig.4rainbow`}</Button>\n                </Box>\n              </CardContent>\n            </CardLight>\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} columns={{ xs: 2, lg: 3 }}>\n          {artKeys.map(setKey => <ArtifactSetCard key={setKey} setKey={setKey} fakeDataContextObj={fakeDataContextObj} slotCount={artSlotCount[setKey]} />)}\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <CloseButton large onClick={onClose} />\n      </CardContent>\n    </CardDark></ModalWrapper >\n  </>\n}\nfunction AllSetAllowExcludeCard({ numAllow, numExclude, setNum, setAllExclusion }: { numAllow: number, numExclude: number, setNum: 2 | 4, setAllExclusion: (setNum: 2 | 4, exclude?: boolean) => void }) {\n  const { t } = useTranslation([\"page_character_optimize\", \"sheet\"])\n  return <CardLight>\n    <CardContent>\n      <Typography gutterBottom><strong>{t(`sheet:${setNum}set`)}</strong> <SqBadge color=\"success\">{numAllow} <ShowChartIcon  {...iconInlineProps} /> {t(\"artSetConfig.allowed\")}</SqBadge>{!!numExclude && \" / \"}{!!numExclude && <SqBadge color=\"secondary\">{numExclude} <BlockIcon {...iconInlineProps} /> {t(\"artSetConfig.excluded\")}</SqBadge>}</Typography>\n      <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n        <Button fullWidth disabled={!numExclude} onClick={() => setAllExclusion(setNum, false)} color='success' startIcon={<ShowChartIcon />}>{t(`artSetConfig.allowAll${setNum}set`)}</Button>\n        <Button fullWidth disabled={!numAllow} onClick={() => setAllExclusion(setNum, true)} color='secondary' startIcon={<BlockIcon />}>{t(`artSetConfig.excludeAll${setNum}set`)}</Button>\n      </Box>\n    </CardContent>\n  </CardLight>\n}\nfunction ArtifactSetCard({ setKey, fakeDataContextObj, slotCount }: { setKey: ArtifactSetKey, fakeDataContextObj: dataContextObj, slotCount: Record<SlotKey, number> }) {\n  const { t } = useTranslation(\"sheet\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { buildSetting, buildSettingDispatch } = useBuildSetting(characterKey)\n  const { artSetExclusion } = buildSetting\n  const setExclusionSet = artSetExclusion?.[setKey] ?? []\n  const allow4 = !setExclusionSet.includes(4)\n  const slots = getNumSlots(slotCount)\n  const sheet = getArtSheet(setKey)\n  /* Assumes that all conditionals are from 4-Set. needs to change if there are 2-Set conditionals */\n  const set4CondNums = useMemo(() => {\n    if (!allow4) return []\n    return Object.keys(sheet.setEffects).filter(setNumKey => sheet.setEffects[setNumKey]?.document.some(doc => \"states\" in doc))\n  }, [sheet.setEffects, allow4])\n  const exclude2 = setExclusionSet.includes(2)\n  const exclude4 = setExclusionSet.includes(4)\n  return <Grid item key={setKey} xs={1}>\n    <CardLight sx={{ height: \"100%\", opacity: slots < 2 ? \"50%\" : undefined }}>\n      <Box className={`grad-${sheet.rarity[0]}star`} width=\"100%\" sx={{ display: \"flex\" }} >\n        <Box component=\"img\" src={artifactDefIcon(setKey)} sx={{ height: 100, width: \"auto\", mx: -1 }} />\n        <Box sx={{ flexGrow: 1, px: 1, display: \"flex\", flexDirection: \"column\", justifyContent: \"center\" }}>\n          <Typography variant=\"h6\">{sheet.name ?? \"\"}</Typography>\n          <Box >\n            {/* If there is ever a 2-Set conditional, we will need to change this */}\n            <Typography variant=\"subtitle1\">\n              {sheet.rarity.map((ns, i) => <Box component=\"span\" sx={{ display: \"inline-flex\", alignItems: \"center\" }} key={ns}>{ns} <StarRoundedIcon fontSize='inherit' /> {i < (sheet.rarity.length - 1) ? \"/ \" : null}</Box>)}\n              {' '}\n              <InfoTooltipInline title={<Box>\n                <Typography><SqBadge color=\"success\">{t`2set`}</SqBadge></Typography>\n                <Typography><Translate ns={`artifact_${setKey}_gen`} key18={\"setEffects.2\"} /></Typography>\n                <Box paddingTop={2} sx={{ opacity: setExclusionSet.includes(4) ? 0.6 : 1 }} >\n                  <Typography><SqBadge color=\"success\">{t`4set`}</SqBadge></Typography>\n                  <Typography><Translate ns={`artifact_${setKey}_gen`} key18={\"setEffects.4\"} /></Typography>\n                </Box>\n              </Box>} />\n            </Typography>\n          </Box>\n          <Box sx={{ display: \"flex\", gap: 1 }}>{Object.entries(slotCount).map(([slotKey, count]) => <Typography key={slotKey} sx={{ flexGrow: 1 }} variant=\"subtitle2\" ><SqBadge sx={{ width: \"100%\" }} color={count ? \"primary\" : \"secondary\"}><SlotIcon slotKey={slotKey} iconProps={iconInlineProps} /> {count}</SqBadge></Typography>)}</Box>\n        </Box>\n      </Box>\n      <ButtonGroup sx={{ \".MuiButton-root\": { borderRadius: 0 } }} fullWidth>\n        <Button startIcon={exclude2 ? <CheckBoxOutlineBlank /> : <CheckBox />} onClick={() => buildSettingDispatch({ artSetExclusion: handleArtSetExclusion(artSetExclusion, setKey, 2) })} color={exclude2 ? 'secondary' : 'success'} endIcon={exclude2 ? <BlockIcon /> : <ShowChartIcon />}>{t`2set`}</Button>\n        <Button startIcon={exclude4 ? <CheckBoxOutlineBlank /> : <CheckBox />} onClick={() => buildSettingDispatch({ artSetExclusion: handleArtSetExclusion(artSetExclusion, setKey, 4) })} color={exclude4 ? 'secondary' : 'success'} endIcon={exclude4 ? <BlockIcon /> : <ShowChartIcon />}>{t`4set`}</Button>\n      </ButtonGroup>\n\n      {!!set4CondNums.length && <DataContext.Provider value={fakeDataContextObj}>\n        <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n          {set4CondNums.map(setNumKey =>\n            <SetEffectDisplay key={setNumKey} setKey={setKey} setNumKey={parseInt(setNumKey) as SetNum} hideHeader conditionalsOnly />\n          )}\n        </CardContent>\n      </DataContext.Provider>}\n    </CardLight>\n  </Grid >\n}\n\nfunction getNumSlots(slotCount: Record<string, number>): number {\n  return Object.values(slotCount).reduce((tot, v) => tot + (v ? 1 : 0), 0)\n}\n","import { MenuItem } from \"@mui/material\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport DropdownButton from \"../../../../../Components/DropdownMenu/DropdownButton\"\r\n\r\nconst levels = [0, 4, 8, 12, 16, 20] as const\r\nexport default function AssumeFullLevelToggle({ mainStatAssumptionLevel = 0, setmainStatAssumptionLevel, disabled }) {\r\n  const { t } = useTranslation(\"page_character_optimize\")\r\n  return <DropdownButton fullWidth color={mainStatAssumptionLevel ? \"success\" : \"primary\"} disabled={disabled}\r\n    title={mainStatAssumptionLevel ? t(\"mainStat.assumptionLvl.lvl\", { lvl: mainStatAssumptionLevel }) : t(\"mainStat.assumptionLvl.no\")}>\r\n    {levels.map((lvl) => <MenuItem key={lvl} onClick={() => setmainStatAssumptionLevel(lvl)}>{lvl ? t(\"mainStat.assumptionLvl.lvl\", { lvl }) : t(\"mainStat.assumptionLvl.no\")}</MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { CardContent, Divider, Typography } from '@mui/material';\r\nimport { useContext } from 'react';\r\nimport { CharacterContext } from '../../../../../Context/CharacterContext';\r\nimport CardLight from '../../../../../Components/Card/CardLight';\r\nimport { NodeFieldDisplay } from '../../../../../Components/FieldDisplay';\r\nimport { DataContext } from '../../../../../Context/DataContext';\r\nimport { uiInput as input } from '../../../../../Formula';\r\nimport { NumNode } from '../../../../../Formula/type';\r\nexport default function BonusStatsCard() {\r\n  const { character: { bonusStats } } = useContext(CharacterContext)\r\n  const { data } = useContext(DataContext)\r\n  const bonusStatsKeys = Object.keys(bonusStats)\r\n  if (!bonusStatsKeys.length) return null\r\n  const nodes = bonusStatsKeys.map(k => data.get(input.customBonus[k] as NumNode))\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Typography>Bonus Stats</Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      {nodes.map(n => <NodeFieldDisplay key={JSON.stringify(n.info)} node={n} />)}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { Alert, Grid, LinearProgress, styled, Typography } from '@mui/material';\r\nimport { ReactNode } from 'react';\r\nimport { timeStringMs } from '../../../../../Util/TimeUtil';\r\n\r\nexport const warningBuildNumber = 10000000\r\nexport type BuildStatus = {\r\n  type: \"active\" | \"inactive\"\r\n  tested: number      // tested, including `failed`\r\n  failed: number      // tested but fail the filter criteria, e.g., not enough EM\r\n  skipped: number\r\n  total: number\r\n  startTime?: number\r\n  finishTime?: number\r\n}\r\n\r\nconst Monospace = styled(\"strong\")({\r\n  fontFamily: \"monospace\"\r\n})\r\n\r\nconst BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({\r\n  height: 10,\r\n  borderRadius: 5,\r\n}));\r\nexport default function BuildAlert({ status: { type, tested, failed, skipped, total, startTime, finishTime }, characterName }: { status: BuildStatus, characterName: Displayable }) {\r\n  const hasTotal = isFinite(total)\r\n\r\n  const generatingBuilds = type !== \"inactive\"\r\n  const unskipped = total - skipped\r\n\r\n  const testedString = <Monospace>{tested.toLocaleString()}</Monospace>\r\n  const unskippedString = <Monospace>{unskipped.toLocaleString()}</Monospace>\r\n  const skippedText = !!skipped && <span>(<b>{<Monospace>{skipped.toLocaleString()}</Monospace>}</b> skipped)</span>\r\n\r\n  const durationString = <Monospace>{timeStringMs(Math.round((finishTime ?? performance.now()) - (startTime ?? NaN)))}</Monospace>\r\n\r\n  const color = \"success\" as \"success\" | \"warning\" | \"error\"\r\n  let title = \"\" as ReactNode\r\n  let subtitle = \"\" as ReactNode\r\n  let progress = undefined as undefined | number\r\n\r\n  if (generatingBuilds) {\r\n    progress = tested * 100 / (unskipped)\r\n    title = <Typography>Generating and testing {testedString}{hasTotal ? <>/{unskippedString}</> : undefined} build configurations against the criteria for <b>{characterName}</b>. {skippedText}</Typography>\r\n    subtitle = <Typography>Time elapsed: {durationString}</Typography>\r\n  } else if (tested + skipped) {\r\n    progress = 100\r\n    title = <Typography>Generated and tested {testedString} Build configurations against the criteria for <b>{characterName}</b>. {skippedText}</Typography>\r\n    subtitle = <Typography>Total duration: {durationString}</Typography>\r\n  } else {\r\n    return null\r\n  }\r\n\r\n  return <Alert severity={color} variant=\"filled\" sx={{\r\n    \"& .MuiAlert-message\": {\r\n      flexGrow: 1\r\n    }\r\n  }}>\r\n    {title}\r\n    {subtitle}\r\n    {progress !== undefined && <Grid container spacing={1} alignItems=\"center\">\r\n      {hasTotal && <Grid item>\r\n        <Typography>{`${progress.toFixed(1)}%`}</Typography>\r\n      </Grid>}\r\n      <Grid item flexGrow={1} >\r\n        <BorderLinearProgress variant={hasTotal ? \"determinate\" : \"indeterminate\"} value={progress} color=\"primary\" />\r\n      </Grid>\r\n    </Grid>}\r\n  </Alert>\r\n}\r\n","import { artifactAsset } from \"@genshin-optimizer/g-assets\";\nimport { BusinessCenter } from \"@mui/icons-material\";\nimport { alpha, Box, CardActionArea, Chip, Typography, useTheme } from \"@mui/material\";\nimport { useCallback, useContext } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport Artifact from \"../../Data/Artifacts/Artifact\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport KeyMap, { cacheValueString } from \"../../KeyMap\";\nimport StatIcon from \"../../KeyMap/StatIcon\";\nimport useArtifact from \"../../ReactHooks/useArtifact\";\nimport { ICachedSubstat } from \"../../Types/artifact\";\nimport { allElementsWithPhy, SlotKey } from \"@genshin-optimizer/consts\";\nimport { clamp } from \"../../Util/Util\";\nimport BootstrapTooltip from \"../BootstrapTooltip\";\nimport CardDark from \"../Card/CardDark\";\nimport LocationIcon from \"../Character/LocationIcon\";\nimport ColorText from \"../ColoredText\";\nimport ConditionalWrapper from \"../ConditionalWrapper\";\nimport { StatColoredWithUnit } from \"../StatDisplay\";\nimport ArtifactTooltip from \"./ArtifactTooltip\";\n\ntype Data = {\n  artifactId?: string,\n  slotKey: SlotKey,\n  mainStatAssumptionLevel?: number,\n  onClick?: () => void,\n  showLocation?: boolean,\n  BGComponent?: React.ElementType\n}\n\nexport default function ArtifactCardNano({ artifactId, slotKey: pSlotKey, mainStatAssumptionLevel = 0, showLocation = false, onClick, BGComponent = CardDark }: Data) {\n  const art = useArtifact(artifactId)\n  const { database } = useContext(DatabaseContext)\n  const actionWrapperFunc = useCallback(children => <CardActionArea onClick={onClick} sx={{ height: \"100%\" }}>{children}</CardActionArea>, [onClick],)\n  const theme = useTheme()\n  if (!art) return <BGComponent sx={{ display: \"flex\", height: \"100%\", alignItems: \"center\", justifyContent: \"center\" }}>\n    <Box component=\"img\" src={Assets.slot[pSlotKey]} sx={{ width: \"25%\", height: \"auto\", opacity: 0.7 }} />\n  </BGComponent>\n\n  const { slotKey, rarity, level, mainStatKey, substats, location } = art\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\n  const mainStatUnit = KeyMap.unit(mainStatKey)\n  const element = allElementsWithPhy.find(ele => art.mainStatKey.includes(ele))\n  const color = element ? alpha(theme.palette[element].main, 0.6) : alpha(theme.palette.secondary.main, 0.6)\n  return <BGComponent sx={{ height: \"100%\" }}><ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}  >\n    <Box display=\"flex\" height=\"100%\">\n      <Box className={`grad-${rarity}star`} sx={{ position: \"relative\", flexGrow: 1, display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\" }} >\n        <ArtifactTooltip art={art}>\n          <Box\n            component=\"img\"\n            src={artifactAsset(art.setKey, slotKey)}\n            sx={{ m: -1, maxHeight: \"110%\", maxWidth: \"110%\" }}\n          />\n        </ArtifactTooltip>\n        <Box sx={{ position: \"absolute\", width: \"100%\", height: \"100%\", p: 0.5, opacity: 0.85, display: \"flex\", justifyContent: \"space-between\", pointerEvents: \"none\" }} >\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={Artifact.levelVariant(level)} />\n          {showLocation && <Chip size=\"small\" label={location ? <LocationIcon characterKey={location && database.chars.LocationToCharacterKey(location)} /> : <BusinessCenter />} color={\"secondary\"} sx={{\n            overflow: \"visible\", \".MuiChip-label\": {\n              overflow: \"visible\"\n            }\n          }} />}\n        </Box>\n        {/* mainstats */}\n        <Chip size=\"small\" sx={{ position: \"absolute\", bottom: 0, mb: 1, backgroundColor: color }}\n          label={<Typography sx={{ display: \"flex\", gap: 0.5, px: 1, zIndex: 1 }}>\n            <BootstrapTooltip placement=\"top\" title={<Typography><StatColoredWithUnit statKey={mainStatKey} /></Typography>} disableInteractive>\n              <StatIcon statKey={mainStatKey} />\n            </BootstrapTooltip>\n            <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}{mainStatUnit}</ColorText>\n          </Typography>} />\n      </Box>\n      {/* substats */}\n      <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" sx={{ p: 1, }}>\n        {substats.map((stat: ICachedSubstat, i: number) => <SubstatDisplay key={i + stat.key} stat={stat} />)}\n      </Box>\n    </Box>\n  </ConditionalWrapper></BGComponent >\n}\nfunction SubstatDisplay({ stat }: { stat: ICachedSubstat }) {\n  if (!stat.value) return null\n  const numRolls = stat.rolls?.length ?? 0\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\n  const unit = KeyMap.unit(stat.key)\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\n    <Typography sx={{ flexGrow: 1, display: \"flex\", gap: 0.5, alignItems:\"center\" }} color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">\n      <BootstrapTooltip placement=\"top\" title={<Typography>{stat.key && <StatColoredWithUnit statKey={stat.key} />}</Typography>} disableInteractive>\n        <StatIcon statKey={stat.key} iconProps={{ fontSize: \"inherit\" }} />\n      </BootstrapTooltip>\n      <span>{`${cacheValueString(stat.value, KeyMap.unit(stat.key))}${unit}`}</span>\n    </Typography>\n  </Box>)\n}\n","import { Masonry } from \"@mui/lab\"\nimport { Box, Divider, ListItem } from \"@mui/material\"\nimport { useContext, useMemo } from \"react\"\nimport { DataContext } from \"../../Context/DataContext\"\nimport { OptimizationTargetContext } from \"../../Context/OptimizationTargetContext\"\nimport { DatabaseContext } from \"../../Database/Database\"\nimport { getDisplayHeader, getDisplaySections } from \"../../Formula/DisplayUtil\"\nimport { DisplaySub } from \"../../Formula/type\"\nimport { NodeDisplay } from \"../../Formula/uiData\"\nimport { customRead } from \"../../Formula/utils\"\nimport { objectMap } from \"../../Util/Util\"\nimport CardDark from \"../Card/CardDark\"\nimport CardHeaderCustom from \"../Card/CardHeaderCustom\"\nimport { FieldDisplayList, NodeFieldDisplay } from \"../FieldDisplay\"\nimport ImgIcon from \"../Image/ImgIcon\"\nimport SqBadge from \"../SqBadge\"\n\nexport default function StatDisplayComponent() {\n  const { data } = useContext(DataContext)\n  const sections = useMemo(() =>\n    getDisplaySections(data).filter(([, ns]) => Object.values(ns).some(n => !n.isEmpty)),\n    [data])\n  return <Box sx={{ mr: -1, mb: -1 }}>\n    <Masonry columns={{ xs: 1, sm: 2, md: 3, xl: 4 }} spacing={1}>\n      {sections.map(([key, Nodes]) =>\n        <Section key={key} displayNs={Nodes} sectionKey={key} />)}\n    </Masonry >\n  </Box>\n}\n\nfunction Section({ displayNs, sectionKey }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\n  const optimizationTarget = useContext(OptimizationTargetContext)\n  const { data, oldData } = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const header = useMemo(() => getDisplayHeader(data, sectionKey, database), [database, data, sectionKey])\n  const displayNsReads = useMemo(() => objectMap(displayNs, (n, nodeKey) => customRead([\"display\", sectionKey, nodeKey])), [displayNs, sectionKey]);\n  if (!header) return <CardDark></CardDark>\n\n  const { title, icon, action } = header\n  return <CardDark >\n    <CardHeaderCustom avatar={icon && <ImgIcon size={2} src={icon} />} title={title} action={action && <SqBadge>{action}</SqBadge>} />\n    <Divider />\n    <FieldDisplayList sx={{ m: 0 }}>\n      {Object.entries(displayNs).map(([nodeKey, n]) =>\n        <NodeFieldDisplay key={nodeKey} node={n} oldValue={oldData ? oldData.get(displayNsReads[nodeKey]!).value : undefined} component={ListItem}\n          emphasize={JSON.stringify(optimizationTarget) === JSON.stringify([sectionKey, nodeKey])}\n        />)}\n    </FieldDisplayList>\n  </CardDark>\n}\n","import { weaponAsset } from \"@genshin-optimizer/g-assets\";\nimport { BusinessCenter } from \"@mui/icons-material\";\nimport { Box, CardActionArea, Chip, Skeleton, Typography } from \"@mui/material\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport { getWeaponSheet } from \"../../Data/Weapons\";\nimport WeaponSheet from \"../../Data/Weapons/WeaponSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport { input } from \"../../Formula\";\nimport { computeUIData, dataObjForWeapon } from \"../../Formula/api\";\nimport { NodeDisplay, nodeVStr } from '../../Formula/uiData';\nimport useWeapon from \"../../ReactHooks/useWeapon\";\nimport BootstrapTooltip from \"../BootstrapTooltip\";\nimport CardDark from \"../Card/CardDark\";\nimport LocationIcon from \"../Character/LocationIcon\";\nimport ConditionalWrapper from \"../ConditionalWrapper\";\nimport WeaponNameTooltip from \"./WeaponNameTooltip\";\n\ntype Data = {\n  weaponId?: string,\n  onClick?: () => void,\n  showLocation?: boolean,\n  BGComponent?: React.ElementType,\n}\n\nexport default function WeaponCardNano({ weaponId, showLocation = false, onClick, BGComponent = CardDark, }: Data) {\n  const { database } = useContext(DatabaseContext)\n  const weapon = useWeapon(weaponId)\n  const weaponSheet = weapon?.key && getWeaponSheet(weapon.key)\n  const actionWrapperFunc = useCallback(children => <CardActionArea sx={{ height: \"100%\" }} onClick={onClick}>{children}</CardActionArea>, [onClick],)\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n  if (!weapon || !weaponSheet || !UIData) return <BGComponent sx={{ height: \"100%\" }}><Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\" }} /></BGComponent>;\n  const { refinement, location } = weapon\n  return <BGComponent sx={{ height: \"100%\" }}><ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}  >\n    <Box display=\"flex\" height=\"100%\" alignItems=\"stretch\" >\n      <Box className={`grad-${weaponSheet.rarity}star`} sx={{ height: \"100%\", position: \"relative\", flexGrow: 1, display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"flex-end\" }} >\n        <WeaponNameTooltip sheet={weaponSheet}>\n          <Box\n            component=\"img\"\n            src={weaponAsset(weapon.key, weapon.ascension >= 2)}\n            sx={{ mx: -1, maxHeight: \"100%\", maxWidth: \"100%\" }}\n          />\n        </WeaponNameTooltip>\n        <Box sx={{ position: \"absolute\", width: \"100%\", height: \"100%\", p: 0.5, opacity: 0.85, display: \"flex\", justifyContent: \"space-between\", pointerEvents: \"none\" }} >\n          <Chip size=\"small\" label={<strong>{WeaponSheet.getLevelString(weapon)}</strong>} color=\"primary\" />\n          {showLocation && <Chip size=\"small\" label={location ? <LocationIcon characterKey={database.chars.LocationToCharacterKey(location)} /> : <BusinessCenter />} color={\"secondary\"} sx={{\n            overflow: \"visible\", \".MuiChip-label\": {\n              overflow: \"visible\"\n            }\n          }} />}\n        </Box>\n        <Box sx={{ position: \"absolute\", width: \"100%\", height: \"100%\", p: 0.5, opacity: 0.85, display: \"flex\", justifyContent: \"flex-end\", alignItems: \"flex-end\" }} >\n          {weaponSheet.hasRefinement && <Chip size=\"small\" color=\"info\" label={<strong>R{refinement}</strong>} />}\n        </Box>\n      </Box>\n      <Box display=\"flex\" flexDirection=\"column\" sx={{ p: 1, }}>\n        <WeaponStat node={UIData.get(input.weapon.main)} />\n        <WeaponStat node={UIData.get(input.weapon.sub)} />\n      </Box>\n    </Box>\n  </ConditionalWrapper></BGComponent >\n}\nfunction WeaponStat({ node }: { node: NodeDisplay }) {\n  if (!node.info.name) return null\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\n    <Typography sx={{ flexGrow: 1, display: \"flex\", gap: 1 }} component=\"span\">\n      <BootstrapTooltip placement=\"top\" title={<Typography>{node.info.name}</Typography>} disableInteractive>\n        <span>{node.info.icon}</span>\n      </BootstrapTooltip>\n      <span>{nodeVStr(node)}</span>\n    </Typography>\n  </Box>)\n}\n","import { ArtifactSetKey, SlotKey } from \"@genshin-optimizer/consts\"\nimport { Box, Typography } from \"@mui/material\"\nimport { useMemo } from \"react\"\nimport ArtifactSetTooltip from \"../../../../../Components/Artifact/ArtifactSetTooltip\"\nimport SlotIcon from \"../../../../../Components/Artifact/SlotIcon\"\nimport SqBadge from \"../../../../../Components/SqBadge\"\nimport { getArtSheet } from \"../../../../../Data/Artifacts\"\nimport { iconInlineProps } from \"../../../../../SVGIcons\"\nimport { ICachedArtifact } from \"../../../../../Types/artifact\"\n\ntype ArtifactSetBadgesProps = {\n  artifacts: ICachedArtifact[],\n  currentlyEquipped?: boolean\n}\nexport function ArtifactSetBadges({ artifacts, currentlyEquipped = false }: ArtifactSetBadgesProps) {\n  const setToSlots: Partial<Record<ArtifactSetKey, SlotKey[]>> = useMemo(() => artifacts\n    .filter(arti => arti)\n    .reduce((acc, curr) => {\n      acc[curr.setKey] ? acc[curr.setKey].push(curr.slotKey) : acc[curr.setKey] = [curr.slotKey]\n      return acc\n    }, {}),\n    [artifacts]\n  )\n  return <>{Object.entries(setToSlots)\n    .sort(([_k1, slotarr1], [_k2, slotarr2]) => slotarr2.length - slotarr1.length)\n    .map(([key, slotarr]) =>\n      <ArtifactSetBadge key={key} setKey={key} currentlyEquipped={currentlyEquipped} slotarr={slotarr} />\n    )\n  }</>\n\n}\nfunction ArtifactSetBadge({ setKey, currentlyEquipped = false, slotarr }: { setKey: ArtifactSetKey, currentlyEquipped: boolean, slotarr: SlotKey[] }) {\n  const artifactSheet = getArtSheet(setKey)\n  const numInSet = slotarr.length\n  const setActive = Object.keys(artifactSheet.setEffects).map((setKey) => parseInt(setKey)).filter(setNum => setNum <= numInSet)\n  return <Box>\n    <ArtifactSetTooltip artifactSheet={artifactSheet} numInSet={numInSet} >\n      <SqBadge sx={{ height: \"100%\" }} color={currentlyEquipped ? \"success\" : \"primary\"} ><Typography >\n        {slotarr.map(slotKey => <SlotIcon key={slotKey} slotKey={slotKey} iconProps={iconInlineProps} />)} {artifactSheet.name ?? \"\"}\n        {setActive.map((n, i) => <SqBadge sx={{ ml: 0.5 }} key={\"\" + n + i} color=\"success\">{n}</SqBadge>)}\n      </Typography></SqBadge>\n    </ArtifactSetTooltip>\n  </Box>\n}\n","import { Checkroom, ChevronRight } from '@mui/icons-material';\nimport { Button, CardContent, Grid, Skeleton, Typography, Box } from '@mui/material';\nimport { Suspense, useCallback, useContext, useMemo, useState } from 'react';\nimport ArtifactCardNano from '../../../../../Components/Artifact/ArtifactCardNano';\nimport CardDark from '../../../../../Components/Card/CardDark';\nimport CardLight from '../../../../../Components/Card/CardLight';\nimport StatDisplayComponent from '../../../../../Components/Character/StatDisplayComponent';\nimport ModalWrapper from '../../../../../Components/ModalWrapper';\nimport SqBadge from '../../../../../Components/SqBadge';\nimport WeaponCardNano from '../../../../../Components/Weapon/WeaponCardNano';\nimport { CharacterContext } from '../../../../../Context/CharacterContext';\nimport { DataContext } from '../../../../../Context/DataContext';\nimport { DatabaseContext } from '../../../../../Database/Database';\nimport { uiInput as input } from '../../../../../Formula';\nimport ArtifactCard from '../../../../../PageArtifact/ArtifactCard';\nimport { ICachedArtifact } from '../../../../../Types/artifact';\nimport { allSlotKeys, charKeyToLocCharKey } from '../../../../../Types/consts';\nimport useBuildSetting from '../useBuildSetting';\nimport { ArtifactSetBadges } from './ArtifactSetBadges';\n\ntype NewOld = {\n  newId: string,\n  oldId?: string\n}\n\ntype BuildDisplayItemProps = {\n  label?: Displayable,\n  compareBuild: boolean,\n  disabled?: boolean,\n  extraButtonsRight?: JSX.Element,\n  extraButtonsLeft?: JSX.Element,\n}\n//for displaying each artifact build\nexport default function BuildDisplayItem({ label, compareBuild, extraButtonsRight, extraButtonsLeft, disabled }: BuildDisplayItemProps) {\n  const { character: { key: characterKey, equippedArtifacts } } = useContext(CharacterContext)\n  const { buildSetting: { mainStatAssumptionLevel } } = useBuildSetting(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const dataContext = useContext(DataContext)\n\n  const { data, oldData } = dataContext\n  const [newOld, setNewOld] = useState(undefined as NewOld | undefined)\n  const close = useCallback(() => setNewOld(undefined), [setNewOld],)\n\n  const equipBuild = useCallback(() => {\n    if (!window.confirm(\"Do you want to equip this build to this character?\")) return\n    const char = database.chars.get(characterKey)\n    if (!char) return\n    allSlotKeys.forEach(s => {\n      const aid = data.get(input.art[s].id).value\n      if (aid) database.arts.set(aid, { location: charKeyToLocCharKey(characterKey) })\n      else {\n        const oldAid = char.equippedArtifacts[s]\n        if (oldAid && database.arts.get(oldAid)) database.arts.set(oldAid, { location: \"\" })\n      }\n    })\n    const weapon = data.get(input.weapon.id).value\n    if (weapon) database.weapons.set(weapon, { location: charKeyToLocCharKey(characterKey) })\n  }, [characterKey, data, database])\n\n  const statProviderContext = useMemo(() => {\n    const dataContext_ = { ...dataContext }\n    if (!compareBuild) dataContext_.oldData = undefined\n    return dataContext_\n  }, [dataContext, compareBuild])\n\n  const artifactIdsBySlot = useMemo(() => Object.fromEntries(allSlotKeys.map(slotKey => [\n    slotKey,\n    data.get(input.art[slotKey].id).value\n  ])), [data])\n  const artifacts = useMemo(() => artifactIdsBySlot && Object.values(artifactIdsBySlot)\n    .map((artiId: string) => database.arts.get(artiId))\n    .filter(arti => arti) as ICachedArtifact[],\n    [artifactIdsBySlot, database.arts]\n  )\n\n  // Memoize Arts because of its dynamic onClick\n  const artNanos = useMemo(() => allSlotKeys.map(slotKey =>\n    <Grid item xs={1} key={slotKey} >\n      <ArtifactCardNano showLocation slotKey={slotKey} artifactId={artifactIdsBySlot[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onClick={() => {\n        const oldId = equippedArtifacts[slotKey]\n        const newId = artifactIdsBySlot[slotKey]!\n        setNewOld({ oldId: oldId !== newId ? oldId : undefined, newId })\n      }} />\n    </Grid>), [setNewOld, equippedArtifacts, mainStatAssumptionLevel, artifactIdsBySlot])\n\n  if (!oldData) return null\n  const currentlyEquipped = allSlotKeys.every(slotKey => artifactIdsBySlot[slotKey] === oldData.get(input.art[slotKey].id).value) && data.get(input.weapon.id).value === oldData.get(input.weapon.id).value\n\n  return <CardLight>\n    <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\n      {newOld && <CompareArtifactModal newOld={newOld} mainStatAssumptionLevel={mainStatAssumptionLevel} onClose={close} />}\n      <CardContent>\n        <Box display=\"flex\" gap={1} sx={{ pb: 1 }} flexWrap=\"wrap\">\n          {label !== undefined && <SqBadge color=\"info\"><Typography><strong>{label}{currentlyEquipped ? \" (Equipped)\" : \"\"}</strong></Typography></SqBadge>}\n          <ArtifactSetBadges artifacts={artifacts} currentlyEquipped={currentlyEquipped} />\n          <Box sx={{ flexGrow: 1, display: \"flex\", justifyContent: \"flex-end\" }}>\n          </Box>\n          {extraButtonsLeft}\n          <Button size='small' color=\"success\" onClick={equipBuild} disabled={disabled || currentlyEquipped} startIcon={<Checkroom />}>Equip Build</Button>\n          {extraButtonsRight}\n        </Box>\n        <Grid container spacing={1} sx={{ pb: 1 }} columns={{ xs: 2, sm: 3, md: 4, lg: 6 }}>\n          <Grid item xs={1}>\n            <WeaponCardNano showLocation weaponId={data.get(input.weapon.id).value} />\n          </Grid>\n          {artNanos}\n        </Grid>\n        <DataContext.Provider value={statProviderContext}>\n          <StatDisplayComponent />\n        </DataContext.Provider>\n      </CardContent>\n    </Suspense>\n  </CardLight>\n}\n\nfunction CompareArtifactModal({ newOld: { newId, oldId }, mainStatAssumptionLevel, onClose }: { newOld: NewOld, mainStatAssumptionLevel: number, onClose: () => void }) {\n  const { database } = useContext(DatabaseContext)\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const onEquip = useCallback(() => {\n    if (!window.confirm(\"Do you want to equip this artifact to this character?\")) return\n    database.arts.set(newId, { location: charKeyToLocCharKey(characterKey) })\n    onClose()\n  }, [newId, database, characterKey, onClose])\n\n  return <ModalWrapper open={!!newId} onClose={onClose} containerProps={{ maxWidth: oldId ? \"md\" : \"xs\" }}>\n    <CardDark>\n      <CardContent sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"stretch\", gap: 2, height: \"100%\" }}>\n        {oldId && <Box minWidth={320}><ArtifactCard artifactId={oldId} mainStatAssumptionLevel={mainStatAssumptionLevel} canExclude canEquip editorProps={{ disableSet: true, disableSlot: true }} /></Box>}\n        {oldId && <Box display=\"flex\" flexGrow={1} />}\n        {oldId && <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\"><Button onClick={onEquip} sx={{ display: \"flex\" }}><ChevronRight sx={{ fontSize: 40 }} /></Button></Box>}\n        {oldId && <Box display=\"flex\" flexGrow={1} />}\n        <Box minWidth={320}><ArtifactCard artifactId={newId} mainStatAssumptionLevel={mainStatAssumptionLevel} canExclude canEquip editorProps={{ disableSet: true, disableSlot: true }} /></Box>\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../../../../Database/Database\";\r\nimport { IBuildResult } from \"../../../../Database/DataManagers/BuildResult\";\r\nimport { CharacterKey } from \"../../../../Types/consts\";\r\n\r\nexport default function useBuildResult(characterKey: CharacterKey) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [buildResult, setBuildResult] = useState(() => database.buildResult.get(characterKey))\r\n  useEffect(() => setBuildResult(database.buildResult.get(characterKey)), [database, characterKey])\r\n  useEffect(() =>\r\n    database.buildResult.follow(characterKey, (k, r, v) => r === \"update\" && setBuildResult(v)),\r\n    [characterKey, setBuildResult, database])\r\n  const buildResultDispatch = useCallback((action: Partial<IBuildResult>) => characterKey && database.buildResult.set(characterKey, action), [characterKey, database],)\r\n\r\n  return { buildResult, buildResultDispatch }\r\n}\r\n","import { DotProps } from \"recharts\"\nimport EnhancedPoint from \"./EnhancedPoint\"\n\ntype CustomShapeType = \"circle\" | \"diamond\" | \"square\"\ntype CustomDotProps = DotProps & {\n  selectedPoint: EnhancedPoint | undefined\n  payload?: EnhancedPoint\n  radiusSelected?: number\n  radiusUnselected?: number\n  colorSelected?: string\n  colorUnselected: string\n  shape?: CustomShapeType\n}\nexport default function CustomDot({ cx, cy, payload, selectedPoint, radiusSelected = 6, radiusUnselected = 3, colorSelected = \"red\", colorUnselected, shape = \"circle\" }: CustomDotProps) {\n  if (!cx || !cy || !payload) {\n    return null\n  }\n\n  const isSelected = selectedPoint && selectedPoint.x === payload.x && selectedPoint.y === payload.y\n\n  return (\n    <g\n      className=\"custom-dot\"\n      data-chart-x={cx}\n      data-chart-y={cy}\n      data-x-value={payload.x}\n      data-y-value={payload.y}\n      data-radius={isSelected ? radiusUnselected : radiusSelected}\n    >\n      {!isSelected\n        ? <CustomShape id=\"customShapeUnselected\" shape={shape} cx={cx} cy={cy} r={radiusUnselected} fill={colorUnselected} />\n        : <>\n          <CustomShape id=\"customShapeSelected\" shape={shape} cx={cx} cy={cy} r={radiusSelected / 2} fill={colorSelected} />\n          <CustomShape id=\"customShapeBorder\" shape={shape} cx={cx} cy={cy} r={radiusSelected} fill=\"none\" stroke={colorSelected} />\n        </>\n      }\n    </g>\n  )\n}\nfunction CustomShape({ shape, id, cx, cy, r, fill, stroke}: { shape: CustomShapeType, id?: string, cx: number, cy: number, r: number, fill?: string, stroke?: string }) {\n  switch(shape) {\n    case \"circle\":\n      return <circle id={id} cx={cx} cy={cy} r={r} fill={fill} stroke={stroke} />\n    case \"square\":\n      return <rect id={id} x={cx-r} y={cy-r} width={r*2} height={r*2} fill={fill} stroke={stroke} />\n    case \"diamond\":\n      return <polygon id={id} points={`${cx},${cy+r*2.5} ${cx+r*1.5},${cy} ${cx},${cy-r*2.5} ${cx-r*1.5},${cy}`} fill={fill} stroke={stroke} />\n  }\n}\n","import { Button, CardContent, ClickAwayListener, Grid, Skeleton, Stack, Typography } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useMemo } from \"react\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport { TooltipProps } from \"recharts\"\nimport ArtifactCardPico from \"../../../../../../Components/Artifact/ArtifactCardPico\"\nimport BootstrapTooltip from \"../../../../../../Components/BootstrapTooltip\"\nimport CardDark from \"../../../../../../Components/Card/CardDark\"\nimport CloseButton from \"../../../../../../Components/CloseButton\"\nimport SqBadge from \"../../../../../../Components/SqBadge\"\nimport { DataContext } from \"../../../../../../Context/DataContext\"\nimport { DatabaseContext } from \"../../../../../../Database/Database\"\nimport { input } from \"../../../../../../Formula\"\nimport { Unit, valueString } from \"../../../../../../KeyMap\"\nimport { ICachedArtifact } from \"../../../../../../Types/artifact\"\nimport { allSlotKeys } from \"../../../../../../Types/consts\"\nimport { ArtifactSetBadges } from \"../ArtifactSetBadges\"\nimport EnhancedPoint from \"./EnhancedPoint\"\n\ntype CustomTooltipProps = TooltipProps<number, string> & {\n  xLabel: Displayable\n  xUnit: Unit | undefined\n  yLabel: Displayable\n  yUnit: Unit | undefined\n  selectedPoint: EnhancedPoint | undefined\n  setSelectedPoint: (pt: EnhancedPoint | undefined) => void\n  addBuildToList: (build: string[]) => void\n}\nexport default function CustomTooltip({ xLabel, xUnit, yLabel, yUnit, selectedPoint, setSelectedPoint, addBuildToList, ...tooltipProps }: CustomTooltipProps) {\n  const { database } = useContext(DatabaseContext)\n  const { data } = useContext(DataContext)\n  const { t } = useTranslation(\"page_character_optimize\")\n\n  const artifactsBySlot: { [slot: string]: ICachedArtifact } = useMemo(() =>\n    selectedPoint && selectedPoint.artifactIds && Object.fromEntries(selectedPoint.artifactIds\n      .map(id => {\n        const artiObj = database.arts.get(id)\n        return [artiObj?.slotKey, artiObj]\n      })\n      .filter(arti => arti)\n    ),\n    [database.arts, selectedPoint]\n  )\n  const clickAwayHandler = useCallback((e) => {\n    if (!(e.target.id.includes(\"customShape\") || e.target.id.includes(\"chartContainer\"))) {\n      setSelectedPoint(undefined)\n    }\n  }, [setSelectedPoint])\n\n  const currentlyEquipped = artifactsBySlot && allSlotKeys.every(slotKey => artifactsBySlot[slotKey]?.id === data.get(input.art[slotKey].id).value)\n\n  const highlightLabel = useMemo(() => selectedPoint?.buildNumber && (selectedPoint.highlightedType === \"graph\"\n    ? <Trans t={t} i18nKey=\"graphBuildLabel\" count={selectedPoint?.buildNumber}>Graph #{{ count: selectedPoint?.buildNumber + 1 }}</Trans>\n    : `#${selectedPoint?.buildNumber}`),\n  [selectedPoint, t])\n\n  if (tooltipProps.active && selectedPoint) {\n    return <ClickAwayListener onClickAway={clickAwayHandler}>\n      <CardDark sx={{ minWidth: \"400px\", maxWidth: \"400px\" }} onClick={(e) => e.stopPropagation()}>\n        <CardContent>\n          <Stack gap={1}>\n            <Stack direction=\"row\" alignItems=\"start\" gap={1}>\n              <Stack spacing={0.5} flexGrow={99}>\n                {currentlyEquipped && <SqBadge color=\"info\"><strong>{t(\"currentlyEquippedBuild\")}</strong></SqBadge>}\n                {!currentlyEquipped && selectedPoint.highlighted && <SqBadge color=\"info\">{highlightLabel}</SqBadge>}\n                <Suspense fallback={<Skeleton width={300} height={50} />}>\n                  <ArtifactSetBadges artifacts={Object.values(artifactsBySlot)} currentlyEquipped={currentlyEquipped} />\n                </Suspense>\n              </Stack>\n              <Grid item flexGrow={1} />\n              <CloseButton onClick={() => setSelectedPoint(undefined)} />\n            </Stack>\n            <Grid container direction=\"row\" spacing={0.75} columns={5}>\n              {allSlotKeys.map(key =>\n                <Grid item key={key} xs={1}>\n                  <Suspense fallback={<Skeleton width={75} height={75} />}>\n                    <ArtifactCardPico artifactObj={artifactsBySlot[key]} slotKey={key} />\n                  </Suspense>\n                </Grid>\n              )}\n            </Grid>\n            <Typography><strong>{xLabel}</strong>: {valueString(xUnit === \"%\" ? selectedPoint.x / 100 : selectedPoint.x, xUnit)}</Typography>\n            <Typography><strong>{yLabel}</strong>: {valueString(yUnit === \"%\" ? selectedPoint.y / 100 : selectedPoint.y, yUnit)}</Typography>\n            <BootstrapTooltip title={selectedPoint.highlighted ? t(\"tcGraph.buildAlreadyInList\") : \"\"} placement=\"top\">\n              <span>\n                <Button sx={{ width: \"100%\" }} disabled={!!selectedPoint.highlighted} color=\"info\" onClick={() => addBuildToList(selectedPoint.artifactIds)}>{t(\"addBuildToList\")}</Button>\n              </span>\n            </BootstrapTooltip>\n          </Stack>\n        </CardContent>\n      </CardDark>\n    </ClickAwayListener>\n  }\n\n  return null\n}\n","export default class EnhancedPoint {\n  public x: number\n  public trueY?: number\n  public artifactIds: string[]\n  public min?: number\n  public current?: number\n  public highlighted?: number\n  public buildNumber?: number\n  public highlightedType?: \"generated\" | \"graph\"\n\n  public constructor(x: number, y: number, artifactIds: string[]) {\n    this.x = x\n    this.trueY = y\n    this.artifactIds = artifactIds\n  }\n\n  public get y(): number {\n    return (this.trueY || this.current || this.highlighted) as number\n  }\n  public set y(y: number | undefined) {\n    this.trueY = y\n  }\n}\n","import { CheckBox, CheckBoxOutlineBlank, Download, Replay } from '@mui/icons-material';\nimport { Button, CardContent, Collapse, Divider, Grid, Slider, styled, Typography } from '@mui/material';\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CartesianGrid, ComposedChart, Label, Legend, LegendType, Line, ResponsiveContainer, Scatter, Tooltip, XAxis, YAxis } from 'recharts';\nimport BootstrapTooltip from '../../../../../../Components/BootstrapTooltip';\nimport CardDark from '../../../../../../Components/Card/CardDark';\nimport CardLight from '../../../../../../Components/Card/CardLight';\nimport InfoTooltip from '../../../../../../Components/InfoTooltip';\nimport { CharacterContext } from '../../../../../../Context/CharacterContext';\nimport { DataContext } from '../../../../../../Context/DataContext';\nimport { GraphContext } from '../../../../../../Context/GraphContext';\nimport { input } from '../../../../../../Formula';\nimport { NumNode } from '../../../../../../Formula/type';\nimport { valueString } from '../../../../../../KeyMap';\nimport { allSlotKeys } from '../../../../../../Types/consts';\nimport { objectKeyMap, objPathValue } from '../../../../../../Util/Util';\nimport useBuildResult from '../../useBuildResult';\nimport OptimizationTargetSelector from '../OptimizationTargetSelector';\nimport CustomDot from './CustomDot';\nimport CustomTooltip from './CustomTooltip';\nimport EnhancedPoint from './EnhancedPoint';\n\nexport type Point = {\n  x: number\n  y: number\n  artifactIds: string[]\n  min?: number\n}\ntype ChartCardProps = {\n  plotBase?: string[]\n  setPlotBase: (path: string[] | undefined) => void\n  disabled?: boolean\n  showTooltip?: boolean\n}\nexport default function ChartCard({ plotBase, setPlotBase, disabled = false, showTooltip = false }: ChartCardProps) {\n  const { t } = useTranslation([\"page_character_optimize\", \"ui\"])\n  const { data } = useContext(DataContext)\n  const { chartData } = useContext(GraphContext)\n  const [showDownload, setshowDownload] = useState(false)\n  const [showMin, setshowMin] = useState(true)\n  const { graphBuilds } = useContext(GraphContext)\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { buildResult: { builds: generatedBuilds } } = useBuildResult(characterKey)\n\n  const [sliderLow, setSliderLow] = useState(-Infinity)\n  const [sliderHigh, setSliderHigh] = useState(Infinity)\n  const setSlider = useCallback(\n    (_e: unknown, value: number | number[]) => {\n      if (typeof value === \"number\") throw new TypeError()\n      const [l, h] = value\n      setSliderLow(l)\n      setSliderHigh(h)\n    },\n    [setSliderLow, setSliderHigh]\n  )\n  useEffect(() => { setSliderLow(-Infinity); setSliderHigh(Infinity) }, [chartData])\n\n  const { displayData, downloadData, sliderMin, sliderMax } = useMemo(() => {\n    if (!chartData) return { displayData: null, downloadData: null }\n    let sliderMin = Infinity\n    let sliderMax = -Infinity\n    const currentBuild = allSlotKeys.map(slotKey => data?.get(input.art[slotKey].id).value ?? \"\")\n    // Shape the data so we know the current and highlighted builds\n    const points = chartData.data.map(({ value: y, plot: x, artifactIds }) => {\n      if (x === undefined) return null\n      if (x < sliderMin) sliderMin = x\n      if (x > sliderMax) sliderMax = x\n      const enhancedDatum: EnhancedPoint = new EnhancedPoint(x, y, artifactIds)\n      const datumBuildMap = objectKeyMap(artifactIds, _ => true)\n\n      const isCurrentBuild = currentBuild.every(aId => datumBuildMap[aId])\n      if (isCurrentBuild) {\n        enhancedDatum.current = y\n        // Remove the Y-value so there are not 2 dots displayed for these builds\n        enhancedDatum.y = undefined\n        return enhancedDatum\n      }\n\n      const generBuildIndex = generatedBuilds.findIndex(build =>\n        build.every(aId => datumBuildMap[aId])\n      )\n      if (generBuildIndex !== -1) {\n        enhancedDatum.highlighted = y\n        enhancedDatum.buildNumber = generBuildIndex + 1\n        enhancedDatum.highlightedType = \"generated\"\n        // Remove the Y-value so there are not 2 dots displayed for these builds\n        enhancedDatum.y = undefined\n        return enhancedDatum\n      }\n\n      const graphBuildIndex = graphBuilds?.findIndex(build =>\n        build.every(aId => datumBuildMap[aId])\n      )\n      if (graphBuildIndex !== undefined && graphBuildIndex !== -1) {\n        enhancedDatum.highlighted = y\n        enhancedDatum.buildNumber = graphBuildIndex + 1\n        enhancedDatum.highlightedType = \"graph\"\n        // Remove the Y-value so there are not 2 dots displayed for these builds\n        enhancedDatum.y = undefined\n      }\n\n      return enhancedDatum\n    })\n    .sort((a, b) => a!.x - b!.x) as EnhancedPoint[]\n\n    const minimumData: EnhancedPoint[] = []\n    for (const point of points) {\n      let last: EnhancedPoint | undefined\n      while ((last = minimumData.pop())) {\n        if (last.y > point.y) {\n          minimumData.push(last)\n          break\n        }\n      }\n      minimumData.push(point)\n    }\n\n    // Note:\n    // We can also just use `minimumData` if the plotter supports multiple data sources.\n    // It could be faster too since there're no empty entries in `minimumData`.\n    // From my limited testing, using multiple data sources makes the graph behave strangely though.\n    if (minimumData[0]?.x !== points[0]?.x)\n      points[0].min = minimumData[0].y\n    minimumData.forEach(pt => { pt.min = pt.y })\n\n    const downloadData = {\n      minimum: minimumData.map(point => [point.x, point.y]),\n      allData: points.map(point => [point.x, point.y]),\n    }\n    return { displayData: points.filter(pt => pt && pt.x >= sliderLow && pt.x <= sliderHigh), downloadData, sliderMin, sliderMax }\n  }, [chartData, generatedBuilds, data, graphBuilds, sliderLow, sliderHigh])\n\n  const plotBaseNode = plotBase && objPathValue(data?.getDisplay(), plotBase)\n  const invalidTarget = plotBase && (!plotBaseNode || plotBaseNode.isEmpty)\n\n  const buttonText = invalidTarget\n    ? t(\"page_character_optimize:targetSelector.invalidTarget\")\n    : t(\"page_character_optimize:targetSelector.selectGraphTarget\")\n\n  return <CardLight>\n    <CardContent>\n      <Grid container spacing={1} alignItems=\"center\">\n        <Grid item>\n          <Typography >{t`tcGraph.vs`}</Typography>\n        </Grid>\n        <Grid item>\n          <BootstrapTooltip placement=\"top\" title={showTooltip ? t(\"page_character_optimize:selectTargetFirst\") : \"\"}>\n            <span>\n              <OptimizationTargetSelector\n                optimizationTarget={plotBase}\n                setTarget={target => setPlotBase(target)}\n                defaultText={buttonText}\n                disabled={disabled}\n              />\n            </span>\n          </BootstrapTooltip>\n        </Grid>\n        <Grid item>\n          <BootstrapTooltip title={!plotBase ? \"\" : t(\"ui:reset\")} placement=\"top\">\n            <span><Button color=\"error\" onClick={() => setPlotBase(undefined)} disabled={!plotBase}>\n              <Replay />\n            </Button></span>\n          </BootstrapTooltip>\n        </Grid>\n        <Grid item flexGrow={1}>\n          <InfoTooltip placement=\"top\" title={t(\"page_character_optimize:tcGraph.desc\")} />\n        </Grid>\n        {!!downloadData && <Grid item>\n          <Button size='small' startIcon={showMin ? <CheckBox /> : <CheckBoxOutlineBlank />}\n            color={showMin ? \"success\" : \"secondary\"}\n            onClick={() => setshowMin(!showMin)}>{t`tcGraph.showStatThr`}</Button>\n        </Grid>}\n        {!!downloadData && <Grid item>\n          <Button size='small' color=\"info\" startIcon={<Download />} onClick={() => setshowDownload(!showDownload)}>{t`tcGraph.downloadData`}</Button>\n        </Grid>}\n      </Grid>\n    </CardContent>\n    {displayData && displayData.length && <Divider />}\n    {chartData && displayData && displayData.length && <CardContent>\n      <Collapse in={!!downloadData && showDownload}>\n        <CardDark sx={{ mb: 2 }}>\n          <CardContent>\n            <Typography>Min Data</Typography>\n            <DataDisplay data={downloadData?.minimum} />\n            <Typography>All Data</Typography>\n            <DataDisplay data={downloadData?.allData} />\n          </CardContent>\n        </CardDark>\n      </Collapse>\n      <Chart displayData={displayData} plotNode={chartData.plotNode} valueNode={chartData.valueNode} showMin={showMin} />\n      {displayData.length > 1 && <Slider\n        marks\n        value={[sliderLow, sliderHigh]}\n        onChange={setSlider}\n        onChangeCommitted={setSlider}\n        min={sliderMin}\n        max={sliderMax}\n        step={(sliderMax - sliderMin) / 20}\n        valueLabelDisplay=\"auto\"\n        valueLabelFormat={n => valueString(chartData.plotNode.info?.unit === \"%\" ? n / 100 : n, chartData.plotNode.info?.unit)}\n        sx={{ ml: \"6%\", width: \"93%\" }}\n      />}\n    </CardContent>}\n  </CardLight >\n}\nconst TextArea = styled(\"textarea\")({\n  width: \"100%\",\n  fontFamily: \"monospace\",\n  resize: \"vertical\",\n  minHeight: \"5em\"\n})\nfunction DataDisplay({ data, }: { data?: object }) {\n  return <TextArea readOnly value={JSON.stringify(data)} onClick={e => {\n    const target = e.target as HTMLTextAreaElement;\n    target.selectionStart = 0;\n    target.selectionEnd = target.value.length;\n  }} />\n}\n\nconst optTargetColor = \"#8884d8\"\nconst highlightedColor = \"cyan\"\nconst currentColor = \"#46a046\"\nconst lineColor = \"#ff7300\"\nfunction Chart({ displayData, plotNode, valueNode, showMin }: {\n  displayData: EnhancedPoint[]\n  plotNode: NumNode\n  valueNode: NumNode\n  showMin: boolean\n}) {\n  const { graphBuilds, setGraphBuilds } = useContext(GraphContext)\n  const { t } = useTranslation(\"page_character_optimize\")\n  const [selectedPoint, setSelectedPoint] = useState<EnhancedPoint>()\n  const addBuildToList = useCallback((build: string[]) => { setGraphBuilds([...(graphBuilds ?? []), build]); setSelectedPoint(undefined) }, [setGraphBuilds, graphBuilds])\n  const chartOnClick = useCallback(props => {\n    if (props && props.chartX && props.chartY) setSelectedPoint(getNearestPoint(props.chartX, props.chartY, 20, displayData))\n  }, [setSelectedPoint, displayData])\n\n  // Below works because character translation should already be loaded\n  const xLabelValue = getLabelFromNode(plotNode, t)\n  const yLabelValue = getLabelFromNode(valueNode, t)\n\n  return <ResponsiveContainer width=\"100%\" height={600}>\n    <ComposedChart id=\"chartContainer\" data={displayData} onClick={chartOnClick} style={{ cursor: \"pointer\" }}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis\n        dataKey=\"x\"\n        scale=\"linear\"\n        unit={plotNode.info?.unit}\n        domain={[\"auto\", \"auto\"]}\n        tick={{ fill: 'white' }}\n        type=\"number\"\n        tickFormatter={n => n > 10000 ? n.toFixed() : n.toFixed(1)}\n        label={<Label fill=\"white\" dy={10}>{xLabelValue}</Label>}\n        height={50}\n      />\n      <YAxis\n        name=\"DMG\"\n        domain={[\"auto\", \"auto\"]}\n        unit={valueNode.info?.unit}\n        allowDecimals={false}\n        tick={{ fill: 'white' }}\n        type=\"number\"\n        label={<Label fill=\"white\" angle={-90} dx={-40}>{yLabelValue}</Label>}\n        width={100}\n      />\n      <Tooltip\n        content={<CustomTooltip\n          xLabel={xLabelValue}\n          xUnit={plotNode.info?.unit}\n          yLabel={yLabelValue}\n          yUnit={valueNode.info?.unit}\n          selectedPoint={selectedPoint}\n          setSelectedPoint={setSelectedPoint}\n          addBuildToList={addBuildToList}\n        />}\n        trigger=\"click\"\n        wrapperStyle={{ pointerEvents: \"auto\", cursor: \"auto\" }}\n        cursor={false}\n      />\n      <Legend payload={[\n        ...(showMin ? [{ id: \"min\", value: t`tcGraph.statReqThr`, type: \"line\" as LegendType, color: lineColor }] : []),\n        { id: \"trueY\", value: t`tcGraph.generatedBuilds`, type: \"circle\", color: optTargetColor },\n        { id: \"highlighted\", value: t`tcGraph.highlightedBuilds`, type: \"square\", color: highlightedColor },\n        { id: \"current\", value: t`tcGraph.currentBuild`, type: \"diamond\", color: currentColor },\n      ]}/>\n      {showMin && <Line\n        dataKey=\"min\"\n        stroke={lineColor}\n        type=\"stepBefore\"\n        connectNulls\n        strokeWidth={2}\n        isAnimationActive={false}\n        dot={false}\n        activeDot={false}\n      />}\n      <Scatter\n        dataKey=\"trueY\"\n        isAnimationActive={false}\n        shape={<CustomDot selectedPoint={selectedPoint} colorUnselected={optTargetColor} />}\n      />\n      <Scatter\n        dataKey=\"highlighted\"\n        isAnimationActive={false}\n        shape={<CustomDot shape=\"square\" selectedPoint={selectedPoint} colorUnselected={highlightedColor} />}\n      />\n      <Scatter\n        dataKey=\"current\"\n        isAnimationActive={false}\n        shape={<CustomDot shape=\"diamond\" selectedPoint={selectedPoint} colorUnselected={currentColor} />}\n      />\n    </ComposedChart>\n  </ResponsiveContainer>\n}\n\nfunction getNearestPoint(clickedX: number, clickedY: number, threshold: number, data: EnhancedPoint[]) {\n  const nearestDomPtData = Array.from(document.querySelectorAll(\".custom-dot\"))\n    .reduce((domPtA, domPtB) => {\n      const { chartX: aChartX, chartY: aChartY } = (domPtA as any).dataset\n      const aDistance = Math.sqrt((clickedX - aChartX) ** 2 + (clickedY - aChartY) ** 2)\n      const { chartX: bChartX, chartY: bChartY } = (domPtB as any).dataset\n      const bDistance = Math.sqrt((clickedX - bChartX) ** 2 + (clickedY - bChartY) ** 2)\n      return aDistance <= bDistance\n        ? domPtA\n        : domPtB\n    })[\"dataset\"]\n\n  // Don't select a point too far away\n  const distance = Math.sqrt((clickedX - nearestDomPtData.chartX) ** 2 + (clickedY - nearestDomPtData.chartY) ** 2)\n  return distance < threshold\n    ? data.find(d => d.x === +nearestDomPtData.xValue && d.y === +nearestDomPtData.yValue)\n    : undefined\n}\n\nfunction getLabelFromNode(node: NumNode, t: any) {\n  return typeof node.info?.name === \"string\"\n    ? node.info.name\n    : `${t(`${node.info?.name?.props.ns}:${node.info?.name?.props.key18}`)}${node.info?.textSuffix ? ` ${node.info?.textSuffix}` : \"\"}`\n}\n","import { allElementsWithPhy, allSlotKeys } from '@genshin-optimizer/consts';\nimport { Box, Button, CardContent, Divider, Grid, Typography } from '@mui/material';\nimport { useContext, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport SlotIcon from '../../../../../Components/Artifact/SlotIcon';\nimport BootstrapTooltip from '../../../../../Components/BootstrapTooltip';\nimport SqBadge from '../../../../../Components/SqBadge';\nimport { StatColoredWithUnit } from '../../../../../Components/StatDisplay';\nimport { CharacterContext } from '../../../../../Context/CharacterContext';\nimport Artifact from '../../../../../Data/Artifacts/Artifact';\nimport { DatabaseContext } from '../../../../../Database/Database';\nimport StatIcon from '../../../../../KeyMap/StatIcon';\nimport { iconInlineProps } from '../../../../../SVGIcons';\nimport FlowerIcon from '../../../../../SVGIcons/ArtifactSlot/FlowerIcon';\nimport PlumeIcon from '../../../../../SVGIcons/ArtifactSlot/PlumeIcon';\nimport AtkIcon from '../../../../../SVGIcons/Stats/AtkIcon';\nimport HpIcon from '../../../../../SVGIcons/Stats/HpIcon';\nimport { handleMultiSelect } from '../../../../../Util/MultiSelect';\nimport { catTotal } from '../../../../../Util/totalUtils';\nimport { objectKeyMap } from '../../../../../Util/Util';\nimport useBuildSetting from '../useBuildSetting';\n\nexport const artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"] as const\n\nexport default function MainStatSelectionCard({ disabled = false, filteredArtIds }: {\n  disabled?: boolean,\n  filteredArtIds: string[]\n}) {\n  const { t } = useTranslation(\"artifact\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { buildSetting: { mainStatKeys }, buildSettingDispatch } = useBuildSetting(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const tots = useMemo(() => objectKeyMap(allSlotKeys, slotKey =>\n    catTotal(Artifact.slotMainStats(slotKey), ct => Object.entries(database.arts.data).forEach(([id, a]) => {\n      const sk = a.slotKey\n      if (sk !== slotKey) return\n      const msk = a.mainStatKey\n      if (!msk || !ct[msk]) return\n      ct[msk].total++\n      if (filteredArtIds.includes(id)) ct[msk].current++\n    }))\n  ), [filteredArtIds, database])\n  const slotTots = useMemo(() => catTotal(artifactsSlotsToSelectMainStats, ct => Object.entries(database.arts.data).forEach(([id, a]) => {\n    const sk = a.slotKey\n    if (!ct[sk]) return\n    ct[sk].total++\n    if (filteredArtIds.includes(id)) ct[sk].current++\n  })), [filteredArtIds, database])\n\n  return <Box display=\"flex\" flexDirection=\"column\">\n    <Divider />\n    <Box display=\"flex\">\n      <CardContent sx={{ flexGrow: 1 }}>\n        <Box sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }}>\n          <BootstrapTooltip placement=\"top\" title={<Typography>{t(`slotName.flower`)}</Typography>}>\n            <FlowerIcon fontSize='inherit' />\n          </BootstrapTooltip>\n          <Box flexGrow={1}>\n            <SqBadge color=\"info\"><HpIcon {...iconInlineProps} /> {tots.flower.hp}</SqBadge>\n          </Box>\n        </Box>\n      </CardContent>\n      <Divider orientation=\"vertical\" flexItem />\n      <CardContent sx={{ flexGrow: 1 }}>\n        <Box sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }}>\n          <BootstrapTooltip placement=\"top\" title={<Typography>{t(`slotName.plume`)}</Typography>}>\n            <PlumeIcon fontSize='inherit' />\n          </BootstrapTooltip>\n          <Box flexGrow={1}>\n            <SqBadge color=\"info\"><AtkIcon {...iconInlineProps} /> {tots.plume.atk}</SqBadge>\n          </Box>\n        </Box>\n      </CardContent>\n    </Box>\n    {artifactsSlotsToSelectMainStats.map(slotKey => {\n      const selectedMainKeys = mainStatKeys[slotKey]\n      const mainKeys = Artifact.slotMainStats(slotKey)\n      const mainKeysHandler = handleMultiSelect([...mainKeys])\n      return <Box key={slotKey}>\n        <Divider />\n        <CardContent sx={{ pt: 1, pb: 1 }}>\n          <Box sx={{ display: \"flex\", gap: 1, alignItems: \"center\", pb: 1 }}>\n            <BootstrapTooltip placement=\"top\" title={<Typography>{t(`slotName.${slotKey}`)}</Typography>}>\n              <SlotIcon slotKey={slotKey} iconProps={{ fontSize: 'inherit' }} />\n            </BootstrapTooltip>\n            <Box flexGrow={1}>\n              <SqBadge color=\"info\">{slotTots[slotKey]}</SqBadge>\n            </Box>\n          </Box>\n          <Grid container spacing={1}>\n            {mainKeys.map((mainStatKey, i) => {\n              const element = allElementsWithPhy.find(ele => mainStatKey.includes(ele))\n              const color = selectedMainKeys.includes(mainStatKey)\n                ? element ?? \"success\"\n                : \"secondary\"\n              return <Grid item key={mainStatKey} flexGrow={1} xs={((i < 3 && slotKey !== \"goblet\") || slotKey === \"goblet\") ? 4 : undefined} >\n                <BootstrapTooltip placement=\"top\" title={<Typography><strong><StatColoredWithUnit statKey={mainStatKey} /></strong></Typography>} disableInteractive>\n                  <Button fullWidth size=\"small\" color={color} sx={{ height: \"100%\", pointerEvents: disabled ? \"none\" : undefined, cursor: disabled ? \"none\" : undefined }}\n                    startIcon={<StatIcon statKey={mainStatKey} />}\n                    onClick={() => buildSettingDispatch({ mainStatKeys: { ...mainStatKeys, [slotKey]: mainKeysHandler(selectedMainKeys, mainStatKey) } })}>\n                    {tots[slotKey][mainStatKey]}\n                  </Button>\n                </BootstrapTooltip>\n              </Grid>\n            })}\n          </Grid>\n        </CardContent>\n      </Box>\n    })}\n  </Box >\n}\n","import { CheckBox, CheckBoxOutlineBlank, DeleteForever } from \"@mui/icons-material\"\nimport { Button, ButtonGroup } from \"@mui/material\"\nimport { useCallback, useContext } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../../../../../Components/CustomNumberInput\"\nimport { DataContext } from \"../../../../../Context/DataContext\"\nimport { StatFilters, StatFilterSetting } from \"../../../../../Database/DataManagers/BuildSettingData\"\nimport { NodeDisplay } from \"../../../../../Formula/uiData\"\nimport { objPathValue } from \"../../../../../Util/Util\"\nimport OptimizationTargetSelector from \"./OptimizationTargetSelector\"\n\ntype OptimizationTargetEditorListProps = {\n  statFilters: StatFilters\n  setStatFilters: (statFilters: StatFilters) => void\n  disabled: boolean\n}\n\nexport default function OptimizationTargetEditorList({ statFilters, setStatFilters, disabled = false }: OptimizationTargetEditorListProps) {\n  const setTarget = useCallback((path: string[], oldPath?: string[], oldIndex?: number) => {\n    const statFilters_ = { ...statFilters }\n    const oldPathStr = JSON.stringify(oldPath)\n    const oldFilterArr = oldPath ? [...statFilters[oldPathStr]!] : undefined\n    const pathStr = JSON.stringify(path)\n    const filterArr = [...(statFilters[pathStr] ?? [])]\n    // Copy/create new setting\n    if (oldIndex !== undefined && oldFilterArr) filterArr.push(oldFilterArr[oldIndex])\n    else filterArr.push({ value: 0, disabled: false })\n    statFilters_[pathStr] = filterArr\n    // Remove old setting\n    if (oldIndex !== undefined && oldFilterArr) {\n      oldFilterArr.splice(oldIndex, 1)\n      if (oldFilterArr.length) statFilters_[oldPathStr] = oldFilterArr\n      else delete statFilters_[oldPathStr]\n    }\n    setStatFilters({ ...statFilters_ })\n  }, [setStatFilters, statFilters])\n\n  const delTarget = useCallback((path: string[], index: number) => {\n    const statFilters_ = { ...statFilters }\n    const pathStr = JSON.stringify(path)\n    const filterArr = [...statFilters[pathStr]!]\n    filterArr.splice(index, 1)\n    if (filterArr.length) statFilters_[pathStr] = filterArr\n    else delete statFilters_[pathStr]\n    setStatFilters({ ...statFilters_ })\n  }, [setStatFilters, statFilters])\n\n  const setTargetValue = useCallback((path: string[], index: number, value: number) => {\n    const statFilters_ = { ...statFilters }\n    const pathStr = JSON.stringify(path)\n    const filterArr = [...statFilters[pathStr]!]\n    filterArr[index] = { ...filterArr[index], value } as StatFilterSetting\n    statFilters_[pathStr] = filterArr\n    setStatFilters({ ...statFilters_ })\n  }, [setStatFilters, statFilters])\n\n  const setTargetDisabled = useCallback((path: string[], index: number, disabled: boolean) => {\n    const statFilters_ = { ...statFilters }\n    const pathStr = JSON.stringify(path)\n    const filterArr = [...statFilters[pathStr]!]\n    filterArr[index] = { ...filterArr[index], disabled } as StatFilterSetting\n    statFilters_[pathStr] = filterArr\n    setStatFilters({ ...statFilters_ })\n  }, [setStatFilters, statFilters])\n\n  return <>\n    {Object.entries(statFilters).flatMap(([pathStr, settings]) =>\n      settings?.map((setting, index) =>\n        <OptimizationTargetEditorItem path={JSON.parse(pathStr)} setting={setting} index={index} setTarget={setTarget} delTarget={delTarget} setValue={setTargetValue} setDisabled={setTargetDisabled} disabled={disabled} key={pathStr + index} />\n      )\n    )}\n    <OptimizationTargetEditorItem setTarget={setTarget} delTarget={delTarget} setValue={setTargetValue} setDisabled={setTargetDisabled} disabled={disabled} />\n  </>\n}\n\ntype OptimizationTargetEditorItemProps = {\n  path?: string[]\n  setting?: StatFilterSetting\n  index?: number\n  setTarget: (path: string[], oldPath?: string[], oldIndex?: number) => void\n  delTarget: (path: string[], index: number) => void\n  setValue: (path: string[], index: number, value: number) => void\n  setDisabled: (path: string[], index: number, disabled: boolean) => void\n  disabled: boolean\n}\nfunction OptimizationTargetEditorItem({ path, setting, index, setTarget, delTarget, setValue, setDisabled, disabled }: OptimizationTargetEditorItemProps) {\n  const { t } = useTranslation(\"page_character_optimize\")\n  const { data } = useContext(DataContext)\n  const onChange = useCallback((val: number | undefined) => path && (index !== undefined) && setValue(path, index, val ?? 0), [setValue, path, index])\n  const buttonStyle = { p: 1, flexBasis: 30, flexGrow: 0, flexShrink: 0 }\n\n  const buildConstraintNode: NodeDisplay = objPathValue(data.getDisplay(), path ?? [])\n  const isPercent = buildConstraintNode?.info?.unit === \"%\"\n\n  return <ButtonGroup sx={{ \"& .MuiButtonGroup-grouped\": { minWidth: 24 }, width: \"100%\" }}>\n    {!!setting && !!path && (index !== undefined) && <Button sx={buttonStyle} color={setting.disabled ? \"secondary\" : \"success\"} onClick={() => setDisabled(path, index, !setting.disabled)} disabled={disabled}>\n      {setting.disabled ? <CheckBoxOutlineBlank /> : <CheckBox />}\n    </Button>}\n    <OptimizationTargetSelector showEmptyTargets optimizationTarget={path} setTarget={(target) => setTarget(target, path, index)} defaultText={t(\"targetSelector.selectBuildTarget\")} />\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 150, flexGrow: 1 }}>\n      <CustomNumberInput\n        float\n        disabled={!path || disabled}\n        value={setting?.value}\n        placeholder=\"Stat Value\"\n        onChange={onChange}\n        sx={{ px: 1, }}\n        inputProps={{ sx: { textAlign: \"right\" } }}\n        endAdornment={isPercent ? \"%\" : undefined}\n      />\n    </CustomNumberInputButtonGroupWrapper>\n    {!!path && (index !== undefined) && <Button sx={buttonStyle} color=\"error\" onClick={() => delTarget(path, index)} disabled={disabled}>\n      <DeleteForever fontSize=\"small\" />\n    </Button>}\n  </ButtonGroup>\n}\n","import { Box, CardContent, Typography } from \"@mui/material\"\nimport { useCallback, useContext } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport CardLight from \"../../../../../Components/Card/CardLight\"\nimport InfoTooltip from \"../../../../../Components/InfoTooltip\"\nimport { CharacterContext } from \"../../../../../Context/CharacterContext\"\nimport { StatFilters } from \"../../../../../Database/DataManagers/BuildSettingData\"\nimport useBuildSetting from \"../useBuildSetting\"\nimport OptimizationTargetEditorList from \"./OptimizationTargetEditorList\"\n\nexport default function StatFilterCard({ disabled = false }: { disabled?: boolean }) {\n  const { t } = useTranslation(\"page_character_optimize\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { buildSetting: { statFilters }, buildSettingDispatch } = useBuildSetting(characterKey)\n  const setStatFilters = useCallback((statFilters: StatFilters) => buildSettingDispatch({ statFilters }), [buildSettingDispatch])\n\n  return <Box>\n    <CardLight>\n      <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\n        <Typography>{t`constraintFilter.title`}</Typography>\n        <InfoTooltip title={<Typography>{t`constraintFilter.tooltip`}</Typography>} />\n      </CardContent>\n    </CardLight>\n    <Box display=\"flex\" flexDirection=\"column\" gap={0.5}>\n      <OptimizationTargetEditorList statFilters={statFilters} setStatFilters={setStatFilters} disabled={disabled} />\n    </Box>\n  </Box>\n}\n","import { Add, CheckBox, CheckBoxOutlineBlank, Close, KeyboardArrowDown, KeyboardArrowUp, KeyboardDoubleArrowDown, KeyboardDoubleArrowUp, Replay, Settings } from \"@mui/icons-material\";\r\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, Typography } from \"@mui/material\";\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport ArtifactCardPico from \"../../../../../Components/Artifact/ArtifactCardPico\";\r\nimport CardDark from \"../../../../../Components/Card/CardDark\";\r\nimport CardLight from \"../../../../../Components/Card/CardLight\";\r\nimport CharacterCardPico from \"../../../../../Components/Character/CharacterCardPico\";\r\nimport CloseButton from \"../../../../../Components/CloseButton\";\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../../../../../Components/CustomNumberInput\";\r\nimport ModalWrapper from \"../../../../../Components/ModalWrapper\";\r\nimport SqBadge from \"../../../../../Components/SqBadge\";\r\nimport WeaponCardPico from \"../../../../../Components/Weapon/WeaponCardPico\";\r\nimport { CharacterContext } from \"../../../../../Context/CharacterContext\";\r\nimport { DatabaseContext } from \"../../../../../Database/Database\";\r\nimport useBoolState from \"../../../../../ReactHooks/useBoolState\";\r\nimport useCharacter from \"../../../../../ReactHooks/useCharacter\";\r\nimport useCharSelectionCallback from \"../../../../../ReactHooks/useCharSelectionCallback\";\r\nimport { ICachedArtifact } from \"../../../../../Types/artifact\";\r\nimport { ICachedCharacter } from \"../../../../../Types/character\";\r\nimport { CharacterKey, charKeyToLocCharKey } from \"../../../../../Types/consts\";\r\nimport useBuildSetting from \"../useBuildSetting\";\r\nconst CharacterSelectionModal = React.lazy(() => import('../../../../CharacterSelectionModal'))\r\n\r\nexport default function UseEquipped({ disabled = false, filteredArts }: { disabled?: boolean, filteredArts: ICachedArtifact[] }) {\r\n  const { t } = useTranslation(\"page_character_optimize\")\r\n  const { character: { key: characterKey } } = useContext(CharacterContext)\r\n  const { buildSetting: { useEquippedArts }, buildSettingDispatch } = useBuildSetting(characterKey)\r\n  const { database } = useContext(DatabaseContext)\r\n  const [show, onOpen, onClose] = useBoolState(false)\r\n  const [{ equipmentPriority: tempEquipmentPriority }, setTO] = useState(database.displayOptimize.get())\r\n  useEffect(() => database.displayOptimize.follow((r, to) => setTO(to)), [database, setTO])\r\n  //Basic validate for the equipmentPrio list to remove dups and characters that doesnt exist.\r\n  const equipmentPriority = useMemo(() => [...new Set(tempEquipmentPriority)].filter(ck => database.chars.get(ck)), [database, tempEquipmentPriority])\r\n  const setPrio = useCallback((equipmentPriority: CharacterKey[]) => database.displayOptimize.set({ equipmentPriority }), [database])\r\n\r\n  const setPrioRank = useCallback((fromIndex, toIndex) => {\r\n    const arr = [...equipmentPriority]\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n    setPrio(arr)\r\n  }, [equipmentPriority, setPrio])\r\n  const removePrio = useCallback((fromIndex) => {\r\n    const arr = [...equipmentPriority]\r\n    arr.splice(fromIndex, 1)\r\n    setPrio(arr)\r\n  }, [equipmentPriority, setPrio])\r\n  const addPrio = useCallback((ck: CharacterKey) => setPrio([...equipmentPriority, ck]), [equipmentPriority, setPrio])\r\n  const resetPrio = useCallback(() => setPrio([]), [setPrio])\r\n\r\n  const numAbove = useMemo(() => {\r\n    let numAbove = equipmentPriority.length\r\n    const index = equipmentPriority.indexOf(characterKey)\r\n    if (index >= 0) numAbove = index\r\n    return numAbove\r\n  }, [characterKey, equipmentPriority])\r\n  const numUseEquippedChar = useMemo(() => {\r\n    return database.chars.keys.length - 1 - numAbove\r\n  }, [numAbove, database])\r\n  const numUnlisted = useMemo(() => {\r\n    return database.chars.keys.length - equipmentPriority.length\r\n  }, [equipmentPriority, database])\r\n\r\n  const totArts = useMemo(() => filteredArts.filter(a => a.location && a.location !== charKeyToLocCharKey(characterKey)).length, [filteredArts, characterKey])\r\n\r\n  return <Box display=\"flex\" gap={1}>\r\n    <ModalWrapper open={show} onClose={onClose} containerProps={{ maxWidth: \"sm\" }}><CardDark>\r\n      <CardContent>\r\n        <Grid container spacing={1}>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"h6\">{t`useEquipped.modal.title`}</Typography>\r\n          </Grid>\r\n          <Grid item sx={{ mb: -1 }}>\r\n            <CloseButton onClick={onClose} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <CardLight sx={{ mb: 1 }}>\r\n          <CardContent>\r\n            <Typography gutterBottom><Trans t={t} i18nKey=\"useEquipped.modal.desc1\">When generating a build, the Optimizer will only consider equipped artifacts from characters below the current character or those not on the list.</Trans></Typography>\r\n            <Typography gutterBottom><Trans t={t} i18nKey=\"useEquipped.modal.desc2\">If the current character is not on the list, the Optimizer will only consider equipped artifacts from others characters that are not on the list.</Trans></Typography>\r\n          </CardContent>\r\n        </CardLight>\r\n        <Box display=\"flex\" flexDirection=\"column\" gap={2}>\r\n          {equipmentPriority.map((ck, i) =>\r\n            <SelectItem key={ck} characterKey={ck} rank={i + 1} maxRank={equipmentPriority.length} setRank={(num) => num && setPrioRank(i, num - 1)} onRemove={() => removePrio(i)} numAbove={numAbove} />)}\r\n          <Box sx={{ display: \"flex\", gap: 1 }}>\r\n            <NewItem onAdd={addPrio} list={equipmentPriority} />\r\n            <Button color=\"error\" onClick={resetPrio} startIcon={<Replay />}><Trans t={t} i18nKey=\"useEquipped.modal.clearList\">Clear List</Trans></Button>\r\n          </Box>\r\n          {!!numUseEquippedChar && <SqBadge color=\"success\"><Typography><Trans t={t} i18nKey=\"useEquipped.modal.usingNum\" count={numUnlisted}>Using artifacts from <strong>{{ count: numUnlisted } as TransObject}</strong> unlisted characters</Trans></Typography></SqBadge>}\r\n        </Box>\r\n      </CardContent>\r\n    </CardDark ></ModalWrapper>\r\n    <ButtonGroup sx={{ display: \"flex\", width: \"100%\" }}>\r\n      <Button sx={{ flexGrow: 1 }} onClick={() => buildSettingDispatch({ useEquippedArts: !useEquippedArts })} disabled={disabled} startIcon={useEquippedArts ? <CheckBox /> : <CheckBoxOutlineBlank />} color={useEquippedArts ? \"success\" : \"secondary\"}>\r\n        <Box sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }}>\r\n          <span><Trans t={t} i18nKey=\"useEquipped.title\">Use Equipped Artifacts</Trans></span>\r\n          {useEquippedArts && <SqBadge sx={{ whiteSpace: \"normal\" }}><Trans t={t} i18nKey=\"useEquipped.usingNumTot\" count={numUnlisted} arts={totArts}>Using <strong>{{ arts: totArts } as TransObject}</strong> artifacts from <strong>{{ count: numUnlisted } as TransObject}</strong> characters</Trans></SqBadge>}\r\n        </Box>\r\n      </Button>\r\n      {useEquippedArts && <Button sx={{ flexShrink: 1 }} color=\"info\" onClick={onOpen} disabled={disabled}><Settings /></Button>}\r\n    </ButtonGroup>\r\n  </Box>\r\n}\r\n\r\nconst itemSize = 60\r\nfunction SelectItem({ characterKey, rank, maxRank, setRank, onRemove, numAbove }: {\r\n  characterKey: CharacterKey,\r\n  rank: number,\r\n  maxRank: number,\r\n  setRank: (r: number | undefined) => void,\r\n  onRemove: () => void,\r\n  numAbove: number,\r\n}) {\r\n  const { t } = useTranslation(\"page_character_optimize\")\r\n  const { database } = useContext(DatabaseContext)\r\n  const character = useCharacter(characterKey)\r\n  const onClick = useCharSelectionCallback()\r\n  if (!character) return null\r\n  const { equippedWeapon, equippedArtifacts } = character\r\n  return <CardLight sx={{ p: 1 }}  >\r\n    <Box sx={{ pb: 1, display: \"flex\", justifyContent: \"space-between\", gap: 1 }}>\r\n      <SqBadge color=\"info\">\r\n        <Typography>#{rank}</Typography>\r\n      </SqBadge>\r\n      <SqBadge sx={{ flexGrow: 1 }} color={numAbove === (rank - 1) ? \"warning\" : (rank - 1) < numAbove ? \"error\" : \"success\"}>\r\n        <Typography>{numAbove === (rank - 1) ? <Trans t={t} i18nKey=\"useEquipped.modal.status.curr\">Current character</Trans>\r\n          : (rank - 1) < numAbove ? <Trans t={t} i18nKey=\"useEquipped.modal.status.dont\">Don't Use artifacts</Trans> :\r\n            <Trans t={t} i18nKey=\"useEquipped.modal.status.use\">Use artifacts</Trans>}</Typography>\r\n      </SqBadge>\r\n      <Box>\r\n        <ButtonGroup sx={{ flexGrow: 1 }} size=\"small\">\r\n          <CustomNumberInputButtonGroupWrapper >\r\n            <CustomNumberInput onChange={setRank} value={rank}\r\n              // startAdornment=\"Rank:\"\r\n              inputProps={{ min: 1, max: maxRank, sx: { textAlign: \"center\" } }}\r\n              sx={{ width: \"100%\", height: \"100%\", pl: 2 }} />\r\n          </CustomNumberInputButtonGroupWrapper>\r\n          <Button disabled={rank === 1} onClick={() => setRank(1)} >\r\n            <KeyboardDoubleArrowUp />\r\n          </Button>\r\n          <Button disabled={rank === 1} onClick={() => setRank(rank - 1)}  >\r\n            <KeyboardArrowUp />\r\n          </Button>\r\n          <Button disabled={rank === maxRank} onClick={() => setRank(rank + 1)}  >\r\n            <KeyboardArrowDown />\r\n          </Button>\r\n          <Button disabled={rank === maxRank} onClick={() => setRank(maxRank)}  >\r\n            <KeyboardDoubleArrowDown />\r\n          </Button>\r\n          <Button color=\"error\" onClick={onRemove}>\r\n            <Close />\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Box>\r\n    </Box>\r\n    <Grid container columns={7} spacing={1}>\r\n      <Grid item xs={1} >\r\n        <CharacterCardPico characterKey={characterKey} onClick={onClick} />\r\n      </Grid>\r\n      <Grid item xs={1}><WeaponCardPico weaponId={equippedWeapon} /></Grid>\r\n      {Object.entries(equippedArtifacts).map(([slotKey, aId]) => <Grid item xs={1} key={slotKey} ><ArtifactCardPico slotKey={slotKey} artifactObj={database.arts.get(aId)} /></Grid>)}\r\n    </Grid>\r\n\r\n  </CardLight>\r\n}\r\nfunction NewItem({ onAdd, list }: { onAdd: (ck: CharacterKey) => void, list: CharacterKey[] }) {\r\n  const { t } = useTranslation(\"page_character_optimize\")\r\n  const [show, onOpen, onClose] = useBoolState(false)\r\n  const filter = useCallback((char?: ICachedCharacter) => {\r\n    if (!char) return false\r\n    return !list.includes(char.key)\r\n  }, [list])\r\n  return <>\r\n    <Suspense fallback={false}>\r\n      <CharacterSelectionModal show={show} onHide={onClose} onSelect={onAdd} filter={filter} />\r\n    </Suspense>\r\n    <Button fullWidth sx={{ height: itemSize }} color=\"info\" onClick={onOpen} startIcon={<Add />} >\r\n      <Trans t={t} i18nKey=\"useEquipped.modal.add\">Add character to list</Trans>\r\n    </Button>\r\n  </>\r\n}\r\n","import { CheckBox, CheckBoxOutlineBlank } from \"@mui/icons-material\";\nimport { Box, Button } from \"@mui/material\";\nimport { useContext, useMemo } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport SqBadge from \"../../../../../Components/SqBadge\";\nimport { CharacterContext } from \"../../../../../Context/CharacterContext\";\nimport { DatabaseContext } from \"../../../../../Database/Database\";\nimport useBuildSetting from \"../useBuildSetting\";\n\nexport default function UseExcluded({ disabled = false, artsDirty }: { disabled?: boolean, artsDirty: object }) {\n  const { t } = useTranslation(\"page_character_optimize\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { buildSetting: { useExcludedArts }, buildSettingDispatch } = useBuildSetting(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const numExcludedArt = useMemo(() => artsDirty && database.arts.values.reduce((a, art) => a + (art.exclude ? 1 : 0), 0), [database, artsDirty])\n  return <Button fullWidth onClick={() => buildSettingDispatch({ useExcludedArts: !useExcludedArts })} disabled={!numExcludedArt || disabled} startIcon={useExcludedArts ? <CheckBox /> : <CheckBoxOutlineBlank />} color={useExcludedArts ? \"success\" : \"secondary\"}>\n    <Box sx={{ display: \"flex\", gap: 1 }}>\n      <Box><Trans t={t} i18nKey=\"useExcluded.title\" count={numExcludedArt}>Use Excluded Artifacts</Trans></Box>\n      {useExcludedArts ? <SqBadge><Trans t={t} i18nKey=\"useExcluded.usingNum\" count={numExcludedArt}>Using <strong>{{ count: numExcludedArt } as TransObject}</strong> excluded artifacts</Trans></SqBadge> :\n        <SqBadge color=\"error\"><Trans t={t} i18nKey=\"useExcluded.excNum\" count={numExcludedArt}>Excluded <strong>{{ count: numExcludedArt } as TransObject}</strong> artifacts</Trans></SqBadge>}\n    </Box>\n  </Button>\n}\n","import Alert from \"@mui/material/Alert\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function WorkerErr() {\n  const { t } = useTranslation(\"page_character_optimize\")\n  return <Alert severity=\"error\" variant=\"filled\" onClick={() => window.location.reload()} sx={{\n    \"& .MuiAlert-message\": {\n      flexGrow: 1,\n      cursor: \"pointer\"\n    }\n  }}>{t`workerLoadFailed`}</Alert>\n}\n","import Artifact from \"../../../../Data/Artifacts/Artifact\";\r\nimport { input } from \"../../../../Formula\";\r\nimport { computeUIData } from \"../../../../Formula/api\";\r\nimport { formulaString } from \"../../../../Formula/debug\";\r\nimport { Data, NumNode } from \"../../../../Formula/type\";\r\nimport { constant, setReadNodeKeys } from \"../../../../Formula/utils\";\r\nimport { allMainStatKeys, allSubstatKeys, ICachedArtifact } from \"../../../../Types/artifact\";\r\nimport { deepClone, objectKeyMap, objectMap } from \"../../../../Util/Util\";\r\nimport type { ArtifactBuildData, ArtifactsBySlot, DynStat } from \"./common\";\r\n\r\nconst dynamic = setReadNodeKeys(deepClone({ dyn: { ...input.art, ...input.artSet } }))\r\nexport const dynamicData = {\r\n  art: objectKeyMap([...allMainStatKeys, ...allSubstatKeys], key => dynamic.dyn[key]),\r\n  artSet: objectMap(input.artSet, (_, key) => dynamic.dyn[key]),\r\n}\r\n\r\nexport function compactArtifacts(arts: ICachedArtifact[], mainStatAssumptionLevel: number, allowPartial: boolean): ArtifactsBySlot {\r\n  const result: ArtifactsBySlot = {\r\n    base: {},\r\n    values: { flower: [], plume: [], goblet: [], circlet: [], sands: [] }\r\n  }\r\n  const keys = new Set<string>()\r\n\r\n  for (const art of arts) {\r\n    const mainStatVal = Artifact.mainStatValue(art.mainStatKey, art.rarity, Math.max(Math.min(mainStatAssumptionLevel, art.rarity * 4), art.level))\r\n\r\n    const data: ArtifactBuildData = {\r\n      id: art.id, set: art.setKey,\r\n      values: {\r\n        [art.setKey]: 1,\r\n        [art.mainStatKey]: art.mainStatKey.endsWith('_') ? mainStatVal / 100 : mainStatVal,\r\n        ...Object.fromEntries(art.substats.map(substat =>\r\n          [substat.key, substat.key.endsWith('_') ? substat.accurateValue / 100 : substat.accurateValue]))\r\n      },\r\n    }\r\n    delete data.values[\"\"]\r\n    result.values[art.slotKey].push(data)\r\n    Object.keys(data.values).forEach(x => keys.add(x))\r\n  }\r\n  result.base = objectKeyMap([...keys], _ => 0)\r\n  if (allowPartial)\r\n    for (const value of Object.values(result.values))\r\n      value.push({ id: \"\", values: {} })\r\n  return result\r\n}\r\n\r\nexport function debugCompute(nodes: NumNode[], base: DynStat, arts: ArtifactBuildData[]) {\r\n  const stats = { ...base }\r\n  for (const art of arts) {\r\n    for (const [key, value] of Object.entries(art.values)) {\r\n      stats[key] = (stats[key] ?? 0) + value\r\n    }\r\n  }\r\n  const data = { dyn: Object.fromEntries(Object.entries(stats).map(([key, value]) => [key, constant(value)])) } as Data\r\n  const uiData = computeUIData([data])\r\n  return {\r\n    base, arts, stats,\r\n    data, uiData,\r\n    nodes: nodes.map(formulaString),\r\n    results: nodes.map(node => uiData.get(node)),\r\n  }\r\n}\r\n","import { CheckBox, CheckBoxOutlineBlank, Close, DeleteForever, Science, TrendingUp } from '@mui/icons-material';\nimport { Alert, Box, Button, ButtonGroup, CardContent, Divider, Grid, Link, MenuItem, Skeleton, ToggleButton, Typography } from '@mui/material';\nimport React, { Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useRef, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Link as RouterLink, useLocation, useNavigate } from 'react-router-dom';\nimport ArtifactLevelSlider from '../../../../Components/Artifact/ArtifactLevelSlider';\nimport BootstrapTooltip from '../../../../Components/BootstrapTooltip';\nimport CardLight from '../../../../Components/Card/CardLight';\nimport CharacterCard from '../../../../Components/Character/CharacterCard';\nimport DropdownButton from '../../../../Components/DropdownMenu/DropdownButton';\nimport { HitModeToggle, ReactionToggle } from '../../../../Components/HitModeEditor';\nimport InfoTooltip from '../../../../Components/InfoTooltip';\nimport SolidToggleButtonGroup from '../../../../Components/SolidToggleButtonGroup';\nimport SqBadge from '../../../../Components/SqBadge';\nimport { CharacterContext } from '../../../../Context/CharacterContext';\nimport { DataContext, dataContextObj } from '../../../../Context/DataContext';\nimport { GraphContext } from '../../../../Context/GraphContext';\nimport { OptimizationTargetContext } from '../../../../Context/OptimizationTargetContext';\nimport { DatabaseContext } from '../../../../Database/Database';\nimport { defThreads } from '../../../../Database/DataEntries/DisplayOptimizeEntry';\nimport { mergeData, uiDataForTeam } from '../../../../Formula/api';\nimport { optimize } from '../../../../Formula/optimization';\nimport { NumNode } from '../../../../Formula/type';\nimport { UIData } from '../../../../Formula/uiData';\nimport useCharacterReducer from '../../../../ReactHooks/useCharacterReducer';\nimport useCharSelectionCallback from '../../../../ReactHooks/useCharSelectionCallback';\nimport useDBMeta from '../../../../ReactHooks/useDBMeta';\nimport useForceUpdate from '../../../../ReactHooks/useForceUpdate';\nimport useMediaQueryUp from '../../../../ReactHooks/useMediaQueryUp';\nimport useTeamData, { getTeamData } from '../../../../ReactHooks/useTeamData';\nimport { CharacterKey, charKeyToLocCharKey, LocationCharacterKey } from '../../../../Types/consts';\nimport { objPathValue, range } from '../../../../Util/Util';\nimport { FinalizeResult, Setup, WorkerCommand, WorkerResult } from './BackgroundWorker';\nimport { maxBuildsToShowList } from './Build';\nimport { artSetPerm, Build, filterFeasiblePerm, mergeBuilds, mergePlot, pruneAll, pruneExclusion, RequestFilter } from './common';\nimport ArtifactSetConfig from './Components/ArtifactSetConfig';\nimport AssumeFullLevelToggle from './Components/AssumeFullLevelToggle';\nimport BonusStatsCard from './Components/BonusStatsCard';\nimport BuildAlert, { BuildStatus } from './Components/BuildAlert';\nimport BuildDisplayItem from './Components/BuildDisplayItem';\nimport ChartCard from './Components/ChartCard';\nimport MainStatSelectionCard from './Components/MainStatSelectionCard';\nimport OptimizationTargetSelector from './Components/OptimizationTargetSelector';\nimport StatFilterCard from './Components/StatFilterCard';\nimport UseEquipped from './Components/UseEquipped';\nimport UseExcluded from './Components/UseExcluded';\nimport WorkerErr from './Components/WorkerErr';\nimport { compactArtifacts, dynamicData } from './foreground';\nimport useBuildResult from './useBuildResult';\nimport useBuildSetting from './useBuildSetting';\nimport NotificationsOffIcon from '@mui/icons-material/NotificationsOff';\nimport NotificationsActiveIcon from '@mui/icons-material/NotificationsActive';\n\nconst audio = new Audio(\"notification.mp3\")\nexport default function TabBuild() {\n  const { t } = useTranslation(\"page_character_optimize\")\n  const { character: { key: characterKey, compareData } } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const { setChartData, graphBuilds, setGraphBuilds } = useContext(GraphContext)\n  const { gender } = useDBMeta()\n\n  const [notification, setnotification] = useState(false)\n  const notificationRef = useRef(false)\n  useEffect(() => { notificationRef.current = notification }, [notification])\n\n\n  const [buildStatus, setBuildStatus] = useState({ type: \"inactive\", tested: 0, failed: 0, skipped: 0, total: 0 } as BuildStatus)\n  const generatingBuilds = buildStatus.type !== \"inactive\"\n\n  const [artsDirty, setArtsDirty] = useForceUpdate()\n\n  const [{ equipmentPriority, threads = defThreads }, setDisplayOptimize] = useState(database.displayOptimize.get())\n  useEffect(() => database.displayOptimize.follow((r, to) => setDisplayOptimize(to)), [database, setDisplayOptimize])\n\n  const maxWorkers = threads > defThreads ? defThreads : threads\n  const setMaxWorkers = useCallback(threads => database.displayOptimize.set({ threads }), [database],)\n\n  const characterDispatch = useCharacterReducer(characterKey)\n  const onClickTeammate = useCharSelectionCallback()\n\n  // Clear state when changing characters\n  useEffect(() => {\n    setBuildStatus({ type: \"inactive\", tested: 0, failed: 0, skipped: 0, total: 0 })\n  }, [characterKey])\n\n  const noArtifact = useMemo(() => !database.arts.values.length, [database])\n\n  const { buildSetting, buildSettingDispatch } = useBuildSetting(characterKey)\n  const { plotBase, optimizationTarget, mainStatAssumptionLevel, allowPartial, maxBuildsToShow, levelLow, levelHigh } = buildSetting\n  const { buildResult: { builds, buildDate }, buildResultDispatch } = useBuildResult(characterKey)\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\n  const { characterSheet, target: data } = teamData?.[characterKey as CharacterKey] ?? {}\n  const optimizationTargetNode = optimizationTarget && objPathValue(data?.getDisplay(), optimizationTarget)\n  const isSM = [\"xs\", \"sm\"].includes(useMediaQueryUp())\n\n  //register changes in artifact database\n  useEffect(() =>\n    database.arts.followAny(setArtsDirty),\n    [setArtsDirty, database])\n\n  const deferredArtsDirty = useDeferredValue(artsDirty)\n  const deferredBuildSetting = useDeferredValue(buildSetting)\n  const filteredArts = useMemo(() => {\n    const { mainStatKeys, useExcludedArts, useEquippedArts, levelLow, levelHigh } = deferredArtsDirty && deferredBuildSetting\n    const cantTakeList: Set<LocationCharacterKey> = new Set()\n    if (useEquippedArts) {\n      const index = equipmentPriority.indexOf(characterKey)\n      if (index < 0) equipmentPriority.forEach(ek => cantTakeList.add(charKeyToLocCharKey(ek)))\n      else equipmentPriority.slice(0, index).forEach(ek => cantTakeList.add(charKeyToLocCharKey(ek)))\n    }\n    return database.arts.values.filter(art => {\n      if (art.level < levelLow) return false\n      if (art.level > levelHigh) return false\n      const mainStats = mainStatKeys[art.slotKey]\n      if (mainStats?.length && !mainStats.includes(art.mainStatKey)) return false\n\n      if (art.exclude && !useExcludedArts) return false\n\n      // If its equipped on the selected character, bypass the check\n      if (art.location === charKeyToLocCharKey(characterKey)) return true\n      if (art.location && !useEquippedArts) return false\n      if (art.location && useEquippedArts && cantTakeList.has(art.location)) return false\n      return true\n    })\n  }, [database, characterKey, equipmentPriority, deferredArtsDirty, deferredBuildSetting])\n\n  const filteredArtIds = useMemo(() => filteredArts.map(a => a.id), [filteredArts])\n  const levelTotal = useMemo(() => {\n    const { levelLow, levelHigh } = deferredBuildSetting\n    let total = 0, current = 0\n    Object.entries(database.arts.data).forEach(([id, art]) => {\n      if (art.level >= levelLow && art.level <= levelHigh) {\n        total++\n        if (filteredArtIds.includes(id)) current++\n      }\n    })\n    return `${current}/${total}`\n  }, [deferredBuildSetting, filteredArtIds, database])\n\n  const tabFocused = useRef(true)\n  useEffect(() => {\n    const onFocus = () => tabFocused.current = true\n    const onBlur = () => tabFocused.current = false\n    window.addEventListener('focus', onFocus)\n    window.addEventListener('blur', onBlur)\n    return () => {\n      window.removeEventListener('focus', onFocus)\n      window.removeEventListener('blur', onBlur)\n    }\n  }, [tabFocused])\n\n  // Provides a function to cancel the work\n  const cancelToken = useRef(() => { })\n  //terminate worker when component unmounts\n  useEffect(() => () => cancelToken.current(), [])\n  const [workerErr, setWorkerErr] = useState(false)\n  const generateBuilds = useCallback(async () => {\n    const { artSetExclusion, plotBase, statFilters, optimizationTarget, mainStatAssumptionLevel, allowPartial, maxBuildsToShow } = buildSetting\n    if (!characterKey || !optimizationTarget) return\n\n    const split = compactArtifacts(filteredArts, mainStatAssumptionLevel, allowPartial)\n\n    const teamData = getTeamData(database, characterKey, mainStatAssumptionLevel, [])\n    if (!teamData) return\n    const workerData = uiDataForTeam(teamData.teamData, gender, characterKey)[characterKey]?.target.data![0]\n    if (!workerData) return\n    Object.assign(workerData, mergeData([workerData, dynamicData])) // Mark art fields as dynamic\n    const unoptimizedOptimizationTargetNode = objPathValue(workerData.display ?? {}, optimizationTarget) as NumNode | undefined\n    if (!unoptimizedOptimizationTargetNode) return\n    const targetNode = unoptimizedOptimizationTargetNode\n    const valueFilter: { value: NumNode, minimum: number }[] = Object.entries(statFilters)\n      .flatMap(([pathStr, settings]) =>\n        settings\n          .filter(setting => !setting.disabled)\n          .map(setting => {\n            const filterNode: NumNode = objPathValue(workerData.display ?? {}, JSON.parse(pathStr))\n            const minimum = filterNode.info?.unit === \"%\" ? setting.value / 100 : setting.value // TODO: Conversion\n            return { value: filterNode, minimum: minimum }\n          })\n      )\n      .filter(x => x.value && x.minimum > -Infinity)\n\n    setChartData(undefined)\n\n    const cancelled = new Promise<void>(r => cancelToken.current = r)\n\n    const unoptimizedNodes = [...valueFilter.map(x => x.value), unoptimizedOptimizationTargetNode]\n    let arts = split!\n    const setPerms = filterFeasiblePerm(artSetPerm(artSetExclusion, Object.values(split.values).flatMap(x => x.map(x => x.set!))), split)\n\n    const minimum = [...valueFilter.map(x => x.minimum), -Infinity]\n    const status: Omit<BuildStatus, \"type\"> = { tested: 0, failed: 0, skipped: 0, total: NaN, startTime: performance.now() }\n    const plotBaseNumNode: NumNode = plotBase && objPathValue(workerData.display ?? {}, plotBase)\n    if (plotBaseNumNode) {\n      unoptimizedNodes.push(plotBaseNumNode)\n      minimum.push(-Infinity)\n    }\n\n    const prepruneArts = arts\n    let nodes = optimize(unoptimizedNodes, workerData, ({ path: [p] }) => p !== \"dyn\")\n    nodes = pruneExclusion(nodes, artSetExclusion);\n    ({ nodes, arts } = pruneAll(nodes, minimum, arts, maxBuildsToShow, artSetExclusion, {\n      reaffine: true, pruneArtRange: true, pruneNodeRange: true, pruneOrder: true\n    }))\n    nodes = optimize(nodes, {}, _ => false)\n\n    const plotBaseNode = plotBaseNumNode ? nodes.pop() : undefined\n    const optimizationTargetNode = nodes.pop()!\n\n    const wrap = { buildValues: Array(maxBuildsToShow).fill(0).map(_ => ({ src: \"\", val: -Infinity })) }\n\n    const minFilterCount = 16_000_000, maxRequestFilterInFlight = maxWorkers * 16\n    const unprunedFilters = setPerms[Symbol.iterator](), requestFilters: RequestFilter[] = []\n    const idleWorkers: number[] = [], splittingWorkers = new Set<number>()\n    const workers: Worker[] = []\n\n    function getThreshold(): number {\n      return wrap.buildValues[maxBuildsToShow - 1].val\n    }\n    function fetchContinueWork(): WorkerCommand {\n      return { command: \"split\", filter: undefined, minCount: minFilterCount, threshold: getThreshold() }\n    }\n    function fetchPruningWork(): WorkerCommand | undefined {\n      const { done, value } = unprunedFilters.next()\n      return done ? undefined : {\n        command: \"split\", minCount: minFilterCount,\n        threshold: getThreshold(), filter: value,\n      }\n    }\n    function fetchRequestWork(): WorkerCommand | undefined {\n      const filter = requestFilters.pop()\n      return !filter ? undefined : {\n        command: \"iterate\",\n        threshold: getThreshold(), filter\n      }\n    }\n\n    const filters = nodes\n      .map((value, i) => ({ value, min: minimum[i] }))\n      .filter(x => x.min > -Infinity)\n\n    const finalizedList: Promise<FinalizeResult>[] = []\n    for (let i = 0; i < maxWorkers; i++) {\n      const worker = new Worker(new URL('./BackgroundWorker.ts', import.meta.url))\n      worker.addEventListener(\"error\", _ => {\n        console.error(\"Failed to load worker\")\n        setWorkerErr(true)\n        cancelToken.current()\n      });\n\n      const setup: Setup = {\n        command: \"setup\",\n        id: i, arts,\n        optimizationTarget: optimizationTargetNode,\n        plotBase: plotBaseNode,\n        maxBuilds: maxBuildsToShow,\n        filters\n      }\n      worker.postMessage(setup, undefined)\n      if (i === 0) {\n        const countCommand: WorkerCommand = { command: \"count\", exclusion: artSetExclusion, arts: [arts, prepruneArts] }\n        worker.postMessage(countCommand, undefined)\n      }\n      let finalize: (_: FinalizeResult) => void\n      const finalized = new Promise<FinalizeResult>(r => finalize = r)\n      worker.onmessage = async ({ data }: { data: { id: number } & WorkerResult }) => {\n        setWorkerErr(false)\n        switch (data.command) {\n          case \"interim\":\n            status.tested += data.tested\n            status.failed += data.failed\n            status.skipped += data.skipped\n            if (data.buildValues) {\n              wrap.buildValues = wrap.buildValues.filter(({ src }) => src !== data.source)\n              wrap.buildValues.push(...data.buildValues.map(val => ({ src: data.source, val })))\n              wrap.buildValues.sort((a, b) => b.val - a.val).splice(maxBuildsToShow)\n            }\n            break\n          case \"split\":\n            if (data.filter) {\n              requestFilters.push(data.filter)\n              splittingWorkers.add(data.id)\n            } else splittingWorkers.delete(data.id)\n            idleWorkers.push(data.id)\n            break\n          case \"iterate\":\n            idleWorkers.push(data.id)\n            break\n          case \"finalize\":\n            worker.terminate()\n            finalize(data);\n\n            // Using a timeout because when an alert is displayed, the UI doesnt update, showing an incomplete loading bar\n            setTimeout(() => {\n              // Using a ref because a user can cancel the notification while the build is going.\n              if (notificationRef.current) {\n                audio.play()\n                if (!tabFocused.current)\n                  window.alert(t`buildCompleted`)\n              }\n            }, 100);\n            return\n          case \"count\":\n            const [pruned, prepruned] = data.counts\n            status.total = prepruned\n            status.skipped += prepruned - pruned\n            return\n          default: console.log(\"DEBUG\", data)\n        }\n        while (idleWorkers.length) {\n          const id = idleWorkers.pop()!, worker = workers[id]\n          let work: WorkerCommand | undefined\n          if (requestFilters.length < maxRequestFilterInFlight) {\n            work = fetchPruningWork()\n            if (!work && splittingWorkers.has(id)) work = fetchContinueWork()\n          }\n          if (!work) work = fetchRequestWork()\n          if (work) worker.postMessage(work)\n          else {\n            idleWorkers.push(id)\n            if (idleWorkers.length === 4 * maxWorkers) {\n              const command: WorkerCommand = { command: \"finalize\" }\n              workers.forEach(worker => worker.postMessage(command))\n            }\n            break\n          }\n        }\n      }\n\n      workers.push(worker)\n      cancelled.then(() => worker.terminate())\n      finalizedList.push(finalized)\n    }\n    for (let i = 0; i < 3; i++)\n      idleWorkers.push(...range(0, maxWorkers - 1))\n\n    const buildTimer = setInterval(() => setBuildStatus({ type: \"active\", ...status }), 100)\n    const results = await Promise.any([Promise.all(finalizedList), cancelled])\n    clearInterval(buildTimer)\n    cancelToken.current = () => { }\n\n    if (!results) {\n      status.tested = 0\n      status.failed = 0\n      status.skipped = 0\n      status.total = 0\n    } else {\n      if (plotBaseNumNode) {\n        const plotData = mergePlot(results.map(x => x.plotData!))\n        let data = Object.values(plotData)\n        if (targetNode.info?.unit === \"%\")\n          data = data.map(({ value, plot, artifactIds }) => ({ value: value * 100, plot, artifactIds })) as Build[]\n        if (plotBaseNumNode.info?.unit === \"%\")\n          data = data.map(({ value, plot, artifactIds }) => ({ value, plot: (plot ?? 0) * 100, artifactIds })) as Build[]\n        setChartData({\n          valueNode: targetNode,\n          plotNode: plotBaseNumNode,\n          data\n        })\n      }\n      const builds = mergeBuilds(results.map(x => x.builds), maxBuildsToShow)\n      if (process.env.NODE_ENV === \"development\") console.log(\"Build Result\", builds)\n      buildResultDispatch({ builds: builds.map(build => build.artifactIds), buildDate: Date.now() })\n    }\n    setBuildStatus({ ...status, type: \"inactive\", finishTime: performance.now() })\n  }, [t, characterKey, filteredArts, database, buildResultDispatch, maxWorkers, buildSetting, notificationRef, setChartData, gender])\n\n  const characterName = characterSheet?.name ?? \"Character Name\"\n\n  const setPlotBase = useCallback(plotBase => {\n    buildSettingDispatch({ plotBase })\n    setChartData(undefined)\n  }, [buildSettingDispatch, setChartData])\n  const dataContext: dataContextObj | undefined = useMemo(() => {\n    return data && teamData && { data, teamData }\n  }, [data, teamData])\n\n  const targetSelector = <OptimizationTargetSelector\n    optimizationTarget={optimizationTarget}\n    setTarget={target => buildSettingDispatch({ optimizationTarget: target })}\n    disabled={!!generatingBuilds}\n  />\n\n  const getLabel0 = useCallback((index) => <Trans t={t} i18nKey=\"graphBuildLabel\" count={index + 1}>Graph #{{ count: index + 1 }}</Trans>, [t])\n  const getLabel1 = useCallback((index) => `#${index + 1}`, [])\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n    {noArtifact && <Alert severity=\"warning\" variant=\"filled\"><Trans t={t} i18nKey=\"noArtis\">Oops! It looks like you haven't added any artifacts to GO yet! You should go to the <Link component={RouterLink} to=\"/artifacts\">Artifacts</Link> page and add some!</Trans></Alert>}\n    {/* Build Generator Editor */}\n    {dataContext && <DataContext.Provider value={dataContext}>\n\n      <Grid container spacing={1} >\n        {/* 1*/}\n        <Grid item xs={12} sm={6} lg={3} display=\"flex\" flexDirection=\"column\" gap={1}>\n          {/* character card */}\n          <Box><CharacterCard characterKey={characterKey} onClickTeammate={onClickTeammate} /></Box>\n        </Grid>\n\n        {/* 2 */}\n        <Grid item xs={12} sm={6} lg={4} display=\"flex\" flexDirection=\"column\" gap={1}>\n          <CardLight>\n            <CardContent  >\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                <AssumeFullLevelToggle mainStatAssumptionLevel={mainStatAssumptionLevel} setmainStatAssumptionLevel={mainStatAssumptionLevel => buildSettingDispatch({ mainStatAssumptionLevel })} disabled={generatingBuilds} />\n                <InfoTooltip title={<Box>\n                  <Typography variant=\"h6\">{t`mainStat.levelAssTooltip.title`}</Typography>\n                  <Typography>{t`mainStat.levelAssTooltip.desc`}</Typography>\n                </Box>} />\n              </Box>\n            </CardContent>\n            {/* main stat selector */}\n            <MainStatSelectionCard disabled={generatingBuilds} filteredArtIds={filteredArtIds} />\n          </CardLight>\n          <BonusStatsCard />\n        </Grid>\n\n        {/* 3 */}\n        <Grid item xs={12} sm={6} lg={5} display=\"flex\" flexDirection=\"column\" gap={1}>\n          <ArtifactSetConfig disabled={generatingBuilds} />\n\n          {/* use excluded */}\n          <UseExcluded disabled={generatingBuilds} artsDirty={artsDirty} />\n\n          {/* use equipped */}\n          <UseEquipped disabled={generatingBuilds} filteredArts={filteredArts} />\n\n          <Button\n            fullWidth\n            startIcon={allowPartial ? <CheckBox /> : <CheckBoxOutlineBlank />}\n            color={allowPartial ? \"success\" : \"secondary\"}\n            onClick={() => buildSettingDispatch({ allowPartial: !allowPartial })}\n            disabled={generatingBuilds}\n          >\n            {t`allowPartial`}\n          </Button>\n          { /* Level Filter */}\n          <CardLight>\n            <CardContent>{t`levelFilter`} <SqBadge color=\"info\">{levelTotal}</SqBadge></CardContent>\n            <ArtifactLevelSlider levelLow={levelLow} levelHigh={levelHigh}\n              setLow={levelLow => buildSettingDispatch({ levelLow })}\n              setHigh={levelHigh => buildSettingDispatch({ levelHigh })}\n              setBoth={(levelLow, levelHigh) => buildSettingDispatch({ levelLow, levelHigh })}\n              disabled={generatingBuilds}\n            />\n          </CardLight>\n\n          {/*Minimum Final Stat Filter */}\n          <StatFilterCard disabled={generatingBuilds} />\n\n        </Grid>\n      </Grid>\n      {/* Footer */}\n      {isSM && targetSelector}\n      <ButtonGroup>\n        {!isSM && targetSelector}\n        <DropdownButton disabled={generatingBuilds || !characterKey}\n          title={<Trans t={t} i18nKey=\"build\" count={maxBuildsToShow}>\n            {{ count: maxBuildsToShow }} Builds\n          </Trans>}>\n          <MenuItem>\n            <Typography variant=\"caption\" color=\"info.main\">\n              {t(\"buildDropdownDesc\")}\n            </Typography>\n          </MenuItem>\n          <Divider />\n          {maxBuildsToShowList.map(v => <MenuItem key={v}\n            onClick={() => buildSettingDispatch({ maxBuildsToShow: v })}>\n            <Trans t={t} i18nKey=\"build\" count={v}>\n              {{ count: v }} Builds\n            </Trans>\n          </MenuItem>)}\n        </DropdownButton>\n        <DropdownButton disabled={generatingBuilds || !characterKey}\n          sx={{ borderRadius: \"4px 0px 0px 4px\" }}\n          title={<Trans t={t} i18nKey=\"thread\" count={maxWorkers}>\n            {{ count: maxWorkers }} Threads\n          </Trans>}>\n          <MenuItem>\n            <Typography variant=\"caption\" color=\"info.main\">\n              {t(\"threadDropdownDesc\")}\n            </Typography>\n          </MenuItem>\n          <Divider />\n          {range(1, defThreads).reverse().map(v => <MenuItem key={v}\n            onClick={() => setMaxWorkers(v)}>\n            <Trans t={t} i18nKey=\"thread\" count={v}>\n              {{ count: v }} Threads\n            </Trans>\n          </MenuItem>)}\n        </DropdownButton>\n        <BootstrapTooltip placement=\"top\" title={t`notifyTooltip`}>\n          <Button sx={{ borderRadius: 0 }} color='warning' onClick={() => setnotification(n => !n)} >\n            {notification ? <NotificationsActiveIcon /> : <NotificationsOffIcon />}\n          </Button>\n        </BootstrapTooltip>\n        <BootstrapTooltip placement=\"top\" title={!optimizationTarget ? t(\"selectTargetFirst\") : \"\"}>\n          <span>\n            <Button\n              disabled={!characterKey || !optimizationTarget || !optimizationTargetNode || optimizationTargetNode.isEmpty}\n              color={generatingBuilds ? \"error\" : \"success\"}\n              onClick={generatingBuilds ? () => cancelToken.current() : generateBuilds}\n              startIcon={generatingBuilds ? <Close /> : <TrendingUp />}\n              sx={{ borderRadius: \"0px 4px 4px 0px\" }}\n            >{generatingBuilds ? t(\"generateButton.cancel\") : t(\"generateButton.generateBuilds\")}</Button>\n          </span>\n        </BootstrapTooltip>\n      </ButtonGroup>\n      {workerErr && <WorkerErr />}\n      {!!characterKey && <BuildAlert {...{ status: buildStatus, characterName, maxBuildsToShow }} />}\n      <Box >\n        <ChartCard disabled={generatingBuilds || !optimizationTarget} plotBase={plotBase} setPlotBase={setPlotBase} showTooltip={!optimizationTarget} />\n      </Box>\n      <CardLight>\n        <CardContent>\n          <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1} >\n            <Typography sx={{ flexGrow: 1 }}>\n              {builds ? <span>Showing <strong>{builds.length + (graphBuilds ? graphBuilds.length : 0)}</strong> build generated for {characterName}. {!!buildDate && <span>Build generated on: <strong>{(new Date(buildDate)).toLocaleString()}</strong></span>}</span>\n                : <span>Select a character to generate builds.</span>}\n            </Typography>\n            <Button disabled={!builds.length} color=\"error\" onClick={() => { setGraphBuilds(undefined); buildResultDispatch({ builds: [], buildDate: 0 }) }} >Clear Builds</Button>\n          </Box>\n          <Grid container display=\"flex\" spacing={1}>\n            <Grid item><HitModeToggle size=\"small\" /></Grid>\n            <Grid item><ReactionToggle size=\"small\" /></Grid>\n            <Grid item flexGrow={1} />\n            <Grid item><SolidToggleButtonGroup exclusive value={compareData} onChange={(_e, v) => characterDispatch({ compareData: v })} size=\"small\">\n              <ToggleButton value={false} disabled={!compareData}>Show new builds</ToggleButton>\n              <ToggleButton value={true} disabled={compareData}>Compare vs. equipped</ToggleButton>\n            </SolidToggleButtonGroup></Grid>\n          </Grid>\n        </CardContent>\n      </CardLight>\n      <OptimizationTargetContext.Provider value={optimizationTarget}>\n        {graphBuilds && <BuildList builds={graphBuilds} characterKey={characterKey} data={data} compareData={compareData} disabled={!!generatingBuilds} getLabel={getLabel0} setBuilds={setGraphBuilds} />}\n        <BuildList builds={builds} characterKey={characterKey} data={data} compareData={compareData} disabled={!!generatingBuilds} getLabel={getLabel1} />\n      </OptimizationTargetContext.Provider>\n    </DataContext.Provider>}\n  </Box>\n}\nfunction BuildList({ builds, setBuilds, characterKey, data, compareData, disabled, getLabel }: {\n  builds: string[][]\n  setBuilds?: (builds: string[][] | undefined) => void\n  characterKey?: \"\" | CharacterKey\n  data?: UIData\n  compareData: boolean\n  disabled: boolean\n  getLabel: (index: number) => Displayable\n}) {\n  const deleteBuild = useCallback((index: number) => {\n    if (setBuilds) {\n      const builds_ = [...builds]\n      builds_.splice(index, 1)\n      setBuilds(builds_)\n    }\n  },\n    [builds, setBuilds])\n  // Memoize the build list because calculating/rendering the build list is actually very expensive, which will cause longer optimization times.\n  const list = useMemo(() => <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\n    {builds?.map((build, index) => characterKey && data && <DataContextWrapper\n      key={index + build.join()}\n      characterKey={characterKey}\n      build={build}\n      oldData={data}\n    >\n      <BuildItemWrapper index={index} label={getLabel(index)} build={build} compareData={compareData} disabled={disabled} deleteBuild={setBuilds ? deleteBuild : undefined} />\n    </DataContextWrapper>\n    )}\n  </Suspense>, [builds, characterKey, data, compareData, disabled, getLabel, deleteBuild, setBuilds])\n  return list\n}\nfunction BuildItemWrapper({ index, label, build, compareData, disabled, deleteBuild }: {\n  index: number\n  label: Displayable\n  build: string[]\n  compareData: boolean\n  disabled: boolean\n  deleteBuild?: (index: number) => void\n}) {\n  const { t } = useTranslation(\"page_character_optimize\")\n  const location = useLocation()\n  const navigate = useNavigate()\n  const toTC = useCallback(() => {\n    const paths = location.pathname.split(\"/\")\n    paths.pop()\n    navigate(`${paths.join(\"/\")}/theorycraft`, { state: { build } })\n  }, [navigate, build, location.pathname])\n\n  return <BuildDisplayItem label={label} compareBuild={compareData} disabled={disabled}\n    extraButtonsLeft={<>\n      <Button color=\"info\" size=\"small\" startIcon={<Science />} onClick={toTC}>{t(\"theorycraftButton\")}</Button>\n      {deleteBuild && <Button color=\"error\" size=\"small\" startIcon={<DeleteForever />} onClick={() => deleteBuild(index)}>{t(\"removeBuildButton\")}</Button>}\n    </>}\n  />\n}\n\ntype Prop = {\n  children: React.ReactNode\n  characterKey: CharacterKey,\n  build: string[],\n  oldData: UIData,\n}\nfunction DataContextWrapper({ children, characterKey, build, oldData }: Prop) {\n  const { database } = useContext(DatabaseContext)\n  const { buildSetting: { mainStatAssumptionLevel } } = useBuildSetting(characterKey)\n  // Update the build when the build artifacts are changed.\n  const [dirty, setDirty] = useForceUpdate()\n  useEffect(() => database.arts.followAny((id) => build.includes(id) && setDirty()), [database, build, setDirty])\n  const buildsArts = useMemo(() => dirty && build.map(i => database.arts.get(i)!), [dirty, build, database])\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel, buildsArts)\n  const providerValue = useMemo(() => teamData && ({ data: teamData[characterKey]!.target, teamData, oldData }), [teamData, oldData, characterKey])\n  if (!providerValue) return null\n  return <DataContext.Provider value={providerValue}>\n    {children}\n  </DataContext.Provider>\n}\n","import { CharacterKey, Gender } from \"@genshin-optimizer/consts\"\r\nimport Albedo from \"./Character_Albedo_Card.png\"\r\nimport Alhaitham from \"./Character_Alhaitham_Card.jpg\"\r\nimport Aloy from \"./Character_Aloy_Card.png\"\r\nimport Amber from \"./Character_Amber_Card.jpg\"\r\nimport AratakiItto from \"./Character_Arataki_Itto_Card.jpg\"\r\nimport Barbara from \"./Character_Barbara_Card.jpg\"\r\nimport Beidou from \"./Character_Beidou_Card.jpg\"\r\nimport Bennett from \"./Character_Bennett_Card.jpg\"\r\nimport Candace from \"./Character_Candace_Card.jpg\"\r\nimport Chongyun from \"./Character_Chongyun_Card.jpg\"\r\nimport Collei from \"./Character_Collei_Card.jpg\"\r\nimport Cyno from \"./Character_Cyno_Card.jpg\"\r\nimport Diluc from \"./Character_Diluc_Card.jpg\"\r\nimport Diona from \"./Character_Diona_Card.png\"\r\nimport Dori from \"./Character_Dori_Card.jpg\"\r\nimport Eula from \"./Character_Eula_Card.png\"\r\nimport Faruzan from \"./Character_Faruzan_Card.jpg\"\r\nimport Fischl from \"./Character_Fischl_Card.jpg\"\r\nimport Ganyu from \"./Character_Ganyu_Card.png\"\r\nimport Gorou from \"./Character_Gorou_Card.jpg\"\r\nimport HuTao from \"./Character_Hu_Tao_Card.jpg\"\r\nimport Jean from \"./Character_Jean_Card.jpg\"\r\nimport Kaeya from \"./Character_Kaeya_Card.jpg\"\r\nimport KamisatoAyaka from \"./Character_Kamisato_Ayaka_Card.png\"\r\nimport KamisatoAyato from \"./Character_Kamisato_Ayato_Card.png\"\r\nimport KaedeharaKazuha from \"./Character_Kazuha_Card.png\"\r\nimport Keqing from \"./Character_Keqing_Card.jpg\"\r\nimport Klee from \"./Character_Klee_Card.jpg\"\r\nimport KujouSara from \"./Character_Kujou_Sara_Card.jpg\"\r\nimport KukiShinobu from \"./Character_Kuki_Shinobu_Card.jpg\"\r\nimport Layla from \"./Character_Layla_Card.jpeg\"\r\nimport Lisa from \"./Character_Lisa_Card.jpg\"\r\nimport Mona from \"./Character_Mona_Card.jpg\"\r\nimport Nahida from \"./Character_Nahida_Card.jpeg\"\r\nimport Nilou from \"./Character_Nilou_Card.jpg\"\r\nimport Ningguang from \"./Character_Ningguang_Card.jpg\"\r\nimport Noelle from \"./Character_Noelle_Card.jpg\"\r\nimport Qiqi from \"./Character_Qiqi_Card.jpg\"\r\nimport RaidenShogun from \"./Character_Raiden_Shogun_Card.png\"\r\nimport Razor from \"./Character_Razor_Card.jpg\"\r\nimport Rosaria from \"./Character_Rosaria_Card.png\"\r\nimport SangonomiyaKokomi from \"./Character_Sangonomiya_Kokomi_Card.jpg\"\r\nimport Sayu from \"./Character_Sayu_Card.png\"\r\nimport Shenhe from \"./Character_Shenhe_Card.jpg\"\r\nimport ShikanoinHeizou from \"./Character_Shikanoin_Heizou_Card.png\"\r\nimport Sucrose from \"./Character_Sucrose_Card.jpg\"\r\nimport Tartaglia from \"./Character_Tartaglia_Card.png\"\r\nimport Thoma from \"./Character_Thoma_Card.jpg\"\r\nimport Tighnari from \"./Character_Tighnari_Card.jpg\"\r\nimport Venti from \"./Character_Venti_Card.jpg\"\r\nimport Wanderer from \"./Character_Wanderer_Card.jpg\"\r\nimport Xiangling from \"./Character_Xiangling_Card.jpg\"\r\nimport Xiao from \"./Character_Xiao_Card.jpg\"\r\nimport Xingqiu from \"./Character_Xingqiu_Card.jpg\"\r\nimport Xinyan from \"./Character_Xinyan_Card.jpg\"\r\nimport YaeMiko from \"./Character_Yae_Miko_Card.png\"\r\nimport Yanfei from \"./Character_Yanfei_Card.png\"\r\nimport Yaoyao from \"./Character_Yaoyao_Card.jpg\"\r\nimport Yelan from \"./Character_Yelan_Card.jpg\"\r\nimport Yoimiya from \"./Character_Yoimiya_Card.png\"\r\nimport YunJin from \"./Character_Yun_Jin_Card.jpg\"\r\nimport Zhongli from \"./Character_Zhongli_Card.png\"\r\nimport TravelerF from \"./Traveler_Female_Card.jpg\"\r\nimport TravelerM from \"./Traveler_Male_Card.jpg\"\r\n\r\nconst charCards = {\r\n  Albedo,\r\n  Alhaitham,\r\n  Aloy,\r\n  Amber,\r\n  AratakiItto,\r\n  Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  Candace,\r\n  Chongyun,\r\n  Collei,\r\n  Cyno,\r\n  Diluc,\r\n  Diona,\r\n  Dori,\r\n  Eula,\r\n  Faruzan,\r\n  Fischl,\r\n  Ganyu,\r\n  Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  Kaeya,\r\n  KamisatoAyaka,\r\n  KamisatoAyato,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  KukiShinobu,\r\n  Layla,\r\n  Lisa,\r\n  Mona,\r\n  Nahida,\r\n  Nilou,\r\n  Ningguang,\r\n  Noelle,\r\n  Qiqi,\r\n  RaidenShogun,\r\n  Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  Sayu,\r\n  Shenhe,\r\n  ShikanoinHeizou,\r\n  Sucrose,\r\n  Tartaglia,\r\n  Thoma,\r\n  Tighnari,\r\n  TravelerF,\r\n  TravelerM,\r\n  Venti,\r\n  Wanderer,\r\n  Xiangling,\r\n  Xiao,\r\n  Xingqiu,\r\n  Xinyan,\r\n  YaeMiko,\r\n  Yanfei,\r\n  Yaoyao,\r\n  Yelan,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\n\r\nexport function charCard(charKey: CharacterKey, gender: Gender): string {\r\n  switch (charKey) {\r\n    case \"TravelerAnemo\":\r\n    case \"TravelerDendro\":\r\n    case \"TravelerElectro\":\r\n    case \"TravelerGeo\":\r\n      return charCards[`Traveler${gender}`] ?? \"\"\r\n    default:\r\n      return charCards[charKey] ?? \"\"\r\n  }\r\n}\r\n","import { Close, Difference } from \"@mui/icons-material\"\r\nimport { Button, Skeleton, Tooltip, Typography } from \"@mui/material\"\r\nimport { Suspense, useContext, useMemo } from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { CharacterContext } from \"../../../../Context/CharacterContext\"\r\nimport { HitModeToggle, ReactionToggle } from \"../../../../Components/HitModeEditor\"\r\nimport ModalWrapper from \"../../../../Components/ModalWrapper\"\r\nimport { DatabaseContext } from \"../../../../Database/Database\"\r\nimport { DataContext } from \"../../../../Context/DataContext\"\r\nimport useBoolState from \"../../../../ReactHooks/useBoolState\"\r\nimport useTeamData from \"../../../../ReactHooks/useTeamData\"\r\nimport { objectMap } from \"../../../../Util/Util\"\r\nimport useBuildSetting from \"../TabOptimize/useBuildSetting\"\r\nimport BuildDisplayItem from \"../TabOptimize/Components/BuildDisplayItem\"\r\n\r\nexport default function CompareBuildButton({ artId, weaponId }: { artId?: string, weaponId?: string }) {\r\n  const { t } = useTranslation(\"page_character\")\r\n  const [show, onShow, onHide] = useBoolState(false)\r\n\r\n  return <>\r\n    <ModalWrapper open={show} onClose={onHide} containerProps={{ maxWidth: \"xl\" }}>\r\n      <CompareContent artId={artId} weaponId={weaponId} onHide={onHide} />\r\n    </ModalWrapper>\r\n    <Tooltip title={<Typography>{t`tabEquip.compare`}</Typography>} placement=\"top\" arrow>\r\n      <Button color=\"info\" size=\"small\" onClick={onShow} ><Difference /></Button>\r\n    </Tooltip>\r\n  </>\r\n}\r\nfunction CompareContent({ artId, weaponId, onHide }: { artId?: string, weaponId?: string, onHide: () => void }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { character: { key: characterKey, equippedArtifacts } } = useContext(CharacterContext)\r\n  const { buildSetting: { mainStatAssumptionLevel } } = useBuildSetting(characterKey)\r\n  const { data: oldData } = useContext(DataContext)\r\n  const build = useMemo(() => {\r\n    const newArt = database.arts.get(artId ?? \"\")\r\n    const artmap = objectMap(equippedArtifacts, (id, slot) => slot === newArt?.slotKey ? newArt : database.arts.get(id))\r\n    return Object.values(artmap).filter(a => a)\r\n  }, [database, equippedArtifacts, artId])\r\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel, build, weaponId ? database.weapons.get(weaponId) : undefined)\r\n  const dataProviderValue = useMemo(() => teamData && ({ data: teamData[characterKey]!.target, teamData, oldData }), [characterKey, teamData, oldData])\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\r\n    {dataProviderValue && <DataContext.Provider value={dataProviderValue}>\r\n      <BuildDisplayItem compareBuild={true} extraButtonsLeft={<><HitModeToggle size=\"small\" /><ReactionToggle size=\"small\" /></>} extraButtonsRight={<Button size='small' color=\"error\" onClick={onHide} ><Close /></Button>} />\r\n    </DataContext.Provider>}\r\n  </Suspense>\r\n}\r\n","import { Box, CardContent, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\r\nimport { lazy, Suspense, useCallback, useContext, useEffect, useMemo, useReducer } from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Assets from \"../../../../Assets/Assets\"\r\nimport CardDark from \"../../../../Components/Card/CardDark\"\r\nimport CloseButton from \"../../../../Components/CloseButton\"\r\nimport ImgIcon from \"../../../../Components/Image/ImgIcon\"\r\nimport ModalWrapper from \"../../../../Components/ModalWrapper\"\r\nimport { DatabaseContext } from \"../../../../Database/Database\"\r\nimport ArtifactCard from \"../../../../PageArtifact/ArtifactCard\"\r\nimport { artifactFilterConfigs, FilterOption, initialFilterOption } from \"../../../../PageArtifact/ArtifactSort\"\r\nimport useForceUpdate from \"../../../../ReactHooks/useForceUpdate\"\r\nimport useMediaQueryUp from \"../../../../ReactHooks/useMediaQueryUp\"\r\nimport { SlotKey } from \"../../../../Types/consts\"\r\nimport { filterFunction } from \"../../../../Util/SortByFilters\"\r\nimport CompareBuildButton from \"./CompareBuildButton\"\r\nconst numToShowMap = { xs: 6, sm: 6, md: 9, lg: 12, xl: 12 }\r\n\r\nconst ArtifactFilterDisplay = lazy(() => import('../../../../Components/Artifact/ArtifactFilterDisplay'))\r\n\r\nexport default function ArtifactSwapModal({ onChangeId, slotKey, show, onClose }:\r\n  { onChangeId: (id: string) => void, slotKey: SlotKey, show: boolean, onClose: () => void }) {\r\n  const { t } = useTranslation(\"page_character\")\r\n  const { database } = useContext(DatabaseContext)\r\n  const clickHandler = useCallback((id) => {\r\n    onChangeId(id)\r\n    onClose()\r\n  }, [onChangeId, onClose])\r\n  const filterOptionReducer = useCallback((state, action) => ({ ...state, ...action, slotKeys: [slotKey] }), [slotKey],)\r\n\r\n  const [filterOption, filterOptionDispatch]: [FilterOption, (action: any) => void] = useReducer(filterOptionReducer, { ...initialFilterOption(), slotKeys: [slotKey] })\r\n\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  useEffect(() => { return database.arts.followAny(forceUpdate) }, [database, forceUpdate])\r\n\r\n  const brPt = useMediaQueryUp()\r\n\r\n  const filterConfigs = useMemo(() => artifactFilterConfigs(), [])\r\n  const artIdList = useMemo(() => {\r\n    const filterFunc = filterFunction(filterOption, filterConfigs)\r\n    return dbDirty && database.arts.values.filter(filterFunc).map(art => art.id).slice(0, numToShowMap[brPt])\r\n  }, [dbDirty, database, filterConfigs, filterOption, brPt])\r\n\r\n  return <ModalWrapper open={show} onClose={onClose} containerProps={{ maxWidth: \"xl\" }} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1, display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n        <Typography variant=\"h6\">{slotKey ? <ImgIcon src={Assets.slot[slotKey]} /> : null} {t`tabEquip.swapArt`}</Typography>\r\n        <CloseButton onClick={onClose} />\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={200} />}>\r\n          <ArtifactFilterDisplay filterOption={filterOption} filterOptionDispatch={filterOptionDispatch} filteredIds={artIdList} disableSlotFilter />\r\n        </Suspense>\r\n        <Box mt={1}>\r\n          <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={300} />}>\r\n            <Grid container spacing={1} columns={{ xs: 2, md: 3, lg: 4 }}>\r\n              {artIdList.map(id =>\r\n                <Grid item key={id} xs={1} >\r\n                  <ArtifactCard\r\n                    artifactId={id}\r\n                    extraButtons={<CompareBuildButton artId={id} />}\r\n                    onClick={clickHandler}\r\n                  />\r\n                </Grid>)}\r\n            </Grid>\r\n          </Suspense>\r\n        </Box>\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n","import { allRarities, Rarity, WeaponKey, WeaponTypeKey } from \"@genshin-optimizer/consts\"\r\nimport { Add } from \"@mui/icons-material\"\r\nimport StarRoundedIcon from '@mui/icons-material/StarRounded'\r\nimport { Box, Button, CardContent, Divider, Grid, TextField, ToggleButton, Typography } from \"@mui/material\"\r\nimport { ChangeEvent, Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useState } from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Assets from \"../../../../Assets/Assets\"\r\nimport CardDark from \"../../../../Components/Card/CardDark\"\r\nimport CloseButton from \"../../../../Components/CloseButton\"\r\nimport ImgIcon from \"../../../../Components/Image/ImgIcon\"\r\nimport ModalWrapper from \"../../../../Components/ModalWrapper\"\r\nimport SolidToggleButtonGroup from \"../../../../Components/SolidToggleButtonGroup\"\r\nimport WeaponSelectionModal from \"../../../../Components/Weapon/WeaponSelectionModal\"\r\nimport { DatabaseContext } from \"../../../../Database/Database\"\r\nimport WeaponCard from \"../../../../PageWeapon/WeaponCard\"\r\nimport WeaponEditor from \"../../../../PageWeapon/WeaponEditor\"\r\nimport useForceUpdate from '../../../../ReactHooks/useForceUpdate'\r\nimport { handleMultiSelect } from \"../../../../Util/MultiSelect\"\r\nimport { filterFunction, sortFunction } from '../../../../Util/SortByFilters'\r\nimport { weaponFilterConfigs, weaponSortConfigs, weaponSortMap } from '../../../../Util/WeaponSort'\r\nimport { initialWeapon } from \"../../../../Util/WeaponUtil\"\r\nimport CompareBuildButton from \"./CompareBuildButton\"\r\n\r\nconst rarityHandler = handleMultiSelect([...allRarities])\r\n\r\nexport default function WeaponSwapModal({ onChangeId, weaponTypeKey, show, onClose }: { onChangeId: (id: string) => void, weaponTypeKey: WeaponTypeKey, show: boolean, onClose: () => void }) {\r\n  const { t } = useTranslation([\"page_character\", \"page_weapon\", \"weaponNames_gen\"])\r\n  const { database } = useContext(DatabaseContext)\r\n  const [newWeaponModalShow, setnewWeaponModalShow] = useState(false)\r\n  const clickHandler = useCallback((id: string) => {\r\n    onChangeId(id)\r\n    onClose()\r\n  }, [onChangeId, onClose])\r\n\r\n  const [editWeaponId, setEditWeaponId] = useState(\"\")\r\n  const newWeapon = useCallback((weaponKey: WeaponKey) => {\r\n    setEditWeaponId(database.weapons.new(initialWeapon(weaponKey)))\r\n  }, [database, setEditWeaponId])\r\n  const resetEditWeapon = useCallback(() => setEditWeaponId(\"\"), [])\r\n\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  useEffect(() => database.weapons.followAny(forceUpdate), [forceUpdate, database])\r\n\r\n  const [rarity, setRarity] = useState<Rarity[]>([5, 4, 3])\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const deferredSearchTerm = useDeferredValue(searchTerm)\r\n\r\n  const weaponIdList = useMemo(() => (dbDirty && database.weapons.values\r\n    .filter(filterFunction({ weaponType: weaponTypeKey, rarity, name: deferredSearchTerm }, weaponFilterConfigs()))\r\n    .sort(sortFunction(weaponSortMap[\"level\"] ?? [], false, weaponSortConfigs()))\r\n    .map(weapon => weapon.id)) ?? []\r\n    , [dbDirty, database, rarity, weaponTypeKey, deferredSearchTerm])\r\n\r\n  return <ModalWrapper open={show} onClose={onClose} >\r\n    <CardDark>\r\n      <Suspense fallback={false}>\r\n        <WeaponSelectionModal show={newWeaponModalShow} onHide={() => setnewWeaponModalShow(false)} onSelect={newWeapon} weaponTypeFilter={weaponTypeKey} />\r\n      </Suspense>\r\n      {/* Editor/character detail display */}\r\n      <Suspense fallback={false}>\r\n        <WeaponEditor\r\n          weaponId={editWeaponId}\r\n          footer\r\n          onClose={resetEditWeapon}\r\n        />\r\n      </Suspense>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} {t`page_character:tabEquip.swapWeapon`}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={onClose} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n        <Grid container spacing={1} >\r\n          <Grid item>\r\n            <SolidToggleButtonGroup sx={{ height: \"100%\" }} value={rarity} size=\"small\">\r\n              {allRarities.map(star => <ToggleButton key={star} value={star} onClick={() => setRarity(rarityHandler(rarity, star))}>\r\n                <Box display=\"flex\"><strong>{star}</strong><StarRoundedIcon /></Box>\r\n              </ToggleButton>)}\r\n            </SolidToggleButtonGroup>\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            <TextField\r\n              autoFocus\r\n              size=\"small\"\r\n              value={searchTerm}\r\n              onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setSearchTerm(e.target.value)}\r\n              label={t(\"page_weapon:weaponName\")}\r\n              sx={{ height: \"100%\" }}\r\n              InputProps={{\r\n                sx: { height: \"100%\" }\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Button fullWidth onClick={() => setnewWeaponModalShow(true)} color=\"info\" startIcon={<Add />} >{t(\"page_weapon:addWeapon\")}</Button>\r\n        <Grid container spacing={1}>\r\n          {weaponIdList.map(weaponId =>\r\n            <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\r\n              <WeaponCard\r\n                weaponId={weaponId}\r\n                onClick={clickHandler}\r\n                extraButtons={<CompareBuildButton weaponId={weaponId} />}\r\n              />\r\n            </Grid>)}\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n","import { allSlotKeys, SlotKey, WeaponTypeKey } from '@genshin-optimizer/consts';\nimport { Settings, SwapHoriz } from '@mui/icons-material';\nimport { Box, Button, CardContent, Divider, Grid, ListItem, Stack, Tooltip, Typography, useMediaQuery, useTheme } from '@mui/material';\nimport { lazy, Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport SetEffectDisplay from '../../../../Components/Artifact/SetEffectDisplay';\nimport SlotIcon from '../../../../Components/Artifact/SlotIcon';\nimport SubstatToggle from '../../../../Components/Artifact/SubstatToggle';\nimport CardDark from '../../../../Components/Card/CardDark';\nimport CardLight from '../../../../Components/Card/CardLight';\nimport DocumentDisplay from \"../../../../Components/DocumentDisplay\";\nimport { BasicFieldDisplay, FieldDisplayList } from '../../../../Components/FieldDisplay';\nimport ModalWrapper from '../../../../Components/ModalWrapper';\nimport PercentBadge from '../../../../Components/PercentBadge';\nimport { CharacterContext } from '../../../../Context/CharacterContext';\nimport { DataContext } from '../../../../Context/DataContext';\nimport { dataSetEffects } from '../../../../Data/Artifacts';\nimport Artifact from '../../../../Data/Artifacts/Artifact';\nimport { DatabaseContext } from '../../../../Database/Database';\nimport { uiInput as input } from '../../../../Formula';\nimport ArtifactCard from '../../../../PageArtifact/ArtifactCard';\nimport WeaponCard from '../../../../PageWeapon/WeaponCard';\nimport useBoolState from '../../../../ReactHooks/useBoolState';\nimport useCharMeta from '../../../../ReactHooks/useCharMeta';\nimport { iconInlineProps } from '../../../../SVGIcons';\nimport { allSubstatKeys } from '../../../../Types/artifact';\nimport { charKeyToLocCharKey } from '../../../../Types/consts';\nimport { IFieldDisplay } from '../../../../Types/fieldDisplay';\nimport ArtifactSwapModal from './ArtifactSwapModal';\nimport WeaponSwapModal from './WeaponSwapModal';\n\nconst WeaponEditor = lazy(() => import('../../../../PageWeapon/WeaponEditor'))\n\nexport default function EquipmentSection() {\n  const { character: { equippedWeapon, key: characterKey }, characterSheet } = useContext(CharacterContext)\n  const { teamData, data } = useContext(DataContext)\n  const weaponSheet = teamData[characterKey]?.weaponSheet\n  const [weaponId, setweaponId] = useState(\"\")\n  const showWeapon = useCallback(() => setweaponId(equippedWeapon), [equippedWeapon],)\n  const hideWeapon = useCallback(() => setweaponId(\"\"), [])\n\n  //triggers when character swap weapons\n  useEffect(() => {\n    if (weaponId && weaponId !== equippedWeapon)\n      setweaponId(equippedWeapon)\n  }, [weaponId, equippedWeapon])\n\n  const theme = useTheme();\n  const breakpoint = useMediaQuery(theme.breakpoints.up('lg'));\n\n  const weaponDoc = useMemo(() => weaponSheet && weaponSheet.document.length > 0 && <CardLight><CardContent><DocumentDisplay sections={weaponSheet.document} /></CardContent></CardLight>, [weaponSheet])\n  const { rvFilter } = useCharMeta(characterKey)\n  const deferredRvFilter = useDeferredValue(rvFilter)\n  const deferredRvSet = useMemo(() => new Set(deferredRvFilter), [deferredRvFilter])\n  return <Box >\n    <Suspense fallback={false}>\n      <WeaponEditor\n        weaponId={weaponId}\n        footer\n        onClose={hideWeapon}\n        extraButtons={<LargeWeaponSwapButton weaponTypeKey={characterSheet.weaponTypeKey} />}\n      />\n    </Suspense>\n    <Grid container spacing={1}>\n      {breakpoint && <Grid item xs={12} md={12} lg={3} xl={3} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }} >\n        {weaponDoc && weaponDoc}\n        <ArtifactSectionCard />\n      </Grid>}\n      <Grid item xs={12} md={12} lg={9} xl={9} container spacing={1}>\n        <Grid item xs={12} sm={6} md={4} display=\"flex\" flexDirection=\"column\" gap={1}>\n          <WeaponCard weaponId={equippedWeapon} onEdit={showWeapon} canEquip extraButtons={<WeaponSwapButton weaponTypeKey={characterSheet.weaponTypeKey} />} />\n        </Grid>\n        {allSlotKeys.map(slotKey => <Grid item xs={12} sm={6} md={4} key={slotKey} >\n          {data.get(input.art[slotKey].id).value ?\n            <ArtifactCard artifactId={data.get(input.art[slotKey].id).value} effFilter={deferredRvSet}\n              extraButtons={<ArtifactSwapButton slotKey={slotKey} />} editorProps={{}} canExclude canEquip /> :\n            <ArtSwapCard slotKey={slotKey} />}\n        </Grid>)}\n      </Grid>\n      {!breakpoint && <Grid item xs={12} md={12} xl={3} container spacing={1} >\n        {weaponDoc && <Grid item xs={12} md={6} lg={4}>{weaponDoc}</Grid>}\n        <Grid item xs={12} md={6} lg={4} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n          <ArtifactSectionCard />\n        </Grid>\n      </Grid>}\n    </Grid>\n  </Box>\n}\nfunction ArtSwapCard({ slotKey }: { slotKey: SlotKey }) {\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  const { t } = useTranslation(\"artifact\")\n  return <CardLight sx={{ height: \"100%\", width: \"100%\", minHeight: 300, display: \"flex\", flexDirection: \"column\" }}>\n    <CardContent>\n      <Typography><SlotIcon iconProps={iconInlineProps} slotKey={slotKey} /> {t(`slotName.${slotKey}`)}</Typography>\n    </CardContent>\n    <Divider />\n    <Box sx={{\n      flexGrow: 1,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }}\n    >\n      <ArtifactSwapModal slotKey={slotKey} show={show} onClose={onClose} onChangeId={id => database.arts.set(id, { location: charKeyToLocCharKey(characterKey) })} />\n      <Button onClick={onOpen} color=\"info\" sx={{ borderRadius: \"1em\", }}>\n        <SwapHoriz sx={{ height: 100, width: 100 }} />\n      </Button>\n    </Box>\n  </CardLight>\n}\nfunction WeaponSwapButton({ weaponTypeKey }: { weaponTypeKey: WeaponTypeKey }) {\n  const { t } = useTranslation(\"page_character\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return <>\n    <Tooltip title={<Typography>{t`tabEquip.swapWeapon`}</Typography>} placement=\"top\" arrow>\n      <Button color=\"info\" size=\"small\" onClick={onOpen} ><SwapHoriz /></Button>\n    </Tooltip>\n    <WeaponSwapModal weaponTypeKey={weaponTypeKey} onChangeId={id => database.weapons.set(id, { location: charKeyToLocCharKey(characterKey) })} show={show} onClose={onClose} />\n  </>\n}\nfunction LargeWeaponSwapButton({ weaponTypeKey }: { weaponTypeKey: WeaponTypeKey }) {\n  const { t } = useTranslation(\"page_character\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return <>\n    <Button color=\"info\" onClick={onOpen} startIcon={<SwapHoriz />} >{t`tabEquip.swapWeapon`}</Button>\n    <WeaponSwapModal weaponTypeKey={weaponTypeKey} onChangeId={id => database.weapons.set(id, { location: charKeyToLocCharKey(characterKey) })} show={show} onClose={onClose} />\n  </>\n}\nfunction ArtifactSwapButton({ slotKey }: { slotKey: SlotKey }) {\n  const { t } = useTranslation(\"page_character\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return <>\n    <Tooltip title={<Typography>{t`tabEquip.swapArt`}</Typography>} placement=\"top\" arrow>\n      <Button color=\"info\" size=\"small\" onClick={onOpen} ><SwapHoriz /></Button>\n    </Tooltip>\n    <ArtifactSwapModal slotKey={slotKey} show={show} onClose={onClose} onChangeId={id => database.arts.set(id, { location: charKeyToLocCharKey(characterKey) })} />\n  </>\n}\nfunction ArtifactSectionCard() {\n  const { t } = useTranslation([\"page_character\", \"artifact\"])\n  const { database } = useContext(DatabaseContext)\n  const { character, character: { key: characterKey, equippedArtifacts } } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const hasEquipped = useMemo(() => !!Object.values(equippedArtifacts).filter(i => i).length, [equippedArtifacts])\n  const unequipArts = useCallback(() => {\n    if (!character) return\n    if (!window.confirm(\"Do you want to move all currently equipped artifacts to inventory?\")) return\n    Object.values(equippedArtifacts).forEach(aid => database.arts.set(aid, { location: \"\" }))\n  }, [character, database, equippedArtifacts])\n\n  const setEffects = useMemo(() => dataSetEffects(data), [data])\n  const { rvFilter } = useCharMeta(characterKey)\n  const setRVFilter = useCallback(rvFilter => database.charMeta.set(characterKey, { rvFilter }), [database, characterKey],)\n\n  const [show, onShow, onHide] = useBoolState()\n  const deferredrvFilter = useDeferredValue(rvFilter)\n  const { rvField, rvmField } = useMemo(() => {\n    const { currentEfficiency, currentEfficiency_, maxEfficiency, maxEfficiency_ } = Object.values(equippedArtifacts).reduce((a, artid) => {\n      const art = database.arts.get(artid)\n      if (art) {\n        const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, new Set(deferredrvFilter))\n        const { currentEfficiency: currentEfficiency_, maxEfficiency: maxEfficiency_ } = Artifact.getArtifactEfficiency(art, new Set(allSubstatKeys))\n        a.currentEfficiency = a.currentEfficiency + currentEfficiency\n        a.maxEfficiency = a.maxEfficiency + maxEfficiency\n\n        a.currentEfficiency_ = a.currentEfficiency_ + currentEfficiency_\n        a.maxEfficiency_ = a.maxEfficiency_ + maxEfficiency_\n      }\n      return a\n    }, { currentEfficiency: 0, currentEfficiency_: 0, maxEfficiency: 0, maxEfficiency_: 0 })\n    const rvField: IFieldDisplay = {\n      text: t`artifact:editor.curSubEff`,\n      value: !(currentEfficiency - currentEfficiency_) ? <PercentBadge value={currentEfficiency} max={4500} valid /> :\n        <span><PercentBadge value={currentEfficiency} max={4500} valid /> / <PercentBadge value={currentEfficiency_} max={4500} valid /></span>\n    }\n    const rvmField: IFieldDisplay = {\n      text: t`artifact:editor.maxSubEff`,\n      canShow: () => !!(currentEfficiency_ - maxEfficiency_),\n      value: !(maxEfficiency - maxEfficiency_) ? <PercentBadge value={maxEfficiency} max={4500} valid /> :\n        <span><PercentBadge value={maxEfficiency} max={4500} valid /> / <PercentBadge value={maxEfficiency_} max={4500} valid /></span>\n    }\n    return { rvField, rvmField }\n  }, [t, deferredrvFilter, equippedArtifacts, database])\n\n  return <CardLight>\n    {hasEquipped && <Button color=\"error\" onClick={unequipArts} fullWidth sx={{ borderBottomRightRadius: 0, borderBottomLeftRadius: 0 }}>{t`tabEquip.unequipArts`}</Button>}\n    <CardContent >\n      <Stack spacing={1}>\n        <CardDark >\n          <Button fullWidth color=\"info\" startIcon={<Settings />} sx={{ borderBottomLeftRadius: 0, borderBottomRightRadius: 0 }} onClick={onShow}>RV Filter</Button>\n          <ModalWrapper open={show} onClose={onHide}>\n            <CardDark>\n              <CardContent>\n                <Typography textAlign=\"center\" gutterBottom variant='h6'>{t`artifact:efficiencyFilter.title`}</Typography>\n                <SubstatToggle selectedKeys={rvFilter} onChange={setRVFilter} />\n              </CardContent>\n            </CardDark>\n          </ModalWrapper>\n          <FieldDisplayList >\n            <BasicFieldDisplay field={rvField} component={ListItem} />\n            {rvmField?.canShow?.(data) && <BasicFieldDisplay field={rvmField} component={ListItem} />}\n          </FieldDisplayList>\n        </CardDark>\n        {setEffects && Object.entries(setEffects).flatMap(([setKey, setNumKeyArr]) =>\n          setNumKeyArr.map(setNumKey => <CardDark key={setKey + setNumKey} sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n            <SetEffectDisplay key={setKey + setNumKey} setKey={setKey} setNumKey={setNumKey} />\n          </CardDark>)\n        )}\n      </Stack>\n    </CardContent>\n  </CardLight>\n}\n","import { charCard } from \"@genshin-optimizer/char-cards\";\r\nimport { Favorite, FavoriteBorder } from \"@mui/icons-material\";\r\nimport { Badge, Box, CardActionArea, Chip, Grid, IconButton, Stack, Typography } from \"@mui/material\";\r\nimport { useCallback, useContext, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Assets from \"../../../../Assets/Assets\";\r\nimport ArtifactCardNano from \"../../../../Components/Artifact/ArtifactCardNano\";\r\nimport CardLight from \"../../../../Components/Card/CardLight\";\r\nimport CharacterCardPico from \"../../../../Components/Character/CharacterCardPico\";\r\nimport StatDisplayComponent from \"../../../../Components/Character/StatDisplayComponent\";\r\nimport ImgIcon from \"../../../../Components/Image/ImgIcon\";\r\nimport SqBadge from \"../../../../Components/SqBadge\";\r\nimport { StarsDisplay } from \"../../../../Components/StarDisplay\";\r\nimport WeaponCardNano from \"../../../../Components/Weapon/WeaponCardNano\";\r\nimport { CharacterContext } from \"../../../../Context/CharacterContext\";\r\nimport { DataContext } from \"../../../../Context/DataContext\";\r\nimport { TalentSheetElementKey } from \"../../../../Data/Characters/ICharacterSheet\";\r\nimport { getLevelString } from \"../../../../Data/LevelData\";\r\nimport { DatabaseContext } from \"../../../../Database/Database\";\r\nimport { uiInput as input } from \"../../../../Formula\";\r\nimport { ElementIcon } from \"../../../../KeyMap/StatIcon\";\r\nimport useCharacterReducer from \"../../../../ReactHooks/useCharacterReducer\";\r\nimport useCharMeta from \"../../../../ReactHooks/useCharMeta\";\r\nimport useDBMeta from \"../../../../ReactHooks/useDBMeta\";\r\nimport { allSlotKeys, Ascension, ElementKey } from \"@genshin-optimizer/consts\";\r\nimport { range } from \"../../../../Util/Util\";\r\nimport EquipmentSection from \"./EquipmentSection\";\r\n\r\nexport default function TabOverview() {\r\n  const scrollRef = useRef<HTMLDivElement>()\r\n  const onScroll = useCallback(() => scrollRef?.current?.scrollIntoView?.({ behavior: \"smooth\" }), [scrollRef])\r\n\r\n  return <Stack spacing={1}>\r\n    <Grid container spacing={1} sx={{ justifyContent: \"center\" }}>\r\n      <Grid item xs={8} sm={5} md={4} lg={2.3}  >\r\n        <CharacterProfileCard />\r\n      </Grid>\r\n      <Grid item xs={12} sm={7} md={8} lg={9.7} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }} >\r\n        <EquipmentRow onClick={onScroll} />\r\n        <CardLight sx={{ flexGrow: 1, p: 1 }}>\r\n          <StatDisplayComponent />\r\n        </CardLight>\r\n      </Grid>\r\n    </Grid >\r\n    <Box ref={scrollRef}>\r\n      <EquipmentSection />\r\n    </Box>\r\n  </Stack>\r\n}\r\nfunction EquipmentRow({ onClick }: { onClick: () => void }) {\r\n  const { character: { equippedWeapon } } = useContext(CharacterContext)\r\n  const { data, } = useContext(DataContext)\r\n\r\n  return <Grid container spacing={1} columns={{ xs: 2, sm: 2, md: 3, lg: 6, xl: 6 }}>\r\n    <Grid item xs={1}>\r\n      <WeaponCardNano weaponId={equippedWeapon} BGComponent={CardLight} onClick={onClick} />\r\n    </Grid>\r\n    {allSlotKeys.map(slotKey =>\r\n      <Grid item key={slotKey} xs={1} >\r\n        <ArtifactCardNano artifactId={data.get(input.art[slotKey].id).value} slotKey={slotKey} BGComponent={CardLight} onClick={onClick} />\r\n      </Grid>)}\r\n  </Grid>\r\n}\r\n/* Image card with star and name and level */\r\nfunction CharacterProfileCard() {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { characterSheet, character: { key: characterKey, team } } = useContext(CharacterContext)\r\n  const { gender } = useDBMeta()\r\n  const { data, } = useContext(DataContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const navigate = useNavigate()\r\n  const charEle = data.get(input.charEle).value as ElementKey\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const level = data.get(input.lvl).value\r\n  const ascension = data.get(input.asc).value as Ascension\r\n  const constellation = data.get(input.constellation).value\r\n  const tlvl = {\r\n    auto: data.get(input.total.auto).value,\r\n    skill: data.get(input.total.skill).value,\r\n    burst: data.get(input.total.burst).value,\r\n  }\r\n  const tBoost = {\r\n    auto: data.get(input.bonus.auto).value,\r\n    skill: data.get(input.bonus.skill).value,\r\n    burst: data.get(input.bonus.burst).value,\r\n  }\r\n  const { favorite } = useCharMeta(characterKey)\r\n  return <CardLight sx={{ height: \"100%\" }} >\r\n    <Box sx={{ position: \"relative\" }}>\r\n      <Box sx={{ position: \"absolute\", width: \"100%\", height: \"100%\" }}>\r\n        <Typography variant=\"h6\" sx={{ position: \"absolute\", width: \"100%\", left: \"50%\", bottom: 0, transform: \"translate(-50%, -50%)\", opacity: 0.75, textAlign: \"center\" }}>\r\n          <StarsDisplay stars={characterSheet.rarity} colored />\r\n        </Typography>\r\n        <Box sx={{ position: \"absolute\", left: \"50%\", bottom: \"7%\", transform: \"translate(-50%, -50%)\", opacity: 0.85, width: \"100%\", display: \"flex\", justifyContent: \"center\", px: 1 }}>\r\n          <Chip color={charEle} sx={{ height: \"auto\" }}\r\n            label={<Typography variant=\"h6\" sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }} >\r\n              <ElementIcon ele={charEle} />\r\n              <Box sx={{ whiteSpace: \"normal\", textAlign: \"center\" }}>{characterSheet.name}</Box>\r\n              <ImgIcon src={Assets.weaponTypes?.[weaponTypeKey]} />\r\n            </Typography>} />\r\n        </Box>\r\n        <Box sx={{ position: \"absolute\", left: 0, top: 0 }}>\r\n          <IconButton sx={{ p: 1 }} color=\"error\" onClick={() => database.charMeta.set(characterKey, { favorite: !favorite })}>\r\n            {favorite ? <Favorite /> : <FavoriteBorder />}\r\n          </IconButton>\r\n        </Box>\r\n        <Typography sx={{ p: 1, position: \"absolute\", right: 0, top: 0, opacity: 0.8 }}>\r\n          <SqBadge>{getLevelString(level, ascension)}</SqBadge>\r\n        </Typography>\r\n      </Box>\r\n      <Box src={charCard(characterKey, gender)} component=\"img\" width=\"100%\" height=\"auto\" />\r\n    </Box>\r\n    <Box>\r\n      <CardActionArea sx={{ p: 1 }} onClick={() => navigate(\"talent\")}>\r\n        <Grid container spacing={1} mt={-1}>\r\n          {([\"auto\", \"skill\", \"burst\"] as TalentSheetElementKey[]).map(tKey =>\r\n            <Grid item xs={4} key={tKey}>\r\n              <Badge badgeContent={tlvl[tKey]} color={tBoost[tKey] ? \"info\" : \"secondary\"}\r\n                overlap=\"circular\"\r\n                anchorOrigin={{\r\n                  vertical: 'bottom',\r\n                  horizontal: 'right',\r\n                }}\r\n                sx={{\r\n                  width: \"100%\",\r\n                  height: \"100%\",\r\n                  \"& > .MuiBadge-badge\": {\r\n                    fontSize: \"1.25em\",\r\n                    padding: \".25em .4em\",\r\n                    borderRadius: \".5em\",\r\n                    lineHeight: 1,\r\n                    height: \"1.25em\"\r\n                  }\r\n                }}>\r\n                <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey)?.img} width=\"100%\" height=\"auto\" />\r\n              </Badge>\r\n            </Grid>)}\r\n        </Grid>\r\n      </CardActionArea>\r\n      <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\r\n      <Grid container spacing={1}>\r\n        {range(1, 6).map(i =>\r\n          <Grid item xs={4} key={i}>\r\n            <CardActionArea onClick={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })}>\r\n              <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i}` as TalentSheetElementKey)?.img}\r\n                sx={{\r\n                  ...(constellation >= i ? {} : { filter: \"brightness(50%)\" })\r\n                }}\r\n                width=\"100%\" height=\"auto\" />\r\n            </CardActionArea>\r\n          </Grid>)}\r\n      </Grid>\r\n      <CardActionArea sx={{ p: 1 }} onClick={() => navigate(\"teambuffs\")}>\r\n        <Grid container columns={3} spacing={1}>\r\n          {range(0, 2).map(i => <Grid key={i} item xs={1} height=\"100%\"><CharacterCardPico characterKey={team[i]} index={i} /></Grid>)}\r\n        </Grid>\r\n      </CardActionArea>\r\n    </Box>\r\n  </CardLight >\r\n}\r\n","import { Box, CardActionArea, CardContent, Grid, MenuItem, Typography, useMediaQuery, useTheme } from \"@mui/material\";\nimport { useCallback, useContext, useMemo } from 'react';\nimport CardDark from \"../../../Components/Card/CardDark\";\nimport CardLight from \"../../../Components/Card/CardLight\";\nimport ConditionalWrapper from \"../../../Components/ConditionalWrapper\";\nimport DocumentDisplay from \"../../../Components/DocumentDisplay\";\nimport DropdownButton from \"../../../Components/DropdownMenu/DropdownButton\";\nimport { NodeFieldDisplay } from \"../../../Components/FieldDisplay\";\nimport { CharacterContext } from \"../../../Context/CharacterContext\";\nimport { DataContext } from '../../../Context/DataContext';\nimport { TalentSheetElementKey } from \"../../../Data/Characters/ICharacterSheet\";\nimport { uiInput as input } from \"../../../Formula\";\nimport { NumNode } from \"../../../Formula/type\";\nimport { NodeDisplay } from '../../../Formula/uiData';\nimport useCharacterReducer from \"../../../ReactHooks/useCharacterReducer\";\nimport { DocumentSection } from \"../../../Types/sheet\";\nimport { range } from \"../../../Util/Util\";\n\nconst talentSpacing = {\n  xs: 12,\n  sm: 6,\n  md: 4\n}\n\nexport default function CharacterTalentPane() {\n  const { character, characterSheet } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(character.key)\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]] as [TalentSheetElementKey, string][]\n  const passivesList: [tKey: TalentSheetElementKey, tText: string, asc: number][] = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n\n  const theme = useTheme();\n  const grlg = useMediaQuery(theme.breakpoints.up('lg'));\n  const constellationCards = useMemo(() => range(1, 6).map(i =>\n    <SkillDisplayCard\n      talentKey={`constellation${i}` as TalentSheetElementKey}\n      subtitle={`Constellation Lv. ${i}`}\n      onClickTitle={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })}\n    />), [constellation, characterDispatch])\n  return <>\n    <ReactionDisplay />\n    <Grid container spacing={1}>\n      {/* constellations for 4column */}\n      {grlg && <Grid item xs={12} md={12} lg={3} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }} >\n        <CardLight><CardContent><Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography></CardContent></CardLight>\n        {constellationCards.map((c, i) => <Box key={i} sx={{ opacity: constellation >= (i + 1) ? 1 : 0.5 }} >{c}</Box>)}\n      </Grid>}\n      <Grid item xs={12} md={12} lg={9} container spacing={1} >\n        {/* auto, skill, burst */}\n        {skillBurstList.map(([tKey, tText]) =>\n          <Grid item key={tKey} {...talentSpacing} >\n            <SkillDisplayCard\n              talentKey={tKey}\n              subtitle={tText}\n            />\n          </Grid>)}\n        {!!characterSheet.getTalentOfKey(\"sprint\",) && <Grid item {...talentSpacing} >\n          <SkillDisplayCard\n            talentKey=\"sprint\"\n            subtitle=\"Alternative Sprint\"\n          />\n        </Grid>}\n        {!!characterSheet.getTalentOfKey(\"passive\") && <Grid item {...talentSpacing} >\n          <SkillDisplayCard\n            talentKey=\"passive\"\n            subtitle=\"Passive\"\n          />\n        </Grid>}\n        {/* passives */}\n        {passivesList.map(([tKey, tText, asc]) => {\n          const enabled = ascension >= asc\n          if (!characterSheet.getTalentOfKey(tKey)) return null\n          return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} {...talentSpacing} >\n            <SkillDisplayCard\n              talentKey={tKey}\n              subtitle={tText}\n            />\n          </Grid>\n        })}\n      </Grid>\n      {/* constellations for < 4 columns */}\n      {!grlg && <Grid item xs={12} md={12} lg={3} container spacing={1} >\n        <Grid item xs={12}>\n          <CardLight><CardContent><Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography></CardContent></CardLight>\n        </Grid>\n        {constellationCards.map((c, i) => <Grid item key={i} sx={{ opacity: constellation >= (i + 1) ? 1 : 0.5 }} {...talentSpacing} >{c}</Grid>)}\n      </Grid>}\n    </Grid>\n  </>\n}\nfunction ReactionDisplay() {\n  const { data } = useContext(DataContext)\n  const reaction = data.getDisplay().reaction as { [key: string]: NodeDisplay }\n  return <CardLight>\n    <CardContent>\n      <Grid container spacing={1}>\n        {Object.entries(reaction).filter(([_, node]) => !node.isEmpty).map(([key, node]) => {\n          return <Grid item key={key}>\n            <CardDark><CardContent sx={{ p: 1, \"&:last-child\": { pb: 1 } }}>\n              <NodeFieldDisplay node={node} />\n            </CardContent></CardDark>\n          </Grid>\n        })}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\n\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\ntype SkillDisplayCardProps = {\n  talentKey: TalentSheetElementKey,\n  subtitle: string,\n  onClickTitle?: (any) => any\n}\nfunction SkillDisplayCard({ talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\n  const { character: { talent }, characterSheet, characterDispatch } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n\n  const actionWrapeprFunc = useCallback(\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\n    [onClickTitle],\n  )\n\n  const setTalentLevel = useCallback((tKey: TalentSheetElementKey, newTalentLevelKey: number) =>\n    characterDispatch({ talent: { ...talent, [tKey]: newTalentLevelKey } }), [talent, characterDispatch])\n\n  let header: Displayable | null = null\n\n  if (talentKey in talent) {\n    const levelBoost = data.get(input.bonus[talentKey] as NumNode).value\n    const level = data.get(input.total[talentKey]).value\n    const asc = data.get(input.asc).value\n\n    header = <DropdownButton fullWidth title={`Talent Lv. ${level}`} color={levelBoost ? \"info\" : \"primary\"} sx={{ borderRadius: 0 }}>\n      {range(1, talentLimits[asc]).map(i =>\n        <MenuItem key={i} selected={talent[talentKey] === (i)} disabled={talent[talentKey] === (i)} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost}</MenuItem>)}\n    </DropdownButton>\n  }\n  const talentSheet = characterSheet.getTalentOfKey(talentKey)\n\n  // Hide header if the header matches the current talent\n  const hideHeader = (section: DocumentSection): boolean => {\n    const headerAction = section.header?.action\n    if (headerAction && (typeof headerAction !== \"string\")) {\n      const key: string = headerAction.props.children.props.key18\n      return key.includes(talentKey)\n    }\n    return false\n  }\n\n  return <CardLight sx={{ height: \"100%\" }}>\n    {header}\n    <CardContent>\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item>\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\n          </Grid>\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\n          </Grid>\n        </Grid>\n      </ConditionalWrapper>\n      {/* Display document sections */}\n      {talentSheet?.sections ? <DocumentDisplay sections={talentSheet.sections} hideDesc hideHeader={hideHeader} /> : null}\n    </CardContent>\n  </CardLight>\n}\n","import { CharacterKey } from \"@genshin-optimizer/consts\";\nimport { characterAsset } from \"@genshin-optimizer/g-assets\";\nimport { PersonAdd } from \"@mui/icons-material\";\nimport { AutocompleteProps, Box, CardContent, CardHeader, Divider, Grid, Skeleton, Typography } from \"@mui/material\";\nimport { Suspense, useCallback, useContext, useMemo } from 'react';\nimport { useTranslation } from \"react-i18next\";\nimport CardLight from \"../../../Components/Card/CardLight\";\nimport CharacterCard from \"../../../Components/Character/CharacterCard\";\nimport ThumbSide from \"../../../Components/Character/ThumbSide\";\nimport ColorText from \"../../../Components/ColoredText\";\nimport DocumentDisplay from \"../../../Components/DocumentDisplay\";\nimport { NodeFieldDisplay } from \"../../../Components/FieldDisplay\";\nimport { GeneralAutocomplete, GeneralAutocompleteOption } from \"../../../Components/GeneralAutocomplete\";\nimport { InfoTooltipInline } from \"../../../Components/InfoTooltip\";\nimport { CharacterContext, CharacterContextObj } from \"../../../Context/CharacterContext\";\nimport { DataContext, dataContextObj } from \"../../../Context/DataContext\";\nimport { dataSetEffects, getArtSheet } from \"../../../Data/Artifacts\";\nimport { getCharSheet } from \"../../../Data/Characters\";\nimport { resonanceSheets } from \"../../../Data/Resonance\";\nimport { DatabaseContext } from \"../../../Database/Database\";\nimport { NodeDisplay } from \"../../../Formula/uiData\";\nimport useCharSelectionCallback from \"../../../ReactHooks/useCharSelectionCallback\";\nimport useDBMeta from \"../../../ReactHooks/useDBMeta\";\nimport { charKeyToCharName } from \"../../../Types/consts\";\nimport { objPathValue, range } from \"../../../Util/Util\";\n\nexport default function TabTeambuffs() {\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\n    <Grid container spacing={1}>\n      <Grid item xs={12} md={6} lg={3} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n        <TeamBuffDisplay />\n        <ResonanceDisplay />\n      </Grid>\n      {range(0, 2).map(i => <Grid item xs={12} md={6} lg={3} key={i}>\n        <TeammateDisplay index={i} />\n      </Grid>)}\n    </Grid>\n  </Box>\n}\nexport function TeamBuffDisplay() {\n  const { data, oldData } = useContext(DataContext)\n  const teamBuffs = data.getTeamBuff()\n  const nodes: Array<[string[], NodeDisplay<number>]> = []\n  Object.entries(teamBuffs.total ?? {}).forEach(([key, node]) =>\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"total\", key], node]))\n  Object.entries(teamBuffs.premod ?? {}).forEach(([key, node]) =>\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"premod\", key], node]))\n  Object.entries(teamBuffs.enemy ?? {}).forEach(([key, node]) =>\n    !node.isEmpty && typeof node.value === \"number\" && node.value !== 0 && nodes.push([[\"enemy\", key], node as NodeDisplay<number>]))\n  if (!nodes.length) return null\n  return <CardLight>\n    <CardContent>\n      <Typography>Team Buffs</Typography>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container>\n        {nodes.map(([path, n]) => n && <Grid item xs={12} key={JSON.stringify(n.info)} >\n          <NodeFieldDisplay node={n} oldValue={objPathValue(oldData?.getTeamBuff(), path)?.value} />\n        </Grid>)}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction ResonanceDisplay() {\n  const { t } = useTranslation(\"page_character\")\n  const { data } = useContext(DataContext)\n  const { character: { team } } = useContext(CharacterContext)\n  const teamCount = team.reduce((a, t) => a + (t ? 1 : 0), 1)\n  return <>\n    <CardLight>\n      <CardHeader title={<span>{t(\"tabTeambuff.team_reso\")} <strong><ColorText color={teamCount >= 4 ? \"success\" : \"warning\"}>({teamCount}/4)</ColorText></strong> <InfoTooltipInline title={<Typography>{t`tabTeambuff.resonance_tip`}</Typography>} /></span>}\n        titleTypographyProps={{ variant: \"subtitle2\" }} />\n    </CardLight>\n    {resonanceSheets.map((res, i) => <CardLight key={i} sx={{ opacity: res.canShow(data) ? 1 : 0.5, }}>\n      <CardHeader\n        title={<span>{res.name} <InfoTooltipInline title={<Typography>{res.desc}</Typography>} /></span>}\n        action={res.icon} titleTypographyProps={{ variant: \"subtitle2\" }} />\n      {res.canShow(data) && <Divider />}\n      {res.canShow(data) && <CardContent>\n        <DocumentDisplay sections={res.sections} teamBuffOnly hideDesc />\n      </CardContent>}\n    </CardLight>)}\n  </>\n}\nfunction TeammateDisplay({ index }: { index: number }) {\n  const { teamData } = useContext(DataContext)\n  const { t } = useTranslation(\"page_character\")\n  const { character: active, character: { key: activeCharacterKey }, characterDispatch } = useContext(CharacterContext)\n  const teamMateKey = active.team[index]\n  const team = useMemo(() => [activeCharacterKey, ...active.team].filter((t, i) => (i - 1) !== index), [active.team, activeCharacterKey, index])\n  const onClickHandler = useCharSelectionCallback()\n  const setTeammate = useCallback((charKey: CharacterKey | \"\") => characterDispatch({ type: \"team\", index, charKey }), [index, characterDispatch])\n\n  const dataBundle = teamData[teamMateKey]\n  const teammateCharacterContext: CharacterContextObj | undefined = useMemo(() => dataBundle && {\n    character: { ...dataBundle.character, conditional: active.teamConditional[teamMateKey] ?? {} },\n    characterSheet: dataBundle.characterSheet,\n    characterDispatch: (state) => {\n      if (!teamMateKey) return\n      if (!(\"conditional\" in state)) return\n      const { conditional } = state\n      if (!conditional) return\n      characterDispatch({ type: \"teamConditional\", teamMateKey: teamMateKey, conditional })\n    }\n  }, [active, teamMateKey, dataBundle, characterDispatch])\n  const teamMateDataContext: dataContextObj | undefined = useMemo(() => dataBundle && {\n    data: dataBundle.target,\n    teamData: teamData,\n  }, [dataBundle, teamData])\n  return <CardLight sx={{ overflow: \"visible\" }}>\n    <TeammateAutocomplete characterKey={teamMateKey} team={team}\n      setChar={setTeammate}\n      label={t(\"teammate\", { count: index + 1 })}\n    />\n    {teamMateKey && teammateCharacterContext && <CharacterContext.Provider value={teammateCharacterContext}>\n      {teamMateDataContext && <DataContext.Provider value={teamMateDataContext}>\n        <CharacterCard characterKey={teamMateKey}\n          onClickHeader={onClickHandler}\n          // Need to wrap these elements with the providers for them to use the correct functions.\n          artifactChildren={<CharacterContext.Provider value={teammateCharacterContext}>\n            <DataContext.Provider value={teamMateDataContext}>\n              <CharArtifactCondDisplay />\n            </DataContext.Provider>\n          </CharacterContext.Provider>}\n          weaponChildren={<CharacterContext.Provider value={teammateCharacterContext}>\n            <DataContext.Provider value={teamMateDataContext}>\n              <CharWeaponCondDisplay />\n            </DataContext.Provider>\n          </CharacterContext.Provider>}\n          characterChildren={<CharacterContext.Provider value={teammateCharacterContext}>\n            <DataContext.Provider value={teamMateDataContext}>\n              <CharTalentCondDisplay />\n            </DataContext.Provider>\n          </CharacterContext.Provider>}\n          isTeammateCard\n        />\n      </DataContext.Provider>}\n    </CharacterContext.Provider>}\n  </CardLight>\n}\nfunction CharArtifactCondDisplay() {\n  const { data, } = useContext(DataContext)\n  const sections = useMemo(() =>\n    Object.entries(dataSetEffects(data))\n      .flatMap(([setKey, setNums]) =>\n        setNums.flatMap(sn => getArtSheet(setKey).setEffectDocument(sn) ?? []))\n    , [data])\n  if (!sections) return null\n  return <DocumentDisplay sections={sections} teamBuffOnly={true} />\n}\nfunction CharWeaponCondDisplay() {\n  const { character: { key: charKey } } = useContext(CharacterContext)\n  const { teamData } = useContext(DataContext)\n  const weaponSheet = teamData[charKey]!.weaponSheet\n  if (!weaponSheet.document) return null\n  return <DocumentDisplay sections={weaponSheet.document} teamBuffOnly={true} />\n}\nfunction CharTalentCondDisplay() {\n  const { character: { key: charKey } } = useContext(CharacterContext)\n  const { teamData } = useContext(DataContext)\n  const characterSheet = teamData[charKey]!.characterSheet\n  const sections = Object.values(characterSheet.talent).flatMap(sts => sts.sections)\n  if (!sections) return null\n  return <DocumentDisplay sections={sections} teamBuffOnly={true} />\n}\n\nfunction TeammateAutocomplete({ characterKey, team, label, setChar, autoCompleteProps = {} }:\n  { characterKey: CharacterKey | \"\", team: Array<CharacterKey | \"\">, label: string, setChar: (k: CharacterKey | \"\") => void, autoCompleteProps?: Omit<AutocompleteProps<GeneralAutocompleteOption<CharacterKey | \"\">, false, false, false>, \"renderInput\" | \"onChange\" | \"options\"> }) {\n  const { t } = useTranslation([\"charNames_gen\", \"page_character\", \"sheet_gen\"])\n  const { database } = useContext(DatabaseContext)\n  const { gender } = useDBMeta()\n  const toText = useCallback((key: CharacterKey): string => key.startsWith(\"Traveler\") ? `${t(`charNames_gen:${charKeyToCharName(key, gender)}`)} (${t(`sheet_gen:element.${getCharSheet(key, gender)?.elementKey}`)})` : t(`charNames_gen:${key}`), [t, gender])\n  const toImg = useCallback((key: CharacterKey | \"\") => key ? <ThumbSide src={characterAsset(key, \"iconSide\", gender)} sx={{ pr: 1 }} /> : <PersonAdd />, [gender])//\n  const isFavorite = useCallback((key: CharacterKey) => database.charMeta.get(key).favorite, [database])\n  const onDisable = useCallback(({ key }: { key: CharacterKey | \"\" }) => team.filter(t => t && t !== characterKey).includes(key) || (key.startsWith(\"Traveler\") && team.some((t, i) => t.startsWith(\"Traveler\"))), [team, characterKey])\n  const values: GeneralAutocompleteOption<CharacterKey>[] = useMemo(() => database.chars.keys\n    .map(v => ({ key: v, label: toText(v), favorite: isFavorite(v) }))\n    .sort((a, b) => {\n      if (a.favorite && !b.favorite) return -1\n      if (!a.favorite && b.favorite) return 1\n      return a.label.localeCompare(b.label)\n    }), [toText, isFavorite, database])\n  return <Suspense fallback={<Skeleton variant=\"text\" width={100} />}><GeneralAutocomplete size=\"small\" label={label} options={values} valueKey={characterKey} onChange={k => setChar(k ?? \"\")} getOptionDisabled={onDisable} toImg={toImg} {...autoCompleteProps} /></Suspense>\n}\n","import { allArtifactSets, allSlotKeys, ArtifactSetKey, SlotKey, WeaponTypeKey } from \"@genshin-optimizer/consts\";\r\nimport { weaponAsset } from \"@genshin-optimizer/g-assets\";\r\nimport { CopyAll, DeleteForever, Info, Refresh } from \"@mui/icons-material\";\r\nimport StarRoundedIcon from '@mui/icons-material/StarRounded';\r\nimport { Box, Button, ButtonGroup, CardHeader, Divider, Grid, ListItem, MenuItem, Skeleton, Slider, Stack, ToggleButton, Typography } from \"@mui/material\";\r\nimport React, { Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport ArtifactSetAutocomplete from \"../../../../Components/Artifact/ArtifactSetAutocomplete\";\r\nimport ArtifactSetTooltip from \"../../../../Components/Artifact/ArtifactSetTooltip\";\r\nimport SetEffectDisplay from \"../../../../Components/Artifact/SetEffectDisplay\";\r\nimport SlotIcon from \"../../../../Components/Artifact/SlotIcon\";\r\nimport BootstrapTooltip from \"../../../../Components/BootstrapTooltip\";\r\nimport CardDark from \"../../../../Components/Card/CardDark\";\r\nimport CardLight from \"../../../../Components/Card/CardLight\";\r\nimport StatDisplayComponent from \"../../../../Components/Character/StatDisplayComponent\";\r\nimport ColorText from \"../../../../Components/ColoredText\";\r\nimport CustomNumberInput from \"../../../../Components/CustomNumberInput\";\r\nimport DocumentDisplay from \"../../../../Components/DocumentDisplay\";\r\nimport DropdownButton from \"../../../../Components/DropdownMenu/DropdownButton\";\r\nimport { FieldDisplayList, NodeFieldDisplay } from \"../../../../Components/FieldDisplay\";\r\nimport ImgIcon from \"../../../../Components/Image/ImgIcon\";\r\nimport LevelSelect from \"../../../../Components/LevelSelect\";\r\nimport RefinementDropdown from \"../../../../Components/RefinementDropdown\";\r\nimport SolidToggleButtonGroup from \"../../../../Components/SolidToggleButtonGroup\";\r\nimport { StatColoredWithUnit, StatWithUnit } from \"../../../../Components/StatDisplay\";\r\nimport { CharacterContext } from \"../../../../Context/CharacterContext\";\r\nimport { DataContext, dataContextObj } from \"../../../../Context/DataContext\";\r\nimport { getArtSheet } from \"../../../../Data/Artifacts\";\r\nimport Artifact, { maxArtifactLevel } from \"../../../../Data/Artifacts/Artifact\";\r\nimport { artifactDefIcon } from \"../../../../Data/Artifacts/ArtifactSheet\";\r\nimport { getWeaponSheet } from \"../../../../Data/Weapons\";\r\nimport { DatabaseContext } from \"../../../../Database/Database\";\r\nimport { initCharTC } from \"../../../../Database/DataManagers/CharacterTCData\";\r\nimport { uiInput as input } from \"../../../../Formula\";\r\nimport { computeUIData, dataObjForWeapon, mergeData } from \"../../../../Formula/api\";\r\nimport { constant, percent } from \"../../../../Formula/utils\";\r\nimport KeyMap, { cacheValueString } from \"../../../../KeyMap\";\r\nimport StatIcon from \"../../../../KeyMap/StatIcon\";\r\nimport useBoolState from \"../../../../ReactHooks/useBoolState\";\r\nimport useTeamData from \"../../../../ReactHooks/useTeamData\";\r\nimport { iconInlineProps } from \"../../../../SVGIcons\";\r\nimport { allSubstatKeys, ICachedArtifact, MainStatKey, SubstatKey } from \"../../../../Types/artifact\";\r\nimport { ICharTC, ICharTCArtifactSlot } from \"../../../../Types/character\";\r\nimport { ArtifactRarity, SetNum, SubstatType, substatType } from \"../../../../Types/consts\";\r\nimport { ICachedWeapon } from \"../../../../Types/weapon\";\r\nimport { deepClone, objectKeyMap, objectMap, objPathValue } from \"../../../../Util/Util\";\r\nimport { defaultInitialWeaponKey } from \"../../../../Util/WeaponUtil\";\r\nimport useCharTC from \"./useCharTC\";\r\nimport { mapFormulas } from \"../../../../Formula/internal\";\r\nimport { optimize, precompute } from \"../../../../Formula/optimization\";\r\nimport { NumNode } from \"../../../../Formula/type\";\r\nimport OptimizationTargetSelector from \"../TabOptimize/Components/OptimizationTargetSelector\";\r\nimport { dynamicData } from \"../TabOptimize/foreground\";\r\nconst WeaponSelectionModal = React.lazy(() => import('../../../../Components/Weapon/WeaponSelectionModal'))\r\n\r\ntype ISet = Partial<Record<ArtifactSetKey, 1 | 2 | 4>>\r\nexport default function TabTheorycraft() {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { data: oldData } = useContext(DataContext)\r\n  const { character, character: { key: characterKey, compareData }, characterSheet, characterDispatch } = useContext(CharacterContext)\r\n  const data = useCharTC(characterKey, defaultInitialWeaponKey(characterSheet.weaponTypeKey))\r\n  const setData = useCallback((data: ICharTC) => database.charTCs.set(characterKey, data), [characterKey, database])\r\n  const resetData = useCallback(() => {\r\n    setData(initCharTC(defaultInitialWeaponKey(characterSheet.weaponTypeKey)))\r\n  }, [setData, characterSheet])\r\n  const setWeapon = useCallback(\r\n    (action: Partial<ICharTC[\"weapon\"]>) => {\r\n      setData({ ...data, weapon: { ...data.weapon, ...action } })\r\n    },\r\n    [setData, data],\r\n  )\r\n\r\n  const copyFrom = useCallback(\r\n    (eWeapon: ICachedWeapon, build: ICachedArtifact[]) => {\r\n      const newData = initCharTC(eWeapon.key)\r\n      newData.artifact.substats.type = data.artifact.substats.type\r\n\r\n      newData.weapon.level = eWeapon.level\r\n      newData.weapon.ascension = eWeapon.ascension\r\n      newData.weapon.refinement = eWeapon.refinement\r\n\r\n      const sets = {}\r\n      build.forEach(art => {\r\n        if (!art) return\r\n        const { slotKey, setKey, substats, mainStatKey, level, rarity } = art\r\n        newData.artifact.slots[slotKey].level = level\r\n        newData.artifact.slots[slotKey].statKey = mainStatKey\r\n        newData.artifact.slots[slotKey].rarity = rarity\r\n        sets[setKey] = (sets[setKey] ?? 0) + 1\r\n        substats.forEach(substat => {\r\n          if (substat.key) newData.artifact.substats.stats[substat.key] = (newData.artifact.substats.stats[substat.key] ?? 0) + substat.accurateValue\r\n        })\r\n      })\r\n      newData.artifact.sets = Object.fromEntries(Object.entries(sets).map(([key, value]) => [key,\r\n        value === 3 ? 2 :\r\n          value === 5 ? 4 :\r\n            value === 1 && !(key as string).startsWith(\"PrayersFor\") ? 0 : value\r\n      ]).filter(([, value]) => value))\r\n      setData(newData)\r\n    },\r\n    [data, setData],\r\n  )\r\n  const location = useLocation()\r\n  const { build: locBuild } = (location.state as { build: string[] } | undefined) ?? { build: undefined }\r\n  useEffect(() => {\r\n    if (!locBuild) return\r\n    const eWeapon = database.weapons.get(character.equippedWeapon)!\r\n    copyFrom(eWeapon, locBuild.map(i => database.arts.get(i)!))\r\n    // WARNING: if copyFrom is included, it will cause a render loop due to its setData <---> data\r\n    // eslint-disable-next-line\r\n  }, [locBuild, database])\r\n\r\n  const copyFromEquipped = useCallback(\r\n    () => {\r\n      const eWeapon = database.weapons.get(character.equippedWeapon)!\r\n      copyFrom(eWeapon, Object.values(character.equippedArtifacts).map(a => database.arts.get(a)!).filter(a => a))\r\n    },\r\n    [database, character.equippedArtifacts, character.equippedWeapon, copyFrom],\r\n  )\r\n\r\n  const weapon: ICachedWeapon = useMemo(() => {\r\n    return {\r\n      ...data.weapon,\r\n      location: \"\",\r\n      lock: false,\r\n      id: \"\"\r\n    }\r\n  }, [data])\r\n  const setArtifact = useCallback((artifact: ICharTC[\"artifact\"]) => {\r\n    const data_ = deepClone(data)\r\n    data_.artifact = artifact\r\n    setData(data_)\r\n  }, [data, setData])\r\n\r\n  const setSubstatsType = useCallback((t: SubstatType) => {\r\n    const data_ = deepClone(data)\r\n    data_.artifact.substats.type = t\r\n    setData(data_)\r\n  }, [data, setData])\r\n\r\n  const setSubstats = useCallback((setSubstats: Record<SubstatKey, number>) => {\r\n    const data_ = deepClone(data)\r\n    data_.artifact.substats.stats = setSubstats\r\n    setData(data_)\r\n  }, [data, setData])\r\n\r\n  const deferredData = useDeferredValue(data)\r\n  const overriderArtData = useMemo(() => {\r\n    const stats = { ...deferredData.artifact.substats.stats }\r\n    Object.values(deferredData.artifact.slots).forEach(({ statKey, rarity, level }) =>\r\n      stats[statKey] = (stats[statKey] ?? 0) + Artifact.mainStatValue(statKey, rarity, level))\r\n    return {\r\n      art: objectMap(stats, (v, k) => k.endsWith(\"_\") ? percent(v / 100) : constant(v)),\r\n      artSet: objectMap(deferredData.artifact.sets, v => constant(v)),\r\n    }\r\n  }, [deferredData])\r\n\r\n  const overrideWeapon: ICachedWeapon = useMemo(() => ({\r\n    id: \"\",\r\n    location: \"\",\r\n    key: data.weapon.key,\r\n    level: data.weapon.level,\r\n    ascension: data.weapon.ascension,\r\n    refinement: data.weapon.refinement,\r\n    lock: false\r\n  }), [data])\r\n  const teamData = useTeamData(characterKey, 0, overriderArtData, overrideWeapon)\r\n\r\n  const { target: charUIData } = teamData?.[characterKey] ?? {}\r\n\r\n  const dataContextValue: dataContextObj | undefined = useMemo(() => {\r\n    if (!teamData || !charUIData) return undefined\r\n    return {\r\n      data: charUIData,\r\n      teamData,\r\n    }\r\n  }, [charUIData, teamData])\r\n  const dataContextValueWithOld: dataContextObj | undefined = useMemo(() => {\r\n    if (!dataContextValue) return undefined\r\n    return {\r\n      ...dataContextValue,\r\n      oldData: compareData ? oldData : undefined,\r\n    }\r\n  }, [dataContextValue, compareData, oldData])\r\n\r\n  const optimizationTarget = data.optimization.target\r\n  const setOptimizationTarget = useCallback((optimizationTarget: ICharTC[\"optimization\"][\"target\"]) => {\r\n    const data_ = deepClone(data)\r\n    data_.optimization.target = optimizationTarget\r\n    setData(data_)\r\n  }, [data, setData])\r\n\r\n  const distributedSubstats = data.optimization.distributedSubstats\r\n  const setDistributedSubstats = (distributedSubstats: ICharTC[\"optimization\"][\"distributedSubstats\"]) => {\r\n    const data_ = deepClone(data)\r\n    data_.optimization.distributedSubstats = distributedSubstats\r\n    setData(data_)\r\n  }\r\n  const maxSubstats = useMemo(() => {\r\n    let result: Record<SubstatKey, number>\r\n    const maxSubstats = data.optimization.maxSubstats;\r\n    if (maxSubstats.useMaxOff) {\r\n      const { max, offset } = maxSubstats;\r\n      result = objectKeyMap(allSubstatKeys, (k) => max - offset * Object.values(data.artifact.slots).reduce((p, s) => p + +(s.statKey === k), 0));\r\n    } else {\r\n      result = maxSubstats\r\n    }\r\n    return result;\r\n  }, [data.artifact.slots, data.optimization.maxSubstats])\r\n\r\n  // This solves\r\n  // $\\argmax_{x\\in N^k, \\sum x <= n, x <= x_max} f(x)$ without assumptions on the properties of $f$\r\n  // We brute force iterate over all substats in the graph and compute the maximum\r\n  // n.b. some substat combinations may not be materializable into real artifacts\r\n  const optimizeSubstats = useCallback((apply: boolean) => () => {\r\n    if (!characterKey || !optimizationTarget) return\r\n    if (!teamData) return\r\n    let workerData = teamData[characterKey]?.target.data[0]\r\n    if (!workerData) return\r\n    workerData = { ...workerData, ...mergeData([workerData, dynamicData]) } // Mark art fields as dynamic\r\n    const unoptimizedOptimizationTargetNode = objPathValue(workerData.display ?? {}, optimizationTarget) as NumNode | undefined\r\n    if (!unoptimizedOptimizationTargetNode) return\r\n    const unoptimizedNodes = [unoptimizedOptimizationTargetNode]\r\n    let nodes = optimize(unoptimizedNodes, workerData, ({ path: [p] }) => p !== \"dyn\")\r\n    // Const fold the artifact set\r\n    nodes = mapFormulas(nodes, f => {\r\n      if (f.operation === \"read\" && f.path[0] === \"dyn\") {\r\n        const a = data.artifact.sets[f.path[1]];\r\n        if (a) {\r\n          return constant(a)\r\n        } else if (allArtifactSets.includes(f.path[1] as any)) {\r\n          return constant(0)\r\n        }\r\n      }\r\n      return f\r\n    }, f => f)\r\n    nodes = optimize(nodes, {}, _ => false)\r\n\r\n    const subs = new Set<string>()\r\n    const compute = precompute(nodes, {}, f => {\r\n      subs.add(f.path[1])\r\n      return f.path[1]\r\n    }, 3)\r\n    const realSubs = [...subs].filter(x => allSubstatKeys.includes(x as any))\r\n    if (realSubs.reduce((p, x) => p + maxSubstats[x], 0) < distributedSubstats)\r\n      realSubs.push(\"__unused__\")\r\n    const comp = (statKey: string) => statKey.endsWith(\"_\") ? 100 : 1\r\n\r\n    let max = -Infinity\r\n    const buffer = Object.fromEntries([...subs].map(x => [x, 0]))\r\n    let maxBuffer: typeof buffer | undefined;\r\n    const bufferMain = Object.entries(data.artifact.slots).map((\r\n      [_, { statKey, rarity, level }]) => [statKey, Artifact.mainStatValue(statKey, rarity, level) / comp(statKey)] as const\r\n    ).reduce<Partial<Record<MainStatKey, number>>>((acc, [k, v]) => ((acc[k] = (acc[k] ?? 0) + v, acc)), {})\r\n    const bufferSubs = objectMap(data.artifact.substats.stats, (v, k) => v / comp(k))\r\n    const permute = (distributedSubstats: number, [x, ...xs]: string[]) => {\r\n      if (xs.length === 0) {\r\n        if (distributedSubstats > maxSubstats[x])\r\n          return\r\n        if (x !== \"__unused__\")\r\n          buffer[x] = Artifact.substatValue(x as SubstatKey, 5, data.artifact.substats.type) / comp(x) * distributedSubstats;\r\n        const [result] = compute([{ values: bufferMain }, { values: bufferSubs }, { values: buffer }]);\r\n        if (result > max) {\r\n          max = result\r\n          maxBuffer = structuredClone(buffer)\r\n        }\r\n        return\r\n      }\r\n      for (let i = 0; i <= Math.min(maxSubstats[x], distributedSubstats); i++) {\r\n        buffer[x] = Artifact.substatValue(x as SubstatKey, 5, data.artifact.substats.type) / comp(x) * i;\r\n        permute(distributedSubstats - i, xs)\r\n      }\r\n    }\r\n    permute(distributedSubstats, realSubs)\r\n    console.log(maxBuffer)\r\n    console.log(objectMap(maxBuffer!, (v, x) =>\r\n      allSubstatKeys.includes(x as any) ?\r\n        v / (Artifact.substatValue(x as SubstatKey, 5, data.artifact.substats.type) / comp(x)) :\r\n        v\r\n    ))\r\n\r\n    if (apply) {\r\n      const data_ = deepClone(data)\r\n      data_.artifact.substats.stats = objectMap(data.artifact.substats.stats, (v, k) => v + (maxBuffer![k] ?? 0) * comp(k))\r\n      setData(data_)\r\n    }\r\n  }, [characterKey, data, distributedSubstats, maxSubstats, optimizationTarget, setData, teamData])\r\n\r\n  return <Stack spacing={1}>\r\n    <CardLight>\r\n      <Box sx={{ display: \"flex\", gap: 1, p: 1 }}>\r\n        <Box sx={{ flexGrow: 1, display: \"flex\", gap: 1 }}>\r\n          <Button color=\"info\" onClick={copyFromEquipped} startIcon={<CopyAll />}>Copy from equipped</Button>\r\n          <Button color=\"error\" onClick={resetData} startIcon={<Refresh />}>Reset</Button>\r\n        </Box>\r\n        <SolidToggleButtonGroup exclusive value={compareData} onChange={(e, v) => characterDispatch({ compareData: v })} size=\"small\">\r\n          <ToggleButton value={false} disabled={!compareData}>Show TC stats</ToggleButton>\r\n          <ToggleButton value={true} disabled={compareData}>Compare vs. equipped</ToggleButton>\r\n        </SolidToggleButtonGroup>\r\n      </Box>\r\n    </CardLight>\r\n    {dataContextValue ? <DataContext.Provider value={dataContextValue}>\r\n      <Grid container spacing={1} sx={{ justifyContent: \"center\" }}>\r\n        <Grid item sx={{ flexGrow: -1 }}  >\r\n          <WeaponEditorCard weapon={weapon} setWeapon={setWeapon} weaponTypeKey={characterSheet.weaponTypeKey} />\r\n          <ArtifactMainLevelCard artifactData={data.artifact} setArtifactData={setArtifact} />\r\n        </Grid>\r\n        <Grid item sx={{ flexGrow: 1 }}>\r\n          <ArtifactSubCard\r\n            substats={data.artifact.substats.stats} setSubstats={setSubstats}\r\n            substatsType={data.artifact.substats.type} setSubstatsType={setSubstatsType}\r\n            mainStatKeys={Object.values(data.artifact.slots).map(s => s.statKey)}\r\n            distributedSubstats={distributedSubstats} setDistributedSubstats={setDistributedSubstats}\r\n            maxSubstats={maxSubstats} setMaxSubstats={(k: SubstatKey) => (v: number) => {\r\n              if (data.optimization.maxSubstats[k] === v) return\r\n              const data_ = deepClone(data)\r\n              data_.optimization.maxSubstats.useMaxOff = false\r\n              data_.optimization.maxSubstats[k] = v\r\n              setData(data_)\r\n            }}\r\n            max={data.optimization.maxSubstats.max}\r\n            setMax={(v) => {\r\n              if (data.optimization.maxSubstats.max === v) return\r\n              const data_ = deepClone(data)\r\n              data_.optimization.maxSubstats.useMaxOff = true\r\n              data_.optimization.maxSubstats.max = v\r\n              setData(data_)\r\n            }}\r\n            offset={data.optimization.maxSubstats.offset}\r\n            setOffset={(v) => {\r\n              if (data.optimization.maxSubstats.offset === v) return\r\n              const data_ = deepClone(data)\r\n              data_.optimization.maxSubstats.useMaxOff = true\r\n              data_.optimization.maxSubstats.offset = v\r\n              setData(data_)\r\n            }}\r\n            disableMaxSubstats={data.optimization.maxSubstats.useMaxOff} />\r\n        </Grid>\r\n      </Grid >\r\n      <OptimizationTargetSelector\r\n        optimizationTarget={optimizationTarget}\r\n        setTarget={target => setOptimizationTarget(target)}\r\n      />\r\n      <Button\r\n        onClick={optimizeSubstats(false)}\r\n        disabled={!optimizationTarget}\r\n      >\r\n        Optimize Substats\r\n      </Button>\r\n      <Button\r\n        onClick={optimizeSubstats(true)}\r\n        disabled={!optimizationTarget}\r\n      >\r\n        Optimize & Apply Substats\r\n      </Button>\r\n    </DataContext.Provider> : <Skeleton variant='rectangular' width='100%' height={500} />}\r\n    <CardLight sx={{ flexGrow: 1, p: 1 }}>\r\n      {dataContextValueWithOld ? <DataContext.Provider value={dataContextValueWithOld}>\r\n        <StatDisplayComponent />\r\n      </DataContext.Provider> : <Skeleton variant='rectangular' width='100%' height={500} />}\r\n    </CardLight>\r\n  </Stack>\r\n}\r\n\r\nfunction WeaponEditorCard({ weapon, setWeapon, weaponTypeKey }: { weapon: ICachedWeapon, weaponTypeKey: WeaponTypeKey, setWeapon: (action: Partial<ICharTC[\"weapon\"]>) => void }) {\r\n  const { key, level = 0, refinement = 1, ascension = 0 } = weapon\r\n  const weaponSheet = getWeaponSheet(key)\r\n  const [show, onShow, onHide] = useBoolState()\r\n  const { data } = useContext(DataContext)\r\n  const weaponUIData = useMemo(() => weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\r\n  return <CardLight sx={{ p: 1, mb: 1 }} >\r\n    <WeaponSelectionModal ascension={ascension} show={show} onHide={onHide} onSelect={k => setWeapon({ key: k })} weaponTypeFilter={weaponTypeKey} />\r\n    <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      <Box display=\"flex\" gap={1}>\r\n        <Box\r\n          className={`grad-${weaponSheet.rarity}star`}\r\n          component=\"img\"\r\n          src={weaponAsset(weapon.key, ascension >= 2)}\r\n          sx={{ flexshrink: 1, flexBasis: 0, maxWidth: \"30%\", borderRadius: 1 }}\r\n        />\r\n        <Stack spacing={1} flexGrow={1}>\r\n          <Button fullWidth color=\"info\" sx={{ flexGrow: 1 }} onClick={onShow}><Box sx={{ maxWidth: \"10em\" }}>{weaponSheet?.name}</Box></Button>\r\n          {weaponSheet.hasRefinement && <RefinementDropdown refinement={refinement} setRefinement={r => setWeapon({ refinement: r })} />}\r\n        </Stack>\r\n      </Box>\r\n      <LevelSelect level={level} ascension={ascension} setBoth={setWeapon} useLow={!weaponSheet.hasRefinement} />\r\n      <CardDark >\r\n        <CardHeader title={\"Main Stats\"} titleTypographyProps={{ variant: \"subtitle2\" }} />\r\n        <Divider />\r\n        {weaponUIData && <FieldDisplayList>\r\n          {[input.weapon.main, input.weapon.sub, input.weapon.sub2].map((node, i) => {\r\n            const n = weaponUIData.get(node)\r\n            if (n.isEmpty || !n.value) return null\r\n            return <NodeFieldDisplay key={JSON.stringify(n.info)} node={n} component={ListItem} />\r\n          })}\r\n        </FieldDisplayList>}\r\n      </CardDark>\r\n      {data && weaponSheet?.document && <DocumentDisplay sections={weaponSheet.document} />}\r\n    </Box>\r\n  </CardLight >\r\n}\r\n\r\nfunction ArtifactMainLevelCard({ artifactData, setArtifactData }:\r\n  { artifactData: ICharTC[\"artifact\"], setArtifactData: (a: ICharTC[\"artifact\"]) => void }) {\r\n  const setSlot = useCallback((slotKey: SlotKey) => (slot: ICharTCArtifactSlot) => {\r\n    const artifactData_ = deepClone(artifactData)\r\n    artifactData_.slots[slotKey] = slot\r\n    setArtifactData(artifactData_)\r\n  }, [artifactData, setArtifactData])\r\n\r\n  const setArtSet = useCallback((artSet: ISet) => {\r\n    const artifactData_ = deepClone(artifactData)\r\n    artifactData_.sets = artSet\r\n    setArtifactData(artifactData_)\r\n  }, [artifactData, setArtifactData])\r\n\r\n  return <Stack spacing={1} >\r\n    <CardLight sx={{ p: 1 }}>\r\n      <Stack spacing={1}>\r\n        {allSlotKeys.map(s => <ArtifactMainLevelSlot key={s} slotKey={s} slot={artifactData.slots[s]} setSlot={setSlot(s)} />)}\r\n      </Stack>\r\n    </CardLight>\r\n    <Suspense fallback={<Skeleton variant='rectangular' width='100%' height={200} />}>\r\n      <ArtifactSetsEditor artSet={artifactData.sets} setArtSet={setArtSet} />\r\n    </Suspense>\r\n  </Stack>\r\n}\r\nfunction ArtifactMainLevelSlot({ slotKey, slot, setSlot: setSlotProp }: { slotKey: SlotKey, slot: ICharTCArtifactSlot, setSlot: (s: ICharTCArtifactSlot) => void }) {\r\n  const { level, statKey, rarity } = slot\r\n  const keys = Artifact.slotMainStats(slotKey)\r\n  const setSlot = useCallback((action: Partial<ICharTCArtifactSlot>) => {\r\n    setSlotProp({ ...slot, ...action })\r\n  }, [slot, setSlotProp])\r\n  const setRarity = useCallback(\r\n    (r: ArtifactRarity) => {\r\n      const mLvl = maxArtifactLevel[r] ?? 0\r\n      if (level > mLvl) setSlot({ rarity: r, level: mLvl })\r\n      else setSlot({ rarity: r })\r\n    }, [level, setSlot])\r\n\r\n  return <Box display=\"flex\" gap={1} justifyContent=\"space-between\" alignItems=\"center\">\r\n    <SlotIcon slotKey={slotKey} />\r\n    <CardDark sx={{ height: \"100%\", minWidth: \"5em\", flexGrow: 1, display: \"flex\" }}>\r\n      {keys.length === 1 ?\r\n        <Box p={1} justifyContent=\"center\" alignItems=\"center\" width=\"100%\" display=\"flex\" gap={1}><StatIcon statKey={keys[0]} iconProps={iconInlineProps} /> {KeyMap.getStr(keys[0])}</Box> :\r\n        <DropdownButton sx={{ px: 0 }} fullWidth title={<StatWithUnit statKey={statKey} />} color={KeyMap.getVariant(statKey) ?? \"success\"}>\r\n          {keys.map(msk =>\r\n            <MenuItem key={msk} disabled={statKey === msk} onClick={() => setSlot({ statKey: msk })}>\r\n              <StatColoredWithUnit statKey={msk} />\r\n            </MenuItem>)}\r\n        </DropdownButton>}\r\n    </CardDark>\r\n    <DropdownButton sx={{ px: 0 }} title={<Box sx={{ display: \"flex\", alignItems: \"center\" }}>{rarity} <StarRoundedIcon fontSize=\"inherit\" /></Box>} >\r\n      {[5, 4, 3].map(r =>\r\n        <MenuItem key={r} disabled={rarity === r} onClick={() => setRarity(r as ArtifactRarity)}>\r\n          <Box sx={{ display: \"flex\", alignItems: \"center\" }}>{r} <StarRoundedIcon fontSize=\"inherit\" /></Box>\r\n        </MenuItem>)}\r\n    </DropdownButton>\r\n    <CustomNumberInput startAdornment=\"+\" value={level} color={Artifact.levelVariant(level)} onChange={l => l !== undefined && setSlot({ level: l })} sx={{ borderRadius: 1, pl: 1, my: 0, height: \"100%\" }} inputProps={{ sx: { pl: 0.5, width: \"2em\" }, max: 20, min: 0 }} />\r\n    <CardDark sx={{ height: \"100%\", minWidth: \"4em\" }}>\r\n      <Box p={1} textAlign=\"center\">{`${cacheValueString(Artifact.mainStatValue(statKey, rarity, level), KeyMap.unit(statKey))}${KeyMap.unit(statKey)}`}</Box>\r\n    </CardDark>\r\n  </Box>\r\n}\r\n\r\nfunction ArtifactSetsEditor({ artSet, setArtSet }: { artSet: ISet, setArtSet(artSet: ISet) }) {\r\n  const setSet = useCallback((setKey: ArtifactSetKey | \"\") => {\r\n    if (!setKey) return\r\n    setArtSet({ ...artSet, [setKey]: parseInt(Object.keys(getArtSheet(setKey).setEffects)[0]) })\r\n  }, [artSet, setArtSet,])\r\n\r\n  const setValue = useCallback((setKey: ArtifactSetKey) => (value: 1 | 2 | 4) => setArtSet({ ...artSet, [setKey]: value }), [artSet, setArtSet])\r\n  const deleteValue = useCallback((setKey: ArtifactSetKey) => () => {\r\n    const { [setKey]: _, ...rest } = artSet\r\n    setArtSet({ ...rest })\r\n  }, [artSet, setArtSet])\r\n\r\n  const remaining = 5 - Object.values(artSet).reduce((a, b) => a + b, 0)\r\n\r\n  return <Stack spacing={1} sx={{ flexGrow: 1 }}>\r\n    {Object.entries(artSet).map(([setKey, value]) => <ArtifactSetEditor key={setKey} setKey={setKey} value={value} setValue={setValue(setKey)} deleteValue={deleteValue(setKey)} remaining={remaining} />)}\r\n    <CardLight sx={{ flexGrow: 1, overflow: \"visible\" }}>\r\n      <ArtifactSetAutocomplete\r\n        artSetKey={\"\"}\r\n        setArtSetKey={setSet}\r\n        label={\"New Artifact Set\"}\r\n        getOptionDisabled={({ key }) => Object.keys(artSet).includes(key as ArtifactSetKey) || !key || Object.keys(getArtSheet(key).setEffects).every(n => parseInt(n) > remaining)}\r\n      />\r\n    </CardLight>\r\n\r\n  </Stack>\r\n}\r\nfunction ArtifactSetEditor({ setKey, value, setValue, deleteValue, remaining }: { setKey: ArtifactSetKey, value: 1 | 2 | 4, setValue: (v: 1 | 2 | 4) => void, deleteValue: () => void, remaining: number }) {\r\n  const artifactSheet = getArtSheet(setKey)\r\n\r\n  /* Assumes that all conditionals are from 4-Set. needs to change if there are 2-Set conditionals */\r\n  const set4CondNums = useMemo(() => {\r\n    if (value < 4) return []\r\n    return Object.keys(artifactSheet.setEffects).filter(setNumKey => artifactSheet.setEffects[setNumKey]?.document.some(doc => \"states\" in doc))\r\n  }, [artifactSheet, value])\r\n\r\n  return <CardLight>\r\n    <Box display=\"flex\">\r\n      <ArtifactSetTooltip artifactSheet={artifactSheet} numInSet={value}>\r\n        <Box flexGrow={1} p={1} display=\"flex\" gap={1} alignItems=\"center\">\r\n          <ImgIcon size={2} src={artifactDefIcon(setKey)} />\r\n          <Box >{artifactSheet.setName}</Box>\r\n          <Info />\r\n        </Box>\r\n      </ArtifactSetTooltip>\r\n      <ButtonGroup>\r\n        <DropdownButton size=\"small\" title={<Box whiteSpace=\"nowrap\">{value}-set</Box>}>\r\n          {Object.keys(artifactSheet.setEffects).map(setKey => parseInt(setKey)).map(setKey =>\r\n            <MenuItem key={setKey} disabled={value === setKey || setKey > (remaining + value)} onClick={() => setValue(setKey as 1 | 2 | 4)}>{setKey}-set</MenuItem>\r\n          )}\r\n        </DropdownButton>\r\n        <Button color=\"error\" size=\"small\" onClick={deleteValue}>\r\n          <DeleteForever />\r\n        </Button>\r\n      </ButtonGroup>\r\n    </Box>\r\n    {!!set4CondNums.length && <Stack spacing={1} sx={{ p: 1 }}>\r\n      {set4CondNums.map(setNumKey =>\r\n        <SetEffectDisplay key={setNumKey} setKey={setKey} setNumKey={parseInt(setNumKey) as SetNum} hideHeader conditionalsOnly />\r\n      )}\r\n    </Stack>}\r\n  </CardLight>\r\n}\r\nfunction ArtifactSubCard({ substats, setSubstats, substatsType, setSubstatsType, mainStatKeys, distributedSubstats, setDistributedSubstats, maxSubstats, setMaxSubstats, disableMaxSubstats, max, setMax, offset, setOffset }: {\r\n  substats: Record<SubstatKey, number>, setSubstats: (substats: Record<SubstatKey, number>) => void,\r\n  substatsType: SubstatType, setSubstatsType: (t: SubstatType) => void,\r\n  mainStatKeys: MainStatKey[],\r\n  distributedSubstats: number, setDistributedSubstats: (f: number) => void,\r\n  maxSubstats: Record<SubstatKey, number>, setMaxSubstats: (k: SubstatKey) => (v: number) => void,\r\n  max: number, setMax: (v: number) => void,\r\n  offset: number, setOffset: (v: number) => void,\r\n  disableMaxSubstats: boolean\r\n}) {\r\n  const setValue = useCallback((key: SubstatKey) => (v: number) => setSubstats({ ...substats, [key]: v }), [substats, setSubstats])\r\n  const { t } = useTranslation(\"page_character\")\r\n  const rv = Object.entries(substats).reduce((t, [k, v]) => t + (v / Artifact.substatValue(k)), 0) * 100\r\n  const rolls = Object.entries(substats).reduce((t, [k, v]) => t + (v / Artifact.substatValue(k, undefined, substatsType)), 0)\r\n  return <CardLight sx={{ p: 1, height: \"100%\" }}>\r\n    <Box sx={{ mb: 1, display: \"flex\", gap: 1 }}>\r\n      <DropdownButton fullWidth title={t(`tabTheorycraft.substatType.${substatsType}`)}>\r\n        {substatType.map(st => <MenuItem key={st} disabled={substatsType === st} onClick={() => setSubstatsType(st)}>{t(`tabTheorycraft.substatType.${st}`)}</MenuItem>)}\r\n      </DropdownButton>\r\n      <BootstrapTooltip title={<Typography>{t`tabTheorycraft.maxTotalRolls`}</Typography>} placement=\"top\">\r\n        <CardDark sx={{ textAlign: \"center\", py: 0.5, px: 1, minWidth: \"15em\", whiteSpace: \"nowrap\", display: \"flex\", gap: 2, justifyContent: \"flex-end\", alignItems: \"center\" }}>\r\n          <ColorText color={rolls > 45 ? \"warning\" : undefined} >Rolls: <strong>{rolls.toFixed(0)}</strong></ColorText>\r\n          <ColorText color={rolls > 45 ? \"warning\" : undefined} >RV: <strong>{rv.toFixed(1)}%</strong></ColorText>\r\n        </CardDark>\r\n      </BootstrapTooltip>\r\n      <CustomNumberInput\r\n        value={distributedSubstats}\r\n        onChange={v => v !== undefined && setDistributedSubstats(v)}\r\n        endAdornment={\"Distributed Substats\"}\r\n        sx={{ borderRadius: 1, px: 1, width: \"50%\" }}\r\n        inputProps={{ sx: { textAlign: \"right\", px: 1, width: \"20%\" }, min: 0 }}\r\n      />\r\n      <CustomNumberInput\r\n        value={max}\r\n        onChange={v => v !== undefined && setMax(v)}\r\n        endAdornment={\"Max\"}\r\n        color={!disableMaxSubstats ? \"error\" : \"success\"}\r\n        sx={{ borderRadius: 1, px: 1 }}\r\n        inputProps={{ sx: { textAlign: \"right\", px: 1 }, min: 0 }}\r\n      />\r\n      <CustomNumberInput\r\n        value={offset}\r\n        onChange={v => v !== undefined && setOffset(v)}\r\n        endAdornment={\"Offset\"}\r\n        color={!disableMaxSubstats ? \"error\" : \"success\"}\r\n        sx={{ borderRadius: 1, px: 1 }}\r\n        inputProps={{ sx: { textAlign: \"right\", px: 1 }, min: 0 }}\r\n      />\r\n    </Box>\r\n    <Stack spacing={1}>\r\n      {Object.entries(substats).map(([k, v]) =>\r\n        <ArtifactSubstatEditor\r\n          key={k}\r\n          statKey={k}\r\n          value={v} setValue={setValue(k)}\r\n          substatsType={substatsType}\r\n          mainStatKeys={mainStatKeys}\r\n          maxSubstat={maxSubstats[k]}\r\n          disableMaxSubstats={disableMaxSubstats}\r\n          setMaxSubstat={setMaxSubstats(k)}\r\n        />)}\r\n    </Stack>\r\n  </CardLight>\r\n}\r\nfunction ArtifactSubstatEditor({ statKey, value, setValue, substatsType, mainStatKeys, maxSubstat, setMaxSubstat, disableMaxSubstats }: {\r\n  statKey: SubstatKey,\r\n  value: number, setValue: (v: number) => void,\r\n  substatsType: SubstatType,\r\n  mainStatKeys: MainStatKey[],\r\n  maxSubstat: number, setMaxSubstat: (v: number) => void,\r\n  disableMaxSubstats: boolean,\r\n}) {\r\n  const { t } = useTranslation(\"page_character\")\r\n  const substatValue = Artifact.substatValue(statKey, 5, substatsType)\r\n  const [rolls, setRolls] = useState(() => value / substatValue)\r\n  useEffect(() => setRolls(value / substatValue), [value, substatValue])\r\n\r\n  const unit = KeyMap.unit(statKey)\r\n  const displayValue = rolls * substatValue\r\n\r\n  const rv = (rolls * substatValue) / Artifact.substatValue(statKey) * 100\r\n  const numMains = mainStatKeys.reduce((t, ms) => t + (ms === statKey ? 1 : 0), 0)\r\n  const maxRolls = (5 - numMains) * 6\r\n  // 0.0001 to nudge float comparasion\r\n  const invalid = (rolls - 0.0001) > maxRolls\r\n  const setRValue = useCallback((r: number) => setValue(r * substatValue), [setValue, substatValue])\r\n\r\n  return <Stack spacing={0.5}>\r\n    <Box display=\"flex\" gap={1} justifyContent=\"space-between\" alignItems=\"center\">\r\n      <CardDark sx={{ p: 0.5, minWidth: \"11em\", flexGrow: 1, display: \"flex\", gap: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n        <StatIcon statKey={statKey} iconProps={{ fontSize: \"inherit\" }} />{KeyMap.getStr(statKey)}{KeyMap.unit(statKey)}\r\n      </CardDark>\r\n      <BootstrapTooltip title={<Typography>{t(numMains ? `tabTheorycraft.maxRollsMain` : `tabTheorycraft.maxRolls`, { value: maxRolls })}</Typography>} placement=\"top\">\r\n        <CardDark sx={{ textAlign: \"center\", p: 0.5, minWidth: \"8em\" }}>\r\n          <ColorText color={invalid ? \"warning\" : undefined}>RV: <strong>{rv.toFixed(1)}%</strong></ColorText>\r\n        </CardDark>\r\n      </BootstrapTooltip>\r\n    </Box>\r\n    <Box display=\"flex\" gap={1} justifyContent=\"space-between\" alignItems=\"center\">\r\n      <CustomNumberInput\r\n        color={displayValue ? \"success\" : \"primary\"}\r\n        float={KeyMap.unit(statKey) === \"%\"}\r\n        endAdornment={KeyMap.unit(statKey) || <Box width=\"1em\" component=\"span\" />}\r\n        value={parseFloat(displayValue.toFixed(2))}\r\n        onChange={v => v !== undefined && setValue(v)}\r\n        sx={{ borderRadius: 1, px: 1, height: \"100%\", width: \"6em\" }}\r\n        inputProps={{ sx: { textAlign: \"right\" }, min: 0 }} />\r\n      <CardDark sx={{ px: 2, flexGrow: 1, display: \"flex\", gap: 1, alignItems: \"center\", justifyContent: \"center\", overflow: \"visible\" }}>\r\n        <Slider\r\n          size=\"small\"\r\n          value={rolls}\r\n          max={maxRolls}\r\n          min={0}\r\n          step={1}\r\n          marks\r\n          valueLabelDisplay=\"auto\"\r\n          onChange={(e, v) => setRolls(v as number)}\r\n          onChangeCommitted={(e, v) => setRValue(v as number)}\r\n        />\r\n      </CardDark>\r\n      <CustomNumberInput\r\n        color={value ? (invalid ? \"warning\" : \"success\") : \"primary\"}\r\n        float\r\n        startAdornment={<Box sx={{ whiteSpace: \"nowrap\", width: \"7em\", display: \"flex\", justifyContent: \"space-between\" }}><span>{cacheValueString(substatValue, unit)}{unit}</span><span>x</span></Box>}\r\n        value={parseFloat(rolls.toFixed(2))}\r\n        onChange={v => v !== undefined && setValue(v * substatValue)}\r\n        sx={{ borderRadius: 1, px: 1, my: 0, height: \"100%\", width: \"7em\" }}\r\n        inputProps={{ sx: { textAlign: \"right\", pr: 0.5, }, min: 0, step: 1 }} />\r\n      <CustomNumberInput\r\n        value={maxSubstat}\r\n        onChange={v => v !== undefined && setMaxSubstat(v)}\r\n        color={disableMaxSubstats ? \"error\" : \"success\"}\r\n        sx={{ borderRadius: 1, px: 1, my: 0, height: \"100%\", width: \"7em\" }}\r\n        inputProps={{ sx: { textAlign: \"right\", pr: 0.5, }, min: 0, step: 1 }} />\r\n    </Box>\r\n  </Stack>\r\n}\r\n","import { useContext, useEffect, useState } from \"react\"\r\nimport { DatabaseContext } from \"../../../../Database/Database\"\r\nimport { CharacterKey, WeaponKey } from \"../../../../Types/consts\"\r\n\r\nexport default function useCharTC(characterKey: CharacterKey, defWeapon: WeaponKey) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [charTC, setCharTC] = useState(() => database.charTCs.getWithInit(characterKey, defWeapon))\r\n  useEffect(() => setCharTC(database.charTCs.getWithInit(characterKey, defWeapon)), [database, characterKey, defWeapon])\r\n  useEffect(() =>\r\n    characterKey ? database.charTCs.follow(characterKey, (k, r, v) => r === \"update\" && setCharTC(v)) : undefined,\r\n    [characterKey, setCharTC, database])\r\n  return charTC\r\n}\r\n","import { allElements, TravelerKey } from '@genshin-optimizer/consts';\r\nimport { MenuItem } from '@mui/material';\r\nimport { useContext } from 'react';\r\nimport ColorText from '../../Components/ColoredText';\r\nimport DropdownButton from '../../Components/DropdownMenu/DropdownButton';\r\nimport { CharacterContext } from '../../Context/CharacterContext';\r\nimport { stg } from '../../Data/SheetUtil';\r\nimport useCharSelectionCallback from '../../ReactHooks/useCharSelectionCallback';\r\nimport { travelerElements, TravelerToElement } from '../../Types/consts';\r\n\r\nexport default function TravelerElementSelect() {\r\n  const { character } = useContext(CharacterContext)\r\n  const { key } = character\r\n  const setCharacter = useCharSelectionCallback()\r\n  if (!(key.startsWith(\"Traveler\"))) return null\r\n\r\n  const elementKey = allElements.find(e => key.toLowerCase().includes(e))\r\n  if (!elementKey) return null\r\n\r\n  return <DropdownButton color={elementKey} title={<strong>{stg(`element.${elementKey}`)}</strong>}>\r\n    {travelerElements.map(eleKey =>\r\n      <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => setCharacter(TravelerToElement(key as TravelerKey, eleKey))}>\r\n        <strong><ColorText color={eleKey}>{stg(`element.${eleKey}`)}</ColorText></strong></MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { Female, Male } from '@mui/icons-material';\r\nimport { Button } from '@mui/material';\r\nimport { useCallback, useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { CharacterContext } from '../../Context/CharacterContext';\r\nimport { DatabaseContext } from '../../Database/Database';\r\nimport useDBMeta from '../../ReactHooks/useDBMeta';\r\n\r\nexport default function TravelerGenderSelect() {\r\n  const { t } = useTranslation(\"ui\")\r\n  const { database } = useContext(DatabaseContext)\r\n  const { character } = useContext(CharacterContext)\r\n  const { key } = character\r\n  const { gender } = useDBMeta()\r\n  const toggleGender = useCallback(() => database.dbMeta.set({ gender: gender === \"F\" ? \"M\" : \"F\" }), [gender, database])\r\n  if (!(key.startsWith(\"Traveler\"))) return null\r\n  return <Button onClick={toggleGender} startIcon={gender === \"F\" ? <Female /> : <Male />}><strong>{t(`gender.${gender}`)}</strong>  </Button>\r\n}\r\n","import { BarChart, Calculate, FactCheck, Groups, Person, Science, TrendingUp } from '@mui/icons-material';\nimport { Box, Button, CardContent, Skeleton, Tab, Tabs } from '@mui/material';\nimport { Suspense, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link as RouterLink, Navigate, Route, Routes, useMatch, useNavigate, useParams } from 'react-router-dom';\nimport CardDark from '../../Components/Card/CardDark';\nimport CardLight from '../../Components/Card/CardLight';\nimport CloseButton from '../../Components/CloseButton';\nimport { HitModeToggle, InfusionAuraDropdown, ReactionToggle } from '../../Components/HitModeEditor';\nimport LevelSelect from '../../Components/LevelSelect';\nimport SqBadge from '../../Components/SqBadge';\nimport { CharacterContext, CharacterContextObj } from '../../Context/CharacterContext';\nimport { DataContext, dataContextObj } from '../../Context/DataContext';\nimport { FormulaDataContext, FormulaDataWrapper } from '../../Context/FormulaDataContext';\nimport { ChartData, GraphContext, GraphContextObj } from '../../Context/GraphContext';\nimport { getCharSheet } from '../../Data/Characters';\nimport { DatabaseContext } from '../../Database/Database';\nimport useBoolState from '../../ReactHooks/useBoolState';\nimport useCharacter from '../../ReactHooks/useCharacter';\nimport useCharacterReducer from '../../ReactHooks/useCharacterReducer';\nimport useDBMeta from '../../ReactHooks/useDBMeta';\nimport useTeamData from '../../ReactHooks/useTeamData';\nimport useTitle from '../../ReactHooks/useTitle';\nimport { CharacterKey, charKeyToCharName } from '../../Types/consts';\nimport { CustomMultiTargetButton } from '../CustomMultiTarget';\nimport CharSelectButton from './CharSelectButton';\nimport FormulaModal from './FormulaModal';\nimport StatModal from './StatModal';\nimport TabBuild from './Tabs/TabOptimize';\nimport TabOverview from './Tabs/TabOverview';\nimport TabTalent from './Tabs/TabTalent';\nimport TabTeambuffs from './Tabs/TabTeambuffs';\nimport TabTheorycraft from './Tabs/TabTheorycraft';\nimport TravelerElementSelect from './TravelerElementSelect';\nimport TravelerGenderSelect from './TravelerGenderSelect';\n\nexport default function CharacterDisplay() {\n  const navigate = useNavigate();\n  const { database } = useContext(DatabaseContext)\n  const onClose = useCallback(() => navigate(\"/characters\"), [navigate])\n  const { characterKey } = useParams<{ characterKey?: CharacterKey }>();\n  const invalidKey = !database.chars.keys.includes(characterKey as CharacterKey)\n  if (invalidKey)\n    return <Navigate to=\"/characters\" />\n\n  return <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n    <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\n      {characterKey && <CharacterDisplayCard characterKey={characterKey} onClose={onClose} />}\n    </Suspense>\n  </Box>\n}\n\ntype CharacterDisplayCardProps = {\n  characterKey: CharacterKey,\n  onClose?: () => void,\n}\nfunction CharacterDisplayCard({ characterKey, onClose }: CharacterDisplayCardProps) {\n  const character = useCharacter(characterKey)\n  const { gender } = useDBMeta()\n  const characterSheet = getCharSheet(characterKey, gender)\n  const teamData = useTeamData(characterKey)\n  const { target: charUIData } = teamData?.[characterKey] ?? {}\n  const { params: { tab = \"overview\" } } = useMatch({ path: \"/characters/:charKey/:tab\", end: false }) ?? { params: { tab: \"overview\" } }\n  const { t } = useTranslation([\"charNames_gen\", \"page_character\"])\n\n  useTitle(useMemo(() => `${t(`charNames_gen:${charKeyToCharName(characterKey, gender)}`)} - ${t(`page_character:tabs.${tab}`)}`, [t, characterKey, gender, tab]))\n\n  const characterDispatch = useCharacterReducer(character?.key ?? \"\")\n\n  const dataContextValue: dataContextObj | undefined = useMemo(() => {\n    if (!teamData || !charUIData) return undefined\n    return {\n      data: charUIData,\n      teamData,\n      oldData: undefined,\n    }\n  }, [charUIData, teamData])\n\n  const characterContextValue: CharacterContextObj | undefined = useMemo(() => {\n    if (!character || !characterSheet) return undefined\n    return {\n      character,\n      characterSheet,\n      characterDispatch\n    }\n  }, [character, characterSheet, characterDispatch])\n\n  const [chartData, setChartData] = useState(undefined as ChartData | undefined)\n  const [graphBuilds, setGraphBuilds] = useState<string[][]>()\n  const graphContextValue: GraphContextObj | undefined = useMemo(() => {\n    return {\n      chartData,\n      setChartData,\n      graphBuilds,\n      setGraphBuilds\n    }\n  }, [chartData, graphBuilds])\n\n  // Clear state when switching characters\n  useEffect(() => {\n    setChartData(undefined)\n    setGraphBuilds(undefined)\n  }, [characterKey])\n\n  return <CardDark >\n    {dataContextValue && characterContextValue && graphContextValue\n      ? <CharacterContext.Provider value={characterContextValue}><DataContext.Provider value={dataContextValue}><GraphContext.Provider value={graphContextValue}>\n        <FormulaDataWrapper><CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n          <Box display=\"flex\" >\n            <Box display=\"flex\" gap={1} flexWrap=\"wrap\" flexGrow={1}>\n              <CharSelectButton />\n              <TravelerElementSelect />\n              <TravelerGenderSelect />\n              <DetailStatButton />\n              <CustomMultiTargetButton />\n              <FormulasButton />\n            </Box>\n            {!!onClose && <CloseButton onClick={onClose} />}\n          </Box>\n          <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n            {character && <LevelSelect level={character.level} ascension={character.ascension} setBoth={characterDispatch} />}\n            <HitModeToggle size=\"small\" />\n            <InfusionAuraDropdown />\n            <ReactionToggle size=\"small\" />\n          </Box>\n          <CardLight>\n            <TabNav tab={tab} />\n          </CardLight>\n          <CharacterPanel />\n          <CardLight>\n            <TabNav tab={tab} />\n          </CardLight>\n        </CardContent></FormulaDataWrapper>\n      </GraphContext.Provider></DataContext.Provider></CharacterContext.Provider>\n      : <Skeleton variant='rectangular' width='100%' height={1000} />\n    }\n  </CardDark >\n}\nfunction CharacterPanel() {\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={500} />}>\n    <Routes>\n      {/* Character Panel */}\n      <Route index element={<TabOverview />} />\n      <Route path=\"/talent\" element={<TabTalent />} />\n      <Route path=\"/teambuffs\" element={<TabTeambuffs />} />\n      <Route path=\"/optimize\" element={<TabBuild />} />\n      <Route path=\"/theorycraft\" element={<TabTheorycraft />} />\n    </Routes>\n  </Suspense>\n}\nfunction TabNav({ tab }: { tab: string }) {\n  const { t } = useTranslation(\"page_character\")\n  return <Tabs\n    value={tab}\n    variant=\"scrollable\"\n    allowScrollButtonsMobile\n    sx={{\n      \"& .MuiTab-root:hover\": {\n        transition: \"background-color 0.25s ease\",\n        backgroundColor: \"rgba(255,255,255,0.1)\"\n      },\n    }}\n  >\n    <Tab sx={{ minWidth: \"20%\" }} value=\"overview\" label={t(\"tabs.overview\")} icon={<Person />} component={RouterLink} to=\"\" />\n    <Tab sx={{ minWidth: \"20%\" }} value=\"talent\" label={t(\"tabs.talent\")} icon={<FactCheck />} component={RouterLink} to=\"talent\" />\n    <Tab sx={{ minWidth: \"20%\" }} value=\"teambuffs\" label={t(\"tabs.teambuffs\")} icon={<Groups />} component={RouterLink} to=\"teambuffs\" />\n    <Tab sx={{ minWidth: \"20%\" }} value=\"optimize\" label={t(\"tabs.optimize\")} icon={<TrendingUp />} component={RouterLink} to=\"optimize\" />\n    <Tab sx={{ minWidth: \"20%\" }} value=\"theorycraft\" label={t(\"tabs.theorycraft\")} icon={<Science />} component={RouterLink} to=\"theorycraft\" />\n  </Tabs>\n}\n\n\nfunction DetailStatButton() {\n  const { t } = useTranslation(\"page_character\")\n  const [open, onOpen, onClose] = useBoolState()\n  const { character: { bonusStats } } = useContext(CharacterContext)\n  const bStatsNum = Object.keys(bonusStats).length\n  return <>\n    <Button color=\"info\" startIcon={<BarChart />} onClick={onOpen}>\n      {t`addStats.title`}{!!bStatsNum && <SqBadge sx={{ ml: 1 }} color=\"success\" >{bStatsNum}</SqBadge>}\n    </Button>\n    <StatModal open={open} onClose={onClose} />\n  </>\n}\nfunction FormulasButton() {\n  const { onModalOpen } = useContext(FormulaDataContext)\n  return <>\n    <Button color=\"info\" startIcon={<Calculate />} onClick={onModalOpen}>Formulas {\"&\"} Calcs</Button>\n    <FormulaModal />\n  </>\n}\n"],"names":["GraphContext","createContext","CharacterSelectionModal","React","CharSelectButton","_characterSheet$name","useTranslation","characterSheet","character","key","characterKey","useContext","CharacterContext","showModal","setshowModal","useState","gender","useDBMeta","setCharacter","useCharSelectionCallback","_jsxs","_Fragment","children","_jsx","Suspense","fallback","show","onHide","onSelect","Button","color","onClick","startIcon","ThumbSide","src","characterAsset","name","t","FormulaModal","modalOpen","FormulaDataContext","setFormulaData","onCloseHandler","useCallback","undefined","ModalWrapper","open","onClose","CardDark","CardHeader","title","action","CloseButton","CardContent","sx","pt","CalculationDisplay","data","DataContext","contextData","sections","getDisplaySections","Skeleton","variant","width","height","Box","mr","mb","map","Nodes","FormulaCalc","displayNs","sectionKey","database","DatabaseContext","header","useMemo","getDisplayHeader","Object","entries","every","_","node","isEmpty","icon","CardLight","CardHeaderCustom","avatar","ImgIcon","size","SqBadge","Divider","FormulaAccordian","contextNode","expanded","setExpanded","handleChange","e","isExpanded","scrollRef","useRef","useEffect","setTimeout","_scrollRef$current","current","scrollIntoView","behavior","Accordion","bgcolor","onChange","ref","AccordionSummary","expandIcon","ExpandMore","Typography","ColorText","info","nodeVStr","allAmpReactions","display","ml","AmpReactionModeText","reaction","trigger","subVariant","AccordionDetails","formulas","subform","i","component","styled","props","other","_objectWithoutPropertiesLoose","_excluded","IconButton","assign","theme","expand","transform","marginLeft","transition","transitions","create","duration","shortest","FlexButtonGroup","ButtonGroup","StatInput","_ref","value","placeholder","defaultValue","onValueChange","percent","disabled","onReset","restProps","TextButton","px","CustomNumberInputButtonGroupWrapper","flexBasis","flexGrow","CustomNumberInput","inputProps","textAlign","float","endAdornment","flexShrink","Replay","EnemyExpandCard","characterDispatch","setexpanded","toggle","eLvlNode","get","input","eDefRed","eDefIgn","enemyOverride","gap","alignItems","flexWrap","Chip","label","allElementsWithPhy","element","EnemyResText","justifyContent","_t","ExpandButton","Collapse","in","timeout","unmountOnExit","EnemyEditor","immune","isFinite","ElementIcon","ele","iconProps","iconInlineProps","content","bsProps","xs","md","_enemyOverride$enemyL","_enemyOverride$enemyD","_enemyOverride$enemyD2","eLvl","enemyLevel","enemyDefIgn_","enemyDefRed_","Grid","container","spacing","item","fullWidth","href","target","rel","palette","contentLight","main","KeyMap","type","statKey","eleKey","val","elementImmunity","Number","MAX_VALUE","Infinity","CheckBox","CheckBoxOutlineBlank","cols","lg","StatModal","Stack","BonusStatsEditor","MainStatsCards","keys","allInputPremodKeys","wrapperFunc","bonusStats","setFilter","columns","StatEditorList","statKeys","statFilters","setStatFilters","mainSubKeys","mainReadNodes","k","mainEditKeys","otherStatKeys","allEleDmgKeys","allEleResKeys","miscStatkeys","includes","StatDisplayContent","nodes","extra","oldData","FieldDisplayList","rn","_oldData$get","NodeFieldDisplay","ListItem","oldValue","JSON","stringify","specialNode","charEle","elementKey","isMelee","otherStatReadNodes","filter","n","miscStatReadNodes","StatDisplayCard","length","py","OptimizationTargetContext","reaffine","arts","forceRename","affineNodes","Set","topLevelAffine","visit","isAffine","add","operands","forEach","op","has","dynKeys","forEachNodes","f","operation","path","nonConst","assertUnreachable","base","nextDynKey","affine","affineMap","Map","customRead","accu","reaffineArt","stat","values","constantFold","dyn","objectMap","constant","fromEntries","v","result","mapFormulas","_affineMap$get","objectKeyMap","allSlotKeys","slot","id","set","offsets","baseValue","pruneOrder","numTop","exclusion","_exclusion$rainbow","progress","allowRainbow","rainbow","noSwitchIn","noSwitchOut","list","newList","art","count","otherBetterEqual","_other$values$k","_art$values$k","otherMaybeBetter","some","_other$values$k2","_art$values$k2","otherBetter","canSwitch","pruneArtRange","minimum","baseRange","x","min","max","wrap","artRanges","computeArtRange","otherArtRanges","addArtRange","a","read","newRange","computeNodeRange","_minimum$i","pruneNodeRange","nodeRange","operandRanges","threshold","pass","fail","newOperands","op1","op2","j","ranges","range","reads","_reads$f$path$","Error","computeMinMax","allOperations","reduce","c","sum","NaN","minMaxes","Math","exclusionToAllowed","artSetPerm","_artSets","artSets","allowedRainbows","shapes","indexOfShape","shape","replacing","b","populateShapes","rainbows","push","required","_required$get","slice","remaining","find","noFilter","kind","sets","counts","allowedCounts","check","used","groupped","sort","usableRainbows","check_free","isolated","missing","rejected","allowedSet","requiredRainbows","_range$find","l","delete","SetEffectDisplay","setKey","setNumKey","hideHeader","conditionalsOnly","_sheet$setEffectDocum","sheet","getArtSheet","document","setEffectDocument","section","flexDirection","DocumentDisplay","useBuildSetting","buildSetting","setBuildSetting","buildSettings","follow","r","buildSettingDispatch","ArtifactSetConfig","_artSetExclusion$rain","_artSetExclusion$rain2","dataContext","conditional","artSetExclusion","setOpen","onOpen","dbDirty","forceUpdate","useForceUpdate","followAny","artKeysByRarity","setKeysByRarities","reverse","flatMap","artKeys","artSlotCount","slotKey","getNumSlots","allowRainbow2","allowRainbow4","allow2","allow4","_artSetExclusion$k","_artSetExclusion$k2","exclude2","exclude4","artifactCondCount","allArtifactSets","fakeDataContextObj","UIData","artSet","resetArtConds","tconditional","setAllExclusion","setnum","exclude","artSetExclusion_","deepClone","_artSetExclusion_$k","_2","_t2","_t3","ShowChartIcon","BlockIcon","_t4","_t5","_t6","borderRadius","Settings","_t7","_t8","_t9","_t10","Trans","i18nKey","AllSetAllowExcludeCard","setNum","numAllow","numExclude","gutterBottom","handleArtSetExclusion","endIcon","_t11","_t12","ArtifactSetCard","slotCount","large","_artSetExclusion$setK","_sheet$name","setExclusionSet","slots","set4CondNums","setEffects","_sheet$setEffects$set","doc","opacity","className","rarity","artifactDefIcon","mx","ns","StarRoundedIcon","fontSize","InfoTooltipInline","_t13","Translate","key18","paddingTop","_t14","SlotIcon","_t15","_t16","parseInt","tot","levels","AssumeFullLevelToggle","mainStatAssumptionLevel","setmainStatAssumptionLevel","DropdownButton","lvl","MenuItem","BonusStatsCard","bonusStatsKeys","Monospace","fontFamily","BorderLinearProgress","LinearProgress","BuildAlert","status","tested","failed","skipped","total","startTime","finishTime","characterName","hasTotal","generatingBuilds","unskipped","testedString","toLocaleString","unskippedString","skippedText","durationString","timeStringMs","round","performance","now","subtitle","Alert","severity","toFixed","ArtifactCardNano","artifactId","pSlotKey","showLocation","BGComponent","_Artifact$mainStatVal","useArtifact","actionWrapperFunc","CardActionArea","useTheme","Assets","level","mainStatKey","substats","location","mainStatLevel","mainStatUnit","alpha","secondary","ConditionalWrapper","condition","wrapper","position","ArtifactTooltip","artifactAsset","m","maxHeight","maxWidth","p","pointerEvents","Artifact","LocationIcon","chars","LocationToCharacterKey","BusinessCenter","overflow","bottom","backgroundColor","zIndex","BootstrapTooltip","placement","StatColoredWithUnit","disableInteractive","StatIcon","cacheValueString","SubstatDisplay","_stat$rolls$length","_stat$rolls","numRolls","rolls","rollColor","clamp","unit","alignContent","StatDisplayComponent","Masonry","sm","xl","Section","optimizationTarget","displayNsReads","nodeKey","emphasize","WeaponCardNano","weaponId","weapon","useWeapon","weaponSheet","getWeaponSheet","computeUIData","dataObjForWeapon","refinement","WeaponNameTooltip","weaponAsset","ascension","WeaponSheet","hasRefinement","WeaponStat","ArtifactSetBadges","artifacts","currentlyEquipped","setToSlots","arti","acc","curr","_k1","slotarr1","_k2","slotarr2","slotarr","ArtifactSetBadge","_artifactSheet$name","artifactSheet","numInSet","setActive","ArtifactSetTooltip","BuildDisplayItem","compareBuild","extraButtonsRight","extraButtonsLeft","equippedArtifacts","newOld","setNewOld","close","equipBuild","window","confirm","char","s","aid","charKeyToLocCharKey","oldAid","weapons","statProviderContext","dataContext_","artifactIdsBySlot","artiId","artNanos","oldId","newId","CompareArtifactModal","pb","Checkroom","onEquip","containerProps","minWidth","ArtifactCard","canExclude","canEquip","editorProps","disableSet","disableSlot","ChevronRight","useBuildResult","buildResult","setBuildResult","buildResultDispatch","CustomDot","cx","cy","payload","selectedPoint","radiusSelected","radiusUnselected","colorSelected","colorUnselected","isSelected","y","CustomShape","fill","stroke","points","CustomTooltip","xLabel","xUnit","yLabel","yUnit","setSelectedPoint","addBuildToList","tooltipProps","artifactsBySlot","artifactIds","artiObj","clickAwayHandler","_artifactsBySlot$slot","highlightLabel","buildNumber","highlightedType","active","ClickAwayListener","onClickAway","stopPropagation","direction","highlighted","ArtifactCardPico","artifactObj","valueString","EnhancedPoint","constructor","trueY","this","ChartCard","plotBase","setPlotBase","showTooltip","chartData","showDownload","setshowDownload","showMin","setshowMin","graphBuilds","builds","generatedBuilds","sliderLow","setSliderLow","sliderHigh","setSliderHigh","setSlider","_e","TypeError","h","displayData","downloadData","sliderMin","sliderMax","_minimumData$","_points$","currentBuild","_data$get$value","plot","enhancedDatum","datumBuildMap","aId","generBuildIndex","findIndex","build","graphBuildIndex","minimumData","point","last","pop","allData","plotBaseNode","objPathValue","getDisplay","buttonText","OptimizationTargetSelector","setTarget","defaultText","InfoTooltip","Download","DataDisplay","Chart","plotNode","valueNode","Slider","marks","onChangeCommitted","step","valueLabelDisplay","valueLabelFormat","_chartData$plotNode$i","_chartData$plotNode$i2","TextArea","resize","minHeight","readOnly","selectionStart","selectionEnd","optTargetColor","highlightedColor","currentColor","lineColor","_plotNode$info","_valueNode$info","_plotNode$info2","_valueNode$info2","setGraphBuilds","chartOnClick","chartX","chartY","clickedX","clickedY","nearestDomPtData","Array","from","querySelectorAll","domPtA","domPtB","aChartX","aChartY","dataset","aDistance","sqrt","bChartX","bChartY","d","xValue","yValue","getNearestPoint","xLabelValue","getLabelFromNode","yLabelValue","ResponsiveContainer","ComposedChart","style","cursor","CartesianGrid","strokeDasharray","XAxis","dataKey","scale","domain","tick","tickFormatter","Label","dy","YAxis","allowDecimals","angle","dx","Tooltip","wrapperStyle","Legend","Line","connectNulls","strokeWidth","isAnimationActive","dot","activeDot","Scatter","_node$info","_node$info2","_node$info2$name","_node$info3","_node$info3$name","_node$info4","_node$info5","textSuffix","artifactsSlotsToSelectMainStats","MainStatSelectionCard","filteredArtIds","mainStatKeys","tots","catTotal","ct","msk","slotTots","sk","FlowerIcon","HpIcon","flower","hp","orientation","flexItem","PlumeIcon","AtkIcon","plume","atk","selectedMainKeys","mainKeys","mainKeysHandler","handleMultiSelect","OptimizationTargetEditorList","oldPath","oldIndex","_statFilters$pathStr","statFilters_","oldPathStr","oldFilterArr","pathStr","filterArr","splice","delTarget","index","setTargetValue","setTargetDisabled","settings","setting","OptimizationTargetEditorItem","parse","setValue","setDisabled","_buildConstraintNode$","buttonStyle","buildConstraintNode","isPercent","showEmptyTargets","DeleteForever","StatFilterCard","UseEquipped","filteredArts","useEquippedArts","useBoolState","equipmentPriority","tempEquipmentPriority","setTO","displayOptimize","to","ck","setPrio","setPrioRank","fromIndex","toIndex","arr","removePrio","addPrio","resetPrio","numAbove","indexOf","numUseEquippedChar","numUnlisted","totArts","SelectItem","rank","maxRank","setRank","num","onRemove","NewItem","onAdd","whiteSpace","itemSize","useCharacter","equippedWeapon","pl","KeyboardDoubleArrowUp","KeyboardArrowUp","KeyboardArrowDown","KeyboardDoubleArrowDown","Close","CharacterCardPico","WeaponCardPico","Add","UseExcluded","artsDirty","useExcludedArts","numExcludedArt","WorkerErr","reload","dynamic","setReadNodeKeys","dynamicData","allMainStatKeys","allSubstatKeys","audio","Audio","TabBuild","_teamData","compareData","setChartData","notification","setnotification","notificationRef","buildStatus","setBuildStatus","setArtsDirty","threads","defThreads","setDisplayOptimize","maxWorkers","setMaxWorkers","useCharacterReducer","onClickTeammate","noArtifact","allowPartial","maxBuildsToShow","levelLow","levelHigh","buildDate","teamData","useTeamData","optimizationTargetNode","isSM","useMediaQueryUp","deferredArtsDirty","useDeferredValue","deferredBuildSetting","cantTakeList","ek","mainStats","levelTotal","tabFocused","onFocus","onBlur","addEventListener","removeEventListener","cancelToken","workerErr","setWorkerErr","generateBuilds","async","_uiDataForTeam$charac","_workerData$display","_workerData$display3","split","goblet","circlet","sands","mainStatVal","endsWith","substat","accurateValue","compactArtifacts","getTeamData","workerData","uiDataForTeam","mergeData","unoptimizedOptimizationTargetNode","targetNode","valueFilter","_workerData$display2","_filterNode$info","filterNode","cancelled","Promise","unoptimizedNodes","setPerms","filters","filter_loop","available","filterFeasiblePerm","plotBaseNumNode","prepruneArts","optimize","maxValues","thres","pruneExclusion","forced","should","deps","newArts","newNodes","pruneAll","buildValues","minFilterCount","maxRequestFilterInFlight","unprunedFilters","Symbol","iterator","requestFilters","idleWorkers","splittingWorkers","workers","getThreshold","fetchPruningWork","done","next","command","minCount","fetchRequestWork","finalizedList","worker","Worker","URL","console","error","setup","maxBuilds","postMessage","countCommand","finalize","finalized","onmessage","source","terminate","play","alert","pruned","prepruned","log","work","then","buildTimer","setInterval","results","any","all","clearInterval","_targetNode$info","_plotBaseNumNode$info","plotData","plots","mergePlot","maxNum","mergeBuilds","process","Date","targetSelector","getLabel0","getLabel1","Link","RouterLink","CharacterCard","ArtifactLevelSlider","setLow","setHigh","setBoth","maxBuildsToShowList","NotificationsActiveIcon","NotificationsOffIcon","TrendingUp","HitModeToggle","ReactionToggle","SolidToggleButtonGroup","exclusive","ToggleButton","Provider","BuildList","getLabel","setBuilds","deleteBuild","builds_","DataContextWrapper","BuildItemWrapper","join","useLocation","navigate","useNavigate","toTC","paths","pathname","state","Science","dirty","setDirty","buildsArts","providerValue","charCards","Albedo","Alhaitham","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Candace","Chongyun","Collei","Cyno","Diluc","Diona","Dori","Eula","Faruzan","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","KamisatoAyato","Keqing","Klee","KujouSara","KukiShinobu","Layla","Lisa","Mona","Nahida","Nilou","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Shenhe","ShikanoinHeizou","Sucrose","Tartaglia","Thoma","Tighnari","TravelerF","TravelerM","Venti","Wanderer","Xiangling","Xiao","Xingqiu","Xinyan","YaeMiko","Yanfei","Yaoyao","Yelan","Yoimiya","YunJin","Zhongli","charCard","charKey","_charCards","_charCards$charKey","CompareBuildButton","artId","onShow","CompareContent","arrow","Difference","newArt","artmap","dataProviderValue","numToShowMap","ArtifactFilterDisplay","lazy","ArtifactSwapModal","onChangeId","clickHandler","filterOptionReducer","slotKeys","filterOption","filterOptionDispatch","useReducer","initialFilterOption","brPt","filterConfigs","artifactFilterConfigs","artIdList","filterFunc","filterFunction","filteredIds","disableSlotFilter","mt","extraButtons","rarityHandler","allRarities","WeaponSwapModal","weaponTypeKey","newWeaponModalShow","setnewWeaponModalShow","editWeaponId","setEditWeaponId","newWeapon","weaponKey","new","initialWeapon","resetEditWeapon","setRarity","searchTerm","setSearchTerm","deferredSearchTerm","weaponIdList","_weaponSortMap$level","weaponType","weaponFilterConfigs","sortFunction","weaponSortMap","weaponSortConfigs","WeaponSelectionModal","weaponTypeFilter","WeaponEditor","footer","star","TextField","autoFocus","InputProps","WeaponCard","EquipmentSection","_teamData$characterKe","setweaponId","showWeapon","hideWeapon","breakpoint","useMediaQuery","breakpoints","up","weaponDoc","rvFilter","useCharMeta","deferredRvFilter","deferredRvSet","LargeWeaponSwapButton","ArtifactSectionCard","onEdit","WeaponSwapButton","effFilter","ArtifactSwapButton","ArtSwapCard","SwapHoriz","hasEquipped","unequipArts","dataSetEffects","setRVFilter","charMeta","deferredrvFilter","rvField","rvmField","currentEfficiency","currentEfficiency_","maxEfficiency","maxEfficiency_","artid","text","PercentBadge","valid","canShow","borderBottomRightRadius","borderBottomLeftRadius","SubstatToggle","selectedKeys","BasicFieldDisplay","field","setNumKeyArr","TabOverview","onScroll","CharacterProfileCard","EquipmentRow","_Assets$weaponTypes","team","constellation","tlvl","auto","skill","burst","tBoost","favorite","left","StarsDisplay","stars","colored","top","Favorite","FavoriteBorder","right","getLevelString","tKey","_characterSheet$getTa","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","padding","lineHeight","getTalentOfKey","img","constellationName","_characterSheet$getTa2","talentSpacing","CharacterTalentPane","grlg","constellationCards","SkillDisplayCard","talentKey","onClickTitle","ReactionDisplay","tText","asc","enabled","talentLimits","talent","actionWrapeprFunc","setTalentLevel","newTalentLevelKey","levelBoost","selected","talentSheet","hideDesc","_section$header","headerAction","TabTeambuffs","TeamBuffDisplay","ResonanceDisplay","TeammateDisplay","_teamBuffs$total","_teamBuffs$premod","_teamBuffs$enemy","teamBuffs","getTeamBuff","premod","enemy","_objPathValue","teamCount","titleTypographyProps","resonanceSheets","res","desc","teamBuffOnly","activeCharacterKey","teamMateKey","onClickHandler","setTeammate","dataBundle","teammateCharacterContext","_active$teamCondition","teamConditional","teamMateDataContext","TeammateAutocomplete","setChar","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","characterChildren","CharTalentCondDisplay","isTeammateCard","setNums","sn","_getArtSheet$setEffec","sts","autoCompleteProps","toText","_getCharSheet","startsWith","charKeyToCharName","getCharSheet","toImg","pr","PersonAdd","isFavorite","onDisable","localeCompare","GeneralAutocomplete","options","valueKey","getOptionDisabled","TabTheorycraft","defWeapon","charTC","setCharTC","charTCs","getWithInit","useCharTC","defaultInitialWeaponKey","setData","resetData","initCharTC","setWeapon","copyFrom","eWeapon","newData","artifact","_sets$setKey","_newData$artifact$sub","stats","locBuild","copyFromEquipped","lock","setArtifact","data_","setSubstatsType","setSubstats","deferredData","overriderArtData","_stats$statKey","overrideWeapon","charUIData","dataContextValue","dataContextValueWithOld","optimization","setOptimizationTarget","distributedSubstats","maxSubstats","useMaxOff","offset","optimizeSubstats","apply","_teamData$characterKe2","subs","compute","precompute","realSubs","comp","buffer","maxBuffer","bufferMain","_acc$k","bufferSubs","permute","structuredClone","_k","CopyAll","Refresh","WeaponEditorCard","ArtifactMainLevelCard","artifactData","setArtifactData","ArtifactSubCard","substatsType","setDistributedSubstats","setMaxSubstats","setMax","setOffset","disableMaxSubstats","weaponUIData","flexshrink","RefinementDropdown","setRefinement","LevelSelect","useLow","setSlot","artifactData_","setArtSet","ArtifactMainLevelSlot","ArtifactSetsEditor","setSlotProp","_KeyMap$getVariant","_maxArtifactLevel$r","mLvl","maxArtifactLevel","StatWithUnit","startAdornment","my","setSet","deleteValue","rest","_toPropertyKey","ArtifactSetEditor","ArtifactSetAutocomplete","artSetKey","setArtSetKey","_artifactSheet$setEff","setName","Info","rv","substatType","st","ArtifactSubstatEditor","maxSubstat","setMaxSubstat","substatValue","setRolls","displayValue","numMains","ms","maxRolls","invalid","setRValue","parseFloat","TravelerElementSelect","allElements","toLowerCase","stg","travelerElements","TravelerToElement","TravelerGenderSelect","toggleGender","dbMeta","Female","Male","CharacterDisplay","useParams","Navigate","CharacterDisplayCard","_useMatch","_character$key","params","tab","useMatch","end","useTitle","characterContextValue","graphContextValue","FormulaDataWrapper","DetailStatButton","CustomMultiTargetButton","FormulasButton","InfusionAuraDropdown","TabNav","CharacterPanel","Routes","Route","TabTalent","Tabs","allowScrollButtonsMobile","Tab","Person","FactCheck","Groups","bStatsNum","BarChart","onModalOpen","Calculate"],"sourceRoot":""}