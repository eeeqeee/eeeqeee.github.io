{"version":3,"file":"886.e7b74362d16e0303.js","mappings":"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","sources":["webpack:///./src/app/Components/Artifact/sortByRarityAndName.tsx","webpack:///./src/app/Components/Artifact/ArtifactRarityDropdown.tsx","webpack:///./src/app/Components/Artifact/ArtifactSlotDropdown.tsx","webpack:///./src/app/Components/CustomNumberTextField.tsx","webpack:///./src/app/ReactHooks/usePromise.tsx","webpack:///./src/app/PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","webpack:///./src/app/PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","webpack:///./src/app/PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","webpack:///./src/app/PageArtifact/ScanningUtil.tsx","webpack:///./src/app/PageArtifact/BorrowManager.ts","webpack:///./src/app/PageArtifact/ArtifactEditor.tsx"],"sourcesContent":["import i18n from \"../../i18n\"\r\nimport { ArtifactRarity, ArtifactSetKey } from \"../../Types/consts\"\r\n\r\nexport default function sortByRarityAndName(a: { key: ArtifactSetKey, grouper: ArtifactRarity }, b: { key: ArtifactSetKey, grouper: ArtifactRarity }) {\r\n  if (a.grouper > b.grouper) {\r\n    return -1\r\n  }\r\n  if (a.grouper < b.grouper) {\r\n    return 1\r\n  }\r\n\r\n  const aName = i18n.t(`artifactNames_gen:${a.key}`)\r\n  const bName = i18n.t(`artifactNames_gen:${b.key}`)\r\n  if (aName < bName) {\r\n    return -1\r\n  }\r\n  if (aName > bName) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n","import { ButtonProps, MenuItem } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ArtifactRarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport { StarsDisplay } from \"../StarDisplay\";\r\n\r\ntype props = ButtonProps & {\r\n  rarity?: ArtifactRarity\r\n  onChange: (rarity: ArtifactRarity) => void\r\n  filter: (ArtifactRarity) => boolean\r\n}\r\n\r\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <DropdownButton\r\n    {...props}\r\n    title={rarity ? <StarsDisplay stars={rarity} inline /> : t`editor.rarity`}\r\n    color={rarity ? \"success\" : \"primary\"}\r\n  >\r\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\r\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\r\n        <StarsDisplay stars={rarity} inline />\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { allSlotKeys, SlotKey } from \"@genshin-optimizer/consts\"\r\nimport { Replay } from \"@mui/icons-material\"\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\r\nimport SlotIcon from \"./SlotIcon\"\r\n\r\ntype ArtifactSlotDropdownProps = ButtonProps & {\r\n  slotKey?: SlotKey | \"\"\r\n  onChange: (slotKey: SlotKey | \"\") => void\r\n  hasUnselect?: boolean\r\n}\r\n\r\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  return <DropdownButton\r\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\r\n    color={slotKey ? \"success\" : \"primary\"}\r\n    startIcon={slotKey ? <SlotIcon slotKey={slotKey} /> : undefined}\r\n    {...props}\r\n  >\r\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        {t`ui:unselect`}\r\n      </ListItemText>\r\n    </MenuItem>}\r\n    {hasUnselect && <Divider />}\r\n    {allSlotKeys.map(key =>\r\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\r\n        <ListItemIcon>\r\n          <SlotIcon slotKey={key} />\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {t(`artifact:slotName:${key}`)}\r\n        </ListItemText>\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { TextField, TextFieldProps } from '@mui/material'\r\nimport { useCallback, useEffect, useState } from 'react'\r\ntype props = TextFieldProps & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <TextField\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    {...props}\r\n  />\r\n}","import { useEffect, useState } from \"react\";\r\n/**\r\n *\r\n * @param promiseFunc\r\n * @param dependencies - Reloads the promise when any of the dependencies are changed. (Using useEffect dependency)\r\n * @param useOld - When the promises are updated, then there is a period of time before the new promise return. useOld uses the previous value without a undefined gap.\r\n * @returns\r\n */\r\nexport default function usePromise<T>(promiseFunc: () => Promise<T> | undefined, dependencies: any[], useOld = true): T | undefined {\r\n  const [res, setRes] = useState<[T] | undefined>(undefined);\r\n  useEffect(() => {\r\n    let pending = true\r\n    //encapsulate `res` in an array `[res]`, because res can sometimes be a function, that can interfere with the `useState` api.\r\n    promiseFunc()?.then(res => pending && setRes([res]), console.error) ?? setRes(undefined)\r\n    return () => {\r\n      pending = false\r\n      !useOld && setRes(undefined)\r\n    }\r\n  }, dependencies)// eslint-disable-line react-hooks/exhaustive-deps\r\n  return res?.[0]\r\n}\r\n","import { Grid, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport InfoTooltip from '../../../Components/InfoTooltip';\r\nimport PercentBadge from '../../../Components/PercentBadge';\r\n\r\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\r\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\r\n  return <CardLight sx={{ py: 1, px: 2 }}>\r\n    <Grid container spacing={1}>\r\n      <Grid item>{t(`editor.${eff}`)}</Grid>\r\n      <Grid item flexGrow={1}>\r\n        <InfoTooltip title={<span>\r\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\r\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\r\n        </span>} />\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <PercentBadge valid={valid} max={900} value={valid ? efficiency : \"ERR\"} />\r\n      </Grid>\r\n    </Grid>\r\n  </CardLight>\r\n}\r\n","import { Box, Button, ButtonGroup, Grid, ListItemIcon, ListItemText, MenuItem, Typography } from '@mui/material';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\r\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\r\nimport PercentBadge from '../../../Components/PercentBadge';\r\nimport SqBadge from '../../../Components/SqBadge';\r\nimport TextButton from '../../../Components/TextButton';\r\nimport Artifact from '../../../Data/Artifacts/Artifact';\r\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\r\nimport KeyMap, { cacheValueString } from '../../../KeyMap';\r\nimport StatIcon from '../../../KeyMap/StatIcon';\r\nimport { allSubstatKeys, ICachedArtifact, ISubstat } from '../../../Types/artifact';\r\nimport { RollColorKey } from '../../../Types/consts';\r\nimport { clamp } from '../../../Util/Util';\r\n\r\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = KeyMap.unit(key), rollNum = rolls.length\r\n\r\n  let error = \"\", rollData: readonly number[] = [], allowedRolls = 0\r\n\r\n  if (artifact) {\r\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\r\n    const rarity = artifact.rarity\r\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  return <CardLight>\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\r\n        <DropdownButton\r\n          startIcon={key ? <StatIcon statKey={key} /> : undefined}\r\n          title={key ? KeyMap.getArtStr(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n          disabled={!artifact}\r\n          color={key ? \"success\" : \"primary\"}\r\n          sx={{ whiteSpace: \"nowrap\" }}>\r\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\r\n          {allSubstatKeys.filter(key => mainStatKey !== key)\r\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\r\n              <ListItemIcon><StatIcon statKey={k} /></ListItemIcon>\r\n              <ListItemText>{KeyMap.getArtStr(k)}</ListItemText>\r\n            </MenuItem>)}\r\n        </DropdownButton>\r\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n          <CustomNumberInput\r\n            float={unit === \"%\"}\r\n            placeholder={t`editor.substat.selectSub`}\r\n            value={key ? value : undefined}\r\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n            disabled={!key}\r\n            error={!!error}\r\n            sx={{\r\n              px: 1,\r\n            }}\r\n            inputProps={{\r\n              sx: { textAlign: \"right\" }\r\n            }}\r\n          />\r\n        </CustomNumberInputButtonGroupWrapper>\r\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\r\n        {rollData.map((v, i) => {\r\n          let newValue = cacheValueString(accurateValue + v, unit)\r\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\r\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>\r\n    </Box>\r\n    <Box sx={{ p: 1, }}>\r\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\r\n        <Grid item>\r\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}` as RollColorKey}>\r\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n          </SqBadge>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          {!!rolls.length && [...rolls].sort().map((val, i) =>\r\n            <Typography component=\"span\" key={`${i}.${val}`} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{cacheValueString(val, unit)}</Typography>)}\r\n        </Grid>\r\n        <Grid item xs=\"auto\" flexShrink={1}>\r\n          <Typography>\r\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\r\n              Efficiency: <PercentBadge valid={true} max={rollNum * 100} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\r\n            </Trans>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>}\r\n\r\n    </Box>\r\n  </CardLight >\r\n}\r\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\r\nimport CardDark from '../../../Components/Card/CardDark';\r\nimport CloseButton from '../../../Components/CloseButton';\r\nimport ModalWrapper from '../../../Components/ModalWrapper';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <ModalWrapper open={modalShow} onClose={hide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={hide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Alert variant=\"outlined\" severity=\"warning\">\r\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\r\n        </Alert>\r\n        <Grid container spacing={1} mt={1}>\r\n          <Grid item xs={8} md={4}>\r\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n          <Grid item xs={12} md={8}>\r\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\r\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\r\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\r\n            <Typography variant=\"h6\">Single artifact</Typography>\r\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\r\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\r\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\r\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\r\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} md={7}>\r\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\r\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\r\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\r\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\r\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\r\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\r\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\r\n          </Grid>\r\n          <Grid item xs={8} md={5}>\r\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={hide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","import { allArtifactSets, allSlotKeys, ArtifactSetKey, Rarity, SlotKey } from '@genshin-optimizer/consts';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport ColorText from '../Components/ColoredText';\r\nimport { getArtSheet } from '../Data/Artifacts';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport { allMainStatKeys, allSubstatKeys, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, ArtifactRarity } from '../Types/consts';\r\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\r\nimport { BorrowManager } from './BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = await createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport type ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\nexport type OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nexport function processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n  // TODO: restore\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    // TODO: restore\r\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (getArtSheet(set).rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return score\r\n  })\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => getArtSheet(setKey).rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => getArtSheet(value).name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{cacheValueString(value.value, KeyMap.unit(value.key))}{KeyMap.unit(value.key)}</>)}</div>)\r\n  }</>\r\n\r\n  const valueStrFunc = (value) => <>{cacheValueString(value, KeyMap.unit(result.mainStatKey))}{KeyMap.unit(result.mainStatKey)}</>\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[]): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), getArtSheet(key).nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  const d = pixels\r\n  let lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      const i = (y * width + x) * 4\r\n      const r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstatKeys.forEach(key => {\r\n      const name = KeyMap.getStr(key)\r\n      const regex = KeyMap.unit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}\r\n","import { allElementsWithPhy, ArtifactSetKey, SlotKey } from '@genshin-optimizer/consts';\r\nimport { artifactAsset } from '@genshin-optimizer/g-assets';\r\nimport { Add, ChevronRight, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\r\nimport HelpIcon from '@mui/icons-material/Help';\r\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Grid, MenuItem, Skeleton, styled, Typography, useMediaQuery, useTheme } from '@mui/material';\r\nimport { ChangeEvent, Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\r\nimport ArtifactSetAutocomplete from '../Components/Artifact/ArtifactSetAutocomplete';\r\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport ModalWrapper from '../Components/ModalWrapper';\r\nimport { StatColoredWithUnit } from '../Components/StatDisplay';\r\nimport { getArtSheet } from '../Data/Artifacts';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { cachedArtifact, validateArtifact } from '../Database/DataManagers/ArtifactData';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport StatIcon from '../KeyMap/StatIcon';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstatKeys, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\r\nimport { ArtifactRarity } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\r\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\r\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\r\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\r\n\r\nconst maxProcessingCount = 3, maxProcessedCount = 16\r\nconst allSubstatFilter = new Set(allSubstatKeys)\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\ninterface IEditorArtifact {\r\n  setKey: ArtifactSetKey,\r\n  slotKey: SlotKey,\r\n  level: number,\r\n  rarity: ArtifactRarity,\r\n  mainStatKey: MainStatKey,\r\n  substats: ISubstat[],\r\n}\r\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\r\n      if (oldIndex === -1 || oldIndex === index)\r\n        state!.substats[index] = substat\r\n      else  // Already in used, swap the items instead\r\n        [state!.substats[index], state!.substats[oldIndex]] =\r\n          [state!.substats[oldIndex], state!.substats[index]]\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nconst InputInvis = styled('input')({\r\n  display: 'none',\r\n});\r\nexport type ArtifactEditorProps = { artifactIdToEdit?: string, cancelEdit: () => void, allowUpload?: boolean, allowEmpty?: boolean, disableSet?: boolean, disableSlot?: boolean }\r\nexport default function ArtifactEditor({ artifactIdToEdit = \"\", cancelEdit, allowUpload = false, allowEmpty = false, disableSet = false, disableSlot = false }: ArtifactEditorProps) {\r\n  const { t } = useTranslation(\"artifact\")\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n\r\n  const [show, setShow] = useState(false)\r\n\r\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\r\n  useEffect(() => database.arts.followAny(setDirtyDatabase), [database, setDirtyDatabase])\r\n\r\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifact = useMemo(() => editorArtifact && validateArtifact(editorArtifact), [editorArtifact])\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(() => firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(() => firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\r\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  const disableEditSlot = !!artifact?.location || disableSlot\r\n\r\n  useEffect(() => {\r\n    if (!artifact && artifactProcessed)\r\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\r\n  }, [artifact, artifactProcessed, artifactDispatch])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const uploadFiles = useCallback((files?: FileList | null) => {\r\n    if (!files) return\r\n    setShow(true)\r\n    dispatchQueue({ type: \"upload\", files: Array.from(files).map(file => ({ file, fileName: file.name })) })\r\n  }, [dispatchQueue, setShow])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: Event) => uploadFiles((e as ClipboardEvent).clipboardData?.files)\r\n    allowUpload && window.addEventListener('paste', pasteFunc);\r\n    return () => {\r\n      if (allowUpload) window.removeEventListener('paste', pasteFunc)\r\n    }\r\n  }, [uploadFiles, allowUpload])\r\n\r\n  const onUpload = useCallback(\r\n    (e: ChangeEvent<HTMLInputElement>) => {\r\n      if (!e.target) return\r\n      uploadFiles(e.target.files);\r\n      e.target.value = \"\" // reset the value so the same file can be uploaded again...\r\n    },\r\n    [uploadFiles],\r\n  )\r\n\r\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\r\n    const databaseArtifact = dirtyDatabase && artifactIdToEdit && database.arts.get(artifactIdToEdit)\r\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\r\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\r\n    const { duplicated, upgraded } = dirtyDatabase && database.arts.findDups(artifact)\r\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\r\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const { artifact: cArtifact, errors } = useMemo(() => {\r\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\r\n    const validated = cachedArtifact(artifact, artifactIdToEdit)\r\n    if (old) {\r\n      validated.artifact.location = old.location\r\n      validated.artifact.exclude = old.exclude\r\n    }\r\n    return validated\r\n  }, [artifact, artifactIdToEdit, old])\r\n\r\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\r\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\r\n  useEffect(() => {\r\n    if (artifactIdToEdit === \"new\") {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"reset\" })\r\n    }\r\n    const databaseArtifact = artifactIdToEdit && dirtyDatabase && database.arts.get(artifactIdToEdit)\r\n    if (databaseArtifact) {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const sheet = artifact ? getArtSheet(artifact.setKey) : undefined\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    dispatchQueue({ type: \"pop\" })\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? getArtSheet(newValue.setKey) : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.rarity)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = !errors.length\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cArtifact ? Artifact.getArtifactEfficiency(cArtifact, allSubstatFilter) : {}\r\n  const preventClosing = processed.length || outstanding.length\r\n  const onClose = useCallback(\r\n    (e) => {\r\n      if (preventClosing) e.preventDefault()\r\n      setShow(false)\r\n      cancelEdit()\r\n    }, [preventClosing, setShow, cancelEdit])\r\n\r\n  const theme = useTheme();\r\n  const grmd = useMediaQuery(theme.breakpoints.up('md'));\r\n\r\n  const element = artifact ? allElementsWithPhy.find(ele => artifact.mainStatKey.includes(ele)) : undefined\r\n  const color = artifact\r\n    ? element ?? \"success\"\r\n    : \"primary\"\r\n\r\n  const updateSetKey = useCallback((setKey: ArtifactSetKey | \"\") => update({ setKey: setKey as ArtifactSetKey }), [update],)\r\n  const setACDisable = useCallback((key: ArtifactSetKey | \"\") => {\r\n    if (key === \"\") return true\r\n    //Disable being able to select any of the prayer set unless the current slotkey is circlet\r\n    if (disableEditSlot && slotKey !== \"circlet\" && (key === \"PrayersForDestiny\" || key === \"PrayersForIllumination\" || key === \"PrayersForWisdom\" || key === \"PrayersToSpringtime\"))\r\n      return true\r\n    return false\r\n  }, [disableEditSlot, slotKey])\r\n\r\n\r\n  return <ModalWrapper open={show} onClose={onClose} >\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: show ? \"100%\" : 64 }} />}><CardDark >\r\n      <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\r\n      <CardHeader\r\n        title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\r\n        action={<CloseButton disabled={!!preventClosing} onClick={onClose} />}\r\n      />\r\n      <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n        <Grid container spacing={1} columns={{ xs: 1, md: 2 }} >\r\n          {/* Left column */}\r\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* set & rarity */}\r\n            <Box sx={{ display: \"flex\", gap: 1 }}>\r\n              {/* Artifact Set */}\r\n              <ArtifactSetAutocomplete\r\n                disabled={disableSet}\r\n                size=\"small\"\r\n                artSetKey={artifact?.setKey ?? \"\"}\r\n                setArtSetKey={updateSetKey}\r\n                sx={{ flexGrow: 1 }}\r\n                label={artifact?.setKey ? \"\" : t(\"editor.unknownSetName\")}\r\n                getOptionDisabled={({ key }) => setACDisable(key)}\r\n              />\r\n              {/* rarity dropdown */}\r\n              <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={!sheet} />\r\n            </Box>\r\n\r\n            {/* level */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\r\n                value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\r\n              />\r\n              <ButtonGroup >\r\n                <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n                {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n                <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\r\n              </ButtonGroup>\r\n            </Box>\r\n\r\n            {/* slot */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <ArtifactSlotDropdown disabled={disableEditSlot || !sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Suspense fallback={<Skeleton width=\"60%\" />}>\r\n                  <Typography color=\"text.secondary\">\r\n                    {(artifact && sheet?.getSlotName(artifact!.slotKey)) ?\r\n                      <span>\r\n                        <ImgIcon size={2} src={artifactAsset(artifact.setKey, artifact.slotKey)} />{sheet?.getSlotName(artifact!.slotKey)}\r\n                      </span> : t`editor.unknownPieceName`}\r\n                  </Typography>\r\n                </Suspense>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* main stat */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <DropdownButton startIcon={artifact?.mainStatKey ? <StatIcon statKey={artifact.mainStatKey} /> : undefined}\r\n                title={<b>{artifact ? KeyMap.getArtStr(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={color} >\r\n                {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                  <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                    <StatColoredWithUnit statKey={mainStatK} />\r\n                  </MenuItem>)}\r\n              </DropdownButton>\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Typography color=\"text.secondary\">\r\n                  {artifact ? `${cacheValueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unit(artifact.mainStatKey)}` : t`mainStat`}\r\n                </Typography>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* Current/Max Substats Efficiency */}\r\n            <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\r\n            {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\r\n\r\n            {/* Image OCR */}\r\n            {allowUpload && <CardLight>\r\n              <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n                {/* TODO: artifactDispatch not overwrite */}\r\n                <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\r\n                  <Grid container spacing={1} alignItems=\"center\">\r\n                    <Grid item flexGrow={1}>\r\n                      <label htmlFor=\"contained-button-file\">\r\n                        <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\r\n                        <Button component=\"span\" startIcon={<PhotoCamera />}>\r\n                          Upload Screenshot (or Ctrl-V)\r\n                        </Button>\r\n                      </label>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => setModalShow(true)}><HelpIcon /></Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                  {image && <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\r\n                  </Box>}\r\n                  {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\r\n                    {!firstProcessed && firstOutstanding && <Grid item>\r\n                      <CircularProgress size=\"1em\" />\r\n                    </Grid>}\r\n                    <Grid item flexGrow={1}>\r\n                      <Typography>\r\n                        <span>\r\n                          Screenshots in file-queue: <b>{remaining}</b>\r\n                          {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\r\n                        </span>\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\r\n                    </Grid>\r\n                  </Grid></CardDark>}\r\n                </Suspense>\r\n              </CardContent>\r\n            </CardLight>}\r\n          </Grid>\r\n\r\n          {/* Right column */}\r\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* substat selections */}\r\n            {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cArtifact} setSubstat={setSubstat} />)}\r\n            {texts && <CardLight><CardContent>\r\n              <div>{texts.slotKey}</div>\r\n              <div>{texts.mainStatKey}</div>\r\n              <div>{texts.mainStatVal}</div>\r\n              <div>{texts.rarity}</div>\r\n              <div>{texts.level}</div>\r\n              <div>{texts.substats}</div>\r\n              <div>{texts.setKey}</div>\r\n            </CardContent></CardLight>}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {old && <Grid container sx={{ justifyContent: \"space-around\" }} spacing={1} >\r\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\r\n            <ArtifactCard artifactObj={old} />\r\n          </CardLight></Grid>\r\n          {grmd && <Grid item md={1} display=\"flex\" alignItems=\"center\" justifyContent=\"center\" >\r\n            <CardLight sx={{ display: \"flex\" }}><ChevronRight sx={{ fontSize: 40 }} /></CardLight>\r\n          </Grid>}\r\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\r\n            <ArtifactCard artifactObj={cArtifact} />\r\n          </CardLight></Grid>\r\n        </Grid>}\r\n\r\n        {/* Error alert */}\r\n        {!isValid && <Alert variant=\"filled\" severity=\"error\" >{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\r\n\r\n        {/* Buttons */}\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            {oldType === \"edit\" ?\r\n              <Button startIcon={<Add />} onClick={() => {\r\n                database.arts.set(old!.id, editorArtifact!);\r\n                if (allowEmpty) reset()\r\n                else {\r\n                  setShow(false)\r\n                  cancelEdit()\r\n                }\r\n              }} disabled={!editorArtifact || !isValid} color=\"primary\">\r\n                {t`editor.btnSave`}\r\n              </Button> :\r\n              <Button startIcon={<Add />} onClick={() => {\r\n                database.arts.new(artifact!);\r\n                if (allowEmpty) reset()\r\n                else {\r\n                  setShow(false)\r\n                  cancelEdit()\r\n                }\r\n              }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\r\n                {t`editor.btnAdd`}\r\n              </Button>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            {allowEmpty && <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>}\r\n          </Grid>\r\n          <Grid item>\r\n            {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={() => artifactDispatch({ type: \"overwrite\", artifact: randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n          </Grid>\r\n          {old && oldType !== \"edit\" && <Grid item>\r\n            <Button startIcon={<Update />} onClick={() => { database.arts.set(old.id, { ...editorArtifact, location: old.location }); allowEmpty ? reset() : setShow(false) }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark ></Suspense>\r\n  </ModalWrapper>\r\n}\r\n"],"names":["sortByRarityAndName","a","b","grouper","aName","i18n","key","bName","ArtifactRarityDropdown","_ref","rarity","onChange","filter","props","_objectWithoutPropertiesLoose","_excluded","t","useTranslation","_jsx","DropdownButton","Object","assign","title","StarsDisplay","stars","inline","_t","_","color","children","map","MenuItem","disabled","onClick","ArtifactSlotDropdown","slotKey","hasUnselect","_jsxs","startIcon","SlotIcon","undefined","selected","ListItemIcon","Replay","ListItemText","Divider","allSlotKeys","CustomNumberTextField","value","float","state","setState","useState","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","_value$toString","toString","TextField","type","e","target","onBlur","onKeyDown","usePromise","promiseFunc","dependencies","useOld","res","setRes","_promiseFunc","pending","then","console","error","SubstatEfficiencyDisplayCard","efficiency","max","valid","eff","CardLight","sx","py","px","Grid","container","spacing","item","flexGrow","InfoTooltip","Typography","variant","Trans","i18nKey","xs","PercentBadge","SubstatInput","index","artifact","setSubstat","_artifact$substats$in","mainStatKey","rolls","substats","accurateValue","reduce","unit","KeyMap","rollNum","length","rollData","allowedRolls","numUpgrades","high","Artifact","rollOffset","Box","display","ButtonGroup","size","width","StatIcon","statKey","whiteSpace","_t2","allSubstatKeys","k","CustomNumberInputButtonGroupWrapper","flexBasis","CustomNumberInput","placeholder","_t3","inputProps","textAlign","TextButton","_t4","v","i","_artifactSubstatRollC","_artifactSubstatRollC2","_artifactSubstatRollC3","newValue","cacheValueString","artifactSubstatRollCorrection","Button","clamp","p","SqBadge","_t5","count","_t6","sort","val","component","indexOf","ml","flexShrink","_t7","UploadExplainationModal","modalShow","hide","ModalWrapper","open","onClose","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","src","Snippet","height","gutterBottom","href","rel","scan_art_main","large","starColor","r","g","schedulers","constructor","init","deinit","data","this","async","callback","refCount","box","result","scheduler","createScheduler","promises","Array","fill","worker","createWorker","errorHandler","load","loadLanguage","language","initialize","addWorker","Promise","any","_language","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","ocrResult","imageData","urlToImageData","halfHeight","Math","floor","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","rarities","pixels","d","lastRowNum","rowsWithNumber","results","Set","y","star","onStar","x","colorCloseEnough","add","parseRarities","whiteTexts","substatTexts","artifactSetTexts","all","ocr","texts","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","bestScore","bestArtifacts","setKey","level","location","lock","exclude","rarityRates","objectKeyMap","allArtifactRarities","score","set","getArtSheet","includes","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","entries","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatValScore","push","chosen","mainStatVal","resultMainStatVal","every","other","unknownText","name","text","_Fragment","ColorText","ambiguousText","available","detectedText","inferredText","addText","recommended","valueStrFunc","find","findBestArtifact","allArtifactSets","hammingDistance","replace","nameRaw","parseSetKeys","parseSlotKeys","matches","match","RegExp","exec","parseSubstats","allMainStatKeys","_KeyMap$getStr$toLowe","_KeyMap$getStr","_KeyMap$getStr2","toLowerCase","parseMainStatKeys","regex","parseMainStatValues","resolve","reader","FileReader","onloadend","readAsDataURL","urlFile","img","Image","onload","image","canvas","document","createElement","context","getContext","drawImage","getImageData","imageToImageData","options","putImageData","imageDataToCanvas","borrow","addJob","lines","line","color1","color2","threshold","intCloseEnough","abs","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","maxProcessingCount","maxProcessedCount","allSubstatFilter","artifactReducer","action","oldIndex","current","InputInvis","styled","ArtifactEditor","artifactIdToEdit","cancelEdit","allowUpload","allowEmpty","disableSet","disableSlot","_firstProcessed$image","_artifact$setKey","database","useContext","DatabaseContext","show","setShow","dirtyDatabase","setDirtyDatabase","useForceUpdate","arts","followAny","editorArtifact","artifactDispatch","useReducer","useMemo","validateArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","disableEditSlot","numProcessing","min","processingCurrent","forEach","uploadFiles","clearQueue","pasteFunc","_clipboardData","clipboardData","window","addEventListener","removeEventListener","onUpload","old","oldType","_duplicated$","databaseArtifact","get","duplicated","upgraded","findDups","cArtifact","errors","validated","cachedArtifact","deepClone","sheet","reset","update","_artifact$level","_newValue$rarity","newSheet","pick","prefer","slots","isValid","currentEfficiency","maxEfficiency","preventClosing","preventDefault","theme","useTheme","grmd","useMediaQuery","breakpoints","up","element","allElementsWithPhy","ele","updateSetKey","setACDisable","Suspense","fallback","Skeleton","CardHeader","flexDirection","gap","columns","ArtifactSetAutocomplete","artSetKey","setArtSetKey","label","getOptionDisabled","_sheet$rarity","id","mr","my","margin","l","keys","getSlotName","ImgIcon","artifactAsset","mainStatK","StatColoredWithUnit","alignItems","htmlFor","accept","multiple","PhotoCamera","minWidth","HelpIcon","justifyContent","maxWidth","pl","CircularProgress","lg","ArtifactCard","artifactObj","ChevronRight","fontSize","_t8","Add","_t9","new","_t10","confirm","_t11","process","Update","_t13"],"sourceRoot":""}