{"version":3,"file":"991.14c94939a11aca7f.js","mappings":"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","sources":["webpack:///../../node_modules/@mui/icons-material/Add.js","webpack:///./src/app/PageCharacter/index.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\nexports.default = _default;","import { DeleteForever, FactCheck, Groups, Science, TrendingUp } from '@mui/icons-material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport { Box, Button, CardContent, Divider, Grid, IconButton, Pagination, Skeleton, TextField, Typography } from '@mui/material';\r\nimport React, { ChangeEvent, Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useRef, useState } from 'react';\r\nimport ReactGA from 'react-ga4';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CharacterCard from '../Components/Character/CharacterCard';\r\nimport SortByButton from '../Components/SortByButton';\r\nimport ElementToggle from '../Components/ToggleButton/ElementToggle';\r\nimport WeaponToggle from '../Components/ToggleButton/WeaponToggle';\r\nimport { getCharSheet } from '../Data/Characters';\r\nimport { getWeaponSheet } from '../Data/Weapons';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\r\nimport useDBMeta from '../ReactHooks/useDBMeta';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport useMediaQueryUp from '../ReactHooks/useMediaQueryUp';\r\nimport { allElements, allWeaponTypeKeys, CharacterKey, charKeyToCharName } from '../Types/consts';\r\nimport { characterFilterConfigs, characterSortConfigs, characterSortMap } from '../Util/CharacterSort';\r\nimport { filterFunction, sortFunction } from '../Util/SortByFilters';\r\nimport { catTotal } from '../Util/totalUtils';\r\nimport { clamp } from '../Util/Util';\r\nconst CharacterSelectionModal = React.lazy(() => import('./CharacterSelectionModal'))\r\nconst columns = { xs: 1, sm: 2, md: 3, lg: 4, xl: 4 }\r\nconst numToShowMap = { xs: 6, sm: 8, md: 12, lg: 16, xl: 16 }\r\nconst sortKeys = Object.keys(characterSortMap)\r\n\r\nexport default function PageCharacter() {\r\n  const { t } = useTranslation([\"page_character\", \"charNames_gen\"])\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useState(() => database.displayCharacter.get())\r\n  useEffect(() => database.displayCharacter.follow((r, s) => setState(s)), [database, setState])\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const deferredSearchTerm = useDeferredValue(searchTerm)\r\n  const invScrollRef = useRef<HTMLDivElement>(null)\r\n  const setPage = useCallback(\r\n    (_: ChangeEvent<unknown>, value: number) => {\r\n      invScrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n      database.displayCharacter.set({ pageIndex: value - 1 });\r\n    },\r\n    [database, invScrollRef]\r\n  )\r\n\r\n  const brPt = useMediaQueryUp()\r\n  const maxNumToDisplay = numToShowMap[brPt]\r\n\r\n  const [newCharacter, setnewCharacter] = useState(false)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  // Set follow, should run only once\r\n  useEffect(() => {\r\n    ReactGA.send({ hitType: \"pageview\", page: '/characters' })\r\n    return database.chars.followAny((k, r) => (r === \"new\" || r === \"remove\") && forceUpdate())\r\n  }, [forceUpdate, database])\r\n\r\n  // character favorite updater\r\n  useEffect(() => database.charMeta.followAny(s => forceUpdate()), [forceUpdate, database])\r\n\r\n  const { gender } = useDBMeta()\r\n  const deleteCharacter = useCallback(async (cKey: CharacterKey) => {\r\n    const chararcterSheet = await getCharSheet(cKey, gender)\r\n    let name = chararcterSheet?.name\r\n    // Use translated string\r\n    if (typeof name === \"object\")\r\n      name = t(`charNames_gen:${charKeyToCharName(cKey, gender)}`)\r\n\r\n    if (!window.confirm(t(\"removeCharacter\", { value: name }))) return\r\n    database.chars.remove(cKey)\r\n  }, [database, gender, t])\r\n\r\n  const editCharacter = useCharSelectionCallback()\r\n\r\n  const navigate = useNavigate()\r\n\r\n  const deferredState = useDeferredValue(state)\r\n  const deferredDbDirty = useDeferredValue(dbDirty)\r\n  const { charKeyList, totalCharNum } = useMemo(() => {\r\n    const chars = database.chars.keys\r\n    const totalCharNum = chars.length\r\n    const { element, weaponType, sortType, ascending } = deferredState\r\n    const charKeyList = database.chars.keys\r\n      .filter(filterFunction({ element, weaponType, name: deferredSearchTerm }, characterFilterConfigs(database)))\r\n      .sort(sortFunction(characterSortMap[sortType] ?? [], ascending, characterSortConfigs(database), [\"new\", \"favorite\"]))\r\n    return deferredDbDirty && { charKeyList, totalCharNum }\r\n  },\r\n    [deferredDbDirty, database, deferredState, deferredSearchTerm])\r\n\r\n  const { weaponType, element, sortType, ascending, pageIndex = 0 } = state\r\n\r\n  const { charKeyListToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(charKeyList.length / maxNumToDisplay)\r\n    const currentPageIndex = clamp(pageIndex, 0, numPages - 1)\r\n    return { charKeyListToShow: charKeyList.slice(currentPageIndex * maxNumToDisplay, (currentPageIndex + 1) * maxNumToDisplay), numPages, currentPageIndex }\r\n  }, [charKeyList, pageIndex, maxNumToDisplay])\r\n\r\n  const totalShowing = charKeyList.length !== totalCharNum ? `${charKeyList.length}/${totalCharNum}` : `${totalCharNum}`\r\n\r\n  const weaponTotals = useMemo(() => catTotal(allWeaponTypeKeys,\r\n    ct => Object.entries(database.chars.data).forEach(([ck, char]) => {\r\n      const weapon = database.weapons.get(char.equippedWeapon)\r\n      if (!weapon) return\r\n      const wtk = getWeaponSheet(weapon.key).weaponType\r\n      ct[wtk].total++\r\n      if (charKeyList.includes(ck)) ct[wtk].current++\r\n    })), [database, charKeyList])\r\n\r\n  const elementTotals = useMemo(() => catTotal(allElements,\r\n    ct => Object.entries(database.chars.data).forEach(([ck, char]) => {\r\n      const eleKey = getCharSheet(char.key, database.gender).elementKey\r\n      ct[eleKey].total++\r\n      if (charKeyList.includes(ck)) ct[eleKey].current++\r\n    })), [database, charKeyList])\r\n\r\n  return <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n    <Suspense fallback={false}>\r\n      <CharacterSelectionModal newFirst show={newCharacter} onHide={() => setnewCharacter(false)} onSelect={editCharacter} />\r\n    </Suspense>\r\n    <CardDark ref={invScrollRef} ><CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n      <Grid container spacing={1}>\r\n        <Grid item>\r\n          <WeaponToggle sx={{ height: \"100%\" }} onChange={weaponType => database.displayCharacter.set({ weaponType })} value={weaponType} totals={weaponTotals} size=\"small\" />\r\n        </Grid>\r\n        <Grid item>\r\n          <ElementToggle sx={{ height: \"100%\" }} onChange={element => database.displayCharacter.set({ element })} value={element} totals={elementTotals} size=\"small\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1} />\r\n        <Grid item>\r\n          <TextField\r\n            autoFocus\r\n            value={searchTerm}\r\n            onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setSearchTerm(e.target.value)}\r\n            label={t(\"characterName\")}\r\n            size=\"small\"\r\n            sx={{ height: \"100%\" }}\r\n            InputProps={{\r\n              sx: { height: \"100%\" }\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"flex-end\" flexWrap=\"wrap\">\r\n        <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\r\n        <ShowingCharacter numShowing={charKeyListToShow.length} total={totalShowing} t={t} />\r\n        <SortByButton\r\n          sortKeys={sortKeys} value={sortType} onChange={sortType => database.displayCharacter.set({ sortType })}\r\n          ascending={ascending} onChangeAsc={ascending => database.displayCharacter.set({ ascending })} />\r\n      </Box>\r\n    </CardContent></CardDark>\r\n    <Button fullWidth onClick={() => setnewCharacter(true)} color=\"info\" startIcon={<AddIcon />} >{t`addNew`}</Button>\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 5000 }} />}>\r\n      <Grid container spacing={1} columns={columns}>\r\n        {charKeyListToShow.map(charKey =>\r\n          <Grid item key={charKey} xs={1} >\r\n            <CharacterCard\r\n              characterKey={charKey}\r\n              onClick={() => navigate(`${charKey}`)}\r\n              footer={<><Divider /><Box sx={{ py: 1, px: 2, display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\r\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.talent\")}</Typography>}>\r\n                  <IconButton onClick={() => navigate(`${charKey}/talent`)}>\r\n                    <FactCheck />\r\n                  </IconButton>\r\n                </BootstrapTooltip>\r\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.teambuffs\")}</Typography>}>\r\n                  <IconButton onClick={() => navigate(`${charKey}/teambuffs`)} >\r\n                    <Groups />\r\n                  </IconButton>\r\n                </BootstrapTooltip>\r\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.optimize\")}</Typography>}>\r\n                  <IconButton onClick={() => navigate(`${charKey}/optimize`)} >\r\n                    <TrendingUp />\r\n                  </IconButton>\r\n                </BootstrapTooltip>\r\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.theorycraft\")}</Typography>}>\r\n                  <IconButton onClick={() => navigate(`${charKey}/theorycraft`)} >\r\n                    <Science />\r\n                  </IconButton>\r\n                </BootstrapTooltip>\r\n                <Divider orientation=\"vertical\" />\r\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"delete\")}</Typography>}>\r\n                  <IconButton color=\"error\" onClick={() => deleteCharacter(charKey)}>\r\n                    <DeleteForever />\r\n                  </IconButton>\r\n                </BootstrapTooltip>\r\n              </Box></>}\r\n            />\r\n          </Grid>)}\r\n      </Grid>\r\n    </Suspense>\r\n    {numPages > 1 && <CardDark ><CardContent sx={{ display: \"flex\", gap: 1 }}>\r\n      <Button onClick={() => setnewCharacter(true)} color=\"info\" sx={{ minWidth: 0 }} ><AddIcon /></Button>\r\n      <Grid container alignItems=\"flex-end\" sx={{ flexGrow: 1 }}>\r\n        <Grid item flexGrow={1}>\r\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\r\n        </Grid>\r\n        <Grid item>\r\n          <ShowingCharacter numShowing={charKeyListToShow.length} total={totalShowing} t={t} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent></CardDark>}\r\n  </Box>\r\n}\r\nfunction ShowingCharacter({ numShowing, total, t }) {\r\n  return <Typography color=\"text.secondary\">\r\n    <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total} >\r\n      Showing <b>{{ count: numShowing } as TransObject}</b> out of {{ value: total } as TransObject} Characters\r\n    </Trans>\r\n  </Typography>\r\n}\r\n"],"names":["_interopRequireDefault","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","CharacterSelectionModal","React","columns","xs","sm","md","lg","xl","numToShowMap","sortKeys","Object","keys","characterSortMap","PageCharacter","t","useTranslation","database","useContext","DatabaseContext","state","setState","useState","displayCharacter","get","useEffect","follow","r","s","searchTerm","setSearchTerm","deferredSearchTerm","useDeferredValue","invScrollRef","useRef","setPage","useCallback","_","value","_invScrollRef$current","current","scrollIntoView","behavior","set","pageIndex","brPt","useMediaQueryUp","maxNumToDisplay","newCharacter","setnewCharacter","dbDirty","forceUpdate","useForceUpdate","ReactGA","hitType","page","chars","followAny","k","charMeta","gender","useDBMeta","deleteCharacter","async","chararcterSheet","getCharSheet","cKey","name","charKeyToCharName","window","confirm","remove","editCharacter","useCharSelectionCallback","navigate","useNavigate","deferredState","deferredDbDirty","charKeyList","totalCharNum","useMemo","_characterSortMap$sor","length","element","weaponType","sortType","ascending","filter","filterFunction","characterFilterConfigs","sort","sortFunction","characterSortConfigs","charKeyListToShow","numPages","currentPageIndex","Math","ceil","clamp","slice","totalShowing","weaponTotals","catTotal","allWeaponTypeKeys","ct","entries","data","forEach","ck","char","weapon","weapons","equippedWeapon","wtk","getWeaponSheet","key","total","includes","elementTotals","allElements","eleKey","elementKey","_jsxs","Box","my","display","flexDirection","gap","children","_jsx","Suspense","fallback","newFirst","show","onHide","onSelect","CardDark","ref","CardContent","sx","Grid","container","spacing","item","WeaponToggle","height","onChange","totals","size","ElementToggle","flexGrow","TextField","autoFocus","e","target","label","InputProps","justifyContent","alignItems","flexWrap","Pagination","count","ShowingCharacter","numShowing","SortByButton","onChangeAsc","Button","fullWidth","onClick","color","startIcon","AddIcon","_t","_2","Skeleton","variant","width","minHeight","map","charKey","CharacterCard","characterKey","footer","_Fragment","Divider","py","px","BootstrapTooltip","placement","title","Typography","IconButton","FactCheck","Groups","TrendingUp","Science","orientation","DeleteForever","minWidth","Trans","i18nKey"],"sourceRoot":""}