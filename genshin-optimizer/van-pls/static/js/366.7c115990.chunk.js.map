{"version":3,"file":"static/js/366.7c115990.chunk.js","mappings":"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","sources":["Formula/reaction.ts","Data/Characters/dataUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/Akuoumaru/index.tsx","Data/Weapons/Claymore/BlackcliffSlasher/index.tsx","Data/Weapons/Claymore/BloodtaintedGreatsword/index.tsx","Data/Weapons/Claymore/DebateClub/index.tsx","Data/Weapons/Claymore/FavoniusGreatsword/index.tsx","Data/Weapons/Claymore/FerrousShadow/index.tsx","Data/Weapons/Claymore/ForestRegalia/index.tsx","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LithicBlade/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/MakhairaAquamarine/index.tsx","Data/Weapons/Claymore/OldMercsPal/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/Rainslasher/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/RoyalGreatsword/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SkyriderGreatsword/index.tsx","Data/Weapons/Claymore/SkywardPride/index.tsx","Data/Weapons/Claymore/SnowTombedStarsilver/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/TheBell/index.tsx","Data/Weapons/Claymore/TheUnforged/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/Whiteblind/index.tsx","Data/Weapons/Claymore/WhiteIronGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/KagotsurubeIsshin/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/ToukabouShigure/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HaranGeppakuFutsu/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/KeyOfKhajNisut/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SapwoodBlade/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/XiphosMoonlight/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/MissiveWindspear/index.tsx","Data/Weapons/Polearm/Moonpiercer/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/StaffOfTheScarletSands/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/AquaSimulacra/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FadingTwilight/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/HuntersPath/index.tsx","Data/Weapons/Bow/KingsSquire/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/EndOfTheLine/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/AThousandFloatingDreams/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/FruitOfFulfillment/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TulaytullahsRemembrance/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WanderingEvenstar/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["import KeyMap from \"../KeyMap\";\nimport { crystallizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../KeyMap/StatConstants\";\nimport { absorbableEle } from \"../Types/consts\";\nimport { objectKeyMap } from \"../Util/Util\";\nimport { infusionNode, input } from \"./index\";\nimport { constant, data, equal, frac, infoMut, lookup, max, min, naught, one, percent, prod, subscript, sum } from \"./utils\";\n\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers, KeyMap.info(\"crystallize_level_multi\"))\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\nconst crystallizeHit = infoMut(prod(\n  infoMut(sum(one, /** + Crystallize bonus */ crystallizeElemas), { pivot: true, ...KeyMap.info(\"base_crystallize_multi\") }),\n  crystallizeMulti1),\n  KeyMap.info(\"crystallize\"))\n\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers, KeyMap.info(\"transformative_level_multi\"))\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\nconst trans = {\n  ...objectKeyMap(Object.keys(transformativeReactions), reaction => {\n    const { multi, resist, canCrit } = transformativeReactions[reaction]\n    return infoMut(prod(\n      prod(constant(multi, KeyMap.info(`${reaction}_multi`)), transMulti1),\n      sum(\n        infoMut(sum(one, transMulti2), { pivot: true, ...KeyMap.info(\"base_transformative_multi\") }),\n        input.total[`${reaction}_dmg_`]\n      ),\n      lookup(input.hit.hitMode, {\n        hit: one,\n        critHit: canCrit\n          ? sum(one, input.total[`${reaction}_critDMG_`])\n          : one,\n        avgHit: canCrit\n          ? sum(one,\n            prod(\n              infoMut(max(min(\n                input.total[`${reaction}_critRate_`],\n                sum(one, one)\n              ), naught), { ...input.total[`${reaction}_critRate_`].info, pivot: true }),\n              input.total[`${reaction}_critDMG_`]\n            )\n          )\n          : one\n      }, NaN),\n      input.enemy[`${resist}_resMulti`]\n    ), KeyMap.info(`${reaction}_hit`))\n  }),\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => {\n    const base = prod(\n      prod(constant(transformativeReactions.swirl.multi, KeyMap.info(\"swirl_multi\")), transMulti1),\n      sum(infoMut(sum(one, transMulti2), { pivot: true, ...KeyMap.info(\"base_transformative_multi\") }), input.total.swirl_dmg_)\n    )\n    const res = input.enemy[`${ele}_resMulti`]\n    return infoMut(\n      // CAUTION:\n      // Add amp multiplier/additive term only to swirls that have amp/additive reactions.\n      // It is wasteful to add them indiscriminately, but this means\n      // that we need to audit and add appropriate elements here\n      // should amp/additive reactions be added to more swirls.\n      [\"pyro\", \"hydro\", \"cryo\", \"electro\"].includes(ele)\n        ? (ele === \"electro\"\n          // Additive reactions apply the additive term before resistance, but after swirl bonuses\n          ? data(prod(sum(base, input.hit.addTerm), res), { hit: { ele: constant(ele) } })\n          // Amp reaction\n          : data(prod(base, res, input.hit.ampMulti), { hit: { ele: constant(ele) } }))\n        : prod(base, res),\n      KeyMap.info(`${ele}_swirl_hit`))\n  })\n}\nconst infusionReactions = {\n  overloaded: infoMut(equal(infusionNode, \"pyro\", trans.overloaded), KeyMap.info(\"overloaded_hit\")),\n  electrocharged: infoMut(equal(infusionNode, \"hydro\", trans.electrocharged), KeyMap.info(\"electrocharged_hit\")),\n  superconduct: infoMut(equal(infusionNode, \"cryo\", trans.superconduct), KeyMap.info(\"superconduct_hit\")),\n  burning: infoMut(equal(infusionNode, \"pyro\", trans.burning), KeyMap.info(\"burning_hit\")),\n  bloom: infoMut(equal(infusionNode, \"hydro\", trans.bloom), KeyMap.info(\"bloom_hit\")),\n  burgeon: infoMut(equal(infusionNode, \"pyro\", trans.burgeon), KeyMap.info(\"burgeon_hit\")),\n}\nexport const reactions = {\n  anemo: {\n    electroSwirl: trans.swirl.electro,\n    pyroSwirl: trans.swirl.pyro,\n    cryoSwirl: trans.swirl.cryo,\n    hydroSwirl: trans.swirl.hydro,\n    overloaded: trans.overloaded,\n    electrocharged: trans.electrocharged,\n    superconduct: trans.superconduct,\n    shattered: trans.shattered,\n    burning: trans.burning,\n    bloom: trans.bloom,\n    burgeon: trans.burgeon,\n    hyperbloom: trans.hyperbloom,\n  },\n  geo: {\n    crystallize: crystallizeHit,\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\n    infoMut(prod(percent(2.5), crystallizeHit), KeyMap.info(`${e}_crystallize`))])),\n    shattered: trans.shattered,\n    overloaded: infusionReactions.overloaded,\n    electrocharged: infusionReactions.electrocharged,\n    superconduct: infusionReactions.superconduct,\n    burning: infusionReactions.burning,\n    bloom: infusionReactions.bloom,\n    burgeon: infusionReactions.burgeon,\n  },\n  electro: {\n    overloaded: trans.overloaded,\n    electrocharged: trans.electrocharged,\n    superconduct: trans.superconduct,\n    shattered: trans.shattered,\n    hyperbloom: trans.hyperbloom,\n    burning: infusionReactions.burning,\n    bloom: infusionReactions.bloom,\n    burgeon: infusionReactions.burgeon,\n  },\n  hydro: {\n    electrocharged: trans.electrocharged,\n    shattered: trans.shattered,\n    bloom: trans.bloom,\n    overloaded: infusionReactions.overloaded,\n    superconduct: infusionReactions.superconduct,\n    burning: infusionReactions.burning,\n    burgeon: infusionReactions.burgeon,\n  },\n  pyro: {\n    overloaded: trans.overloaded,\n    shattered: trans.shattered,\n    burning: trans.burning,\n    burgeon: trans.burgeon,\n    electrocharged: infusionReactions.electrocharged,\n    superconduct: infusionReactions.superconduct,\n    bloom: infusionReactions.bloom,\n  },\n  cryo: {\n    superconduct: trans.superconduct,\n    shattered: trans.shattered,\n    overloaded: infusionReactions.overloaded,\n    electrocharged: infusionReactions.electrocharged,\n    burning: infusionReactions.burning,\n    bloom: infusionReactions.bloom,\n    burgeon: infusionReactions.burgeon,\n  },\n  dendro: {\n    shattered: trans.shattered,\n    burning: trans.burning,\n    bloom: trans.bloom,\n    overloaded: infusionReactions.overloaded,\n    electrocharged: infusionReactions.electrocharged,\n    superconduct: infusionReactions.superconduct,\n    burgeon: infusionReactions.burgeon,\n  }\n}\n","import { SubstatKey } from \"pipeline\";\nimport { infusionNode, input } from \"../../Formula\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { reactions } from \"../../Formula/reaction\";\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\nimport { constant, data, infoMut, lookup, one, percent, prod, stringPrio, subscript, sum } from \"../../Formula/utils\";\nimport KeyMap from \"../../KeyMap\";\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\nimport _charCurves from \"./expCurve_gen.json\";\n\n// TODO: Remove this conversion after changing the file format\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\n\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\n\nconst inferredHitEle = stringPrio(\n  lookup(input.hit.move, {\n    \"skill\": input.charEle, \"burst\": input.charEle,\n  }, undefined),\n  lookup(input.weaponType, {\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\n    catalyst: input.charEle,\n  }, undefined),\n  \"physical\"\n)\n\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\n  switch (move) {\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\n    case \"skill\": return \"skill\";\n    case \"burst\": return \"burst\";\n  }\n}\n\n/** Note: `additional` applies only to this formula */\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\n  return data(input.hit.dmg, mergeData([{\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\n  }, additional]))\n}\n/** Note: `additional` applies only to this formula */\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\n  const shieldNode = prod(base, sum(one, input.total.shield_))\n  return additional ? data(shieldNode, additional) : shieldNode\n}\n/** Note: `additional` applies only to this formula */\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\n  const healInc = input.total.healInc\n  const healNode = prod(sum(base, healInc), sum(one, input.total.heal_, input.total.incHeal_))\n\n  return additional ? data(healNode, additional) : healNode\n}\n/** Note: `additional` applies only to this formula */\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}, specialMultiplier?: NumNode): NumNode {\n  const talentType = getTalentType(move)\n  return customDmgNode(specialMultiplier\n    ? prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { unit: \"%\" }), input.total[base], specialMultiplier)\n    : prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { unit: \"%\" }), input.total[base]),\n  move, additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\n  const talentType = getTalentType(move)\n  const talentIndex = input.total[`${talentType}Index`]\n  return customShieldNode(sum(\n    prod(subscript(talentIndex, baseMultiplier, { unit: \"%\" }), input.total[base]),\n    subscript(talentIndex, flat)\n  ), additional)\n}\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\n}\n/** Note: `additional` applies only to this formula */\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\n  const talentType = getTalentType(move)\n  const talentIndex = input.total[`${talentType}Index`]\n  return customHealNode(sum(\n    prod(subscript(talentIndex, baseMultiplier, { unit: \"%\" }), input.total[base]),\n    subscript(talentIndex, flat)\n  ), additional)\n}\nexport function dataObjForCharacterSheet(\n  key: CharacterKey,\n  element: ElementKey | undefined,\n  region: Region | undefined,\n  gen: {\n    weaponTypeKey: string,\n    base: { hp: number, atk: number, def: number },\n    curves: { [key in string]?: string },\n    ascensions: { props: { [key in string]?: number } }[]\n  },\n  display: { [key: string]: DisplaySub },\n  additional: Data = {},\n): Data {\n  function curve(base: number, lvlCurve: string): NumNode {\n    return prod(base, subscript<number>(input.lvl, charCurves[lvlCurve]))\n  }\n  display.basic = { ...commonBasic }\n  const data: Data = {\n    charKey: constant(key),\n    base: {},\n    weaponType: constant(gen.weaponTypeKey),\n    premod: {},\n    display,\n  }\n  if (element) {\n    data.charEle = constant(element)\n    data.teamBuff = { tally: { [element]: constant(1) } }\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\n    data.display!.reaction = reactions[element]\n  }\n  if (region)\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\n  layeredAssignment(data, [\"teamBuff\", \"tally\", \"maxEleMas\"], input.premod.eleMas)\n  if (gen.weaponTypeKey !== \"catalyst\") {\n    if (!data.display!.basic) data.display!.basic = {}\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\n  }\n\n  let foundSpecial: boolean | undefined\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\n    const list: NumNode[] = []\n    if (gen.curves[stat])\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\n    const asc = gen.ascensions.some(x => x.props[stat])\n    if (asc)\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\n\n    if (!list.length) continue\n\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { ...KeyMap.info(stat), prefix: \"char\", asConst: true })\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\n      data.base![stat] = result\n    else {\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\n      foundSpecial = true\n      data.special = result\n      data.premod![stat] = input.special\n    }\n  }\n\n  return mergeData([data, inferInfoMut(additional)])\n}\n","import type { WeaponData } from \"pipeline\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { WeaponKey } from \"../../Types/consts\";\nimport _weaponCurves from \"./expCurve_gen.json\";\nimport { input } from \"../../Formula\";\nimport { Data, DisplaySub } from \"../../Formula/type\";\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\nimport KeyMap from \"../../KeyMap\";\n\n// TODO: Remove this conversion after changing the file format\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\n\nexport function dataObjForWeaponSheet(\n  key: WeaponKey,\n  gen: WeaponData,\n  additional: Data = {},\n  displayWeapon: DisplaySub = {},\n): Data {\n  const result: Data = {\n    base: {},\n    premod: {},\n    total: {},\n    weapon: {\n      key: constant(key), type: constant(gen.weaponType),\n    },\n    display: {\n      [`weapon:${key}`]: displayWeapon\n    },\n  }\n\n  const { mainStat, subStat } = gen\n  const merging = [result]\n\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), KeyMap.info(mainStat.type))\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\n\n  if (subStat) {\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), KeyMap.info(subStat.type))\n    merging.push({\n      premod: { [subStat.type]: input.weapon.sub },\n      weapon: { sub: substatNode },\n    })\n  }\n  return mergeData([...merging, inferInfoMut(additional, key)])\n}\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Akuoumaru\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\nconst energyRange = range(4, 36).map(i => i * 10)\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { unit: \"%\" }), i), subscript(input.weapon.refineIndex, max, { unit: \"%\" }))])), naught)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"party\"),\n    states: Object.fromEntries(energyRange.map(i => [i, {\n      name: i.toString(),\n      fields: [{ node: burst_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffSlasher\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states:\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\n        name: st(\"stack\", { count: c }),\n        fields: [{\n          node: atk_,\n        }, {\n          text: stg(\"duration\"),\n          value: 30,\n          unit: \"s\"\n        }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BloodtaintedGreatsword\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DebateClub\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgPerc = [0.6, 0.75, 0.9, 1.05, 1.2]\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { name: st(\"dmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusGreatsword\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FerrousShadow\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\n// const hpThreshold = [0.7, 0.75, 0.8, 0.85, 0.9]\nconst bonusInc = [0.3, 0.35, 0.4, 0.45, 0.5]\nconst [condPassivePath, condPassive] = cond(key, \"Unbending\")\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, bonusInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    charged_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    // TODO: need st(\"lessPercentHP\", { percent: xx }) to change depending on the weapon refine index.\n    // Probably need to change IConditional.name to have (data:Data)=>Displayable as well.\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: charged_dmg_,\n        }, {\n          text: trm(\"resistance\")\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input, target } from '../../../../Formula'\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ForestRegalia\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst eleMasArr = [60, 75, 90, 105, 120]\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      eleMas\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(eleMas_disp, KeyMap.info(\"eleMas\")),\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }, {\n          text: stg(\"cd\"),\n          value: 20,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: skill_dmg_ }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input, tally } from '../../../../Formula'\nimport { prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LithicBlade\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\nconst atk_ = prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), tally.liyue)\nconst critRate_ = prod(subscript(input.weapon.refineIndex, critInc, { unit: \"%\" }), tally.liyue)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    fields: [{ node: atk_ }, { node: critRate_ }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LuxuriousSeaLord\"\nconst data_gen = data_gen_json as WeaponData\n\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\nconst dmg = equal(input.weapon.key, key, equal(condPassive, 'on',\n  customDmgNode(prod(\n    subscript(\n      input.weapon.refineIndex, dmg_Src, { unit: \"%\" }),\n      input.total.atk\n    ),\n    \"elemental\",\n    { hit: { ele: constant(\"physical\") }\n})))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  },\n}, {\n  dmg\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: burst_dmg_ }],\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    value: condPassive,\n    path: condPassivePath,\n    name: st('hitOp.burst'),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(dmg, { name: st(\"dmg\") })\n        }, {\n          text: stg(\"cd\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","\nimport { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MakhairaAquamarine\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\n\nconst atk_arr = [0.24, 0.3, 0.36, 0.42, 0.48]\nconst atkSelf = equal(input.weapon.key, key, equal(condPassive, \"on\",\n  prod(\n    subscript(input.weapon.refineIndex, atk_arr, { unit: \"%\" }),\n    input.premod.eleMas\n  )\n))\nconst atkTeamDisp = equal(input.weapon.key, key, prod(percent(0.3), atkSelf))\nconst atkTeam = unequal(input.activeCharKey, input.charKey, atkTeamDisp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  total: {\n    atk: atkSelf\n  },\n  teamBuff: {\n    total: {\n      atk: atkTeam\n    }\n  }\n}, {\n  atkSelf,\n  atkTeamDisp\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    path: condPassivePath,\n    value: condPassive,\n    teamBuff: true,\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: atkSelf\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }],\n      }\n    }\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\n    teamBuff: true,\n    canShow: equal(condPassive, \"on\", 1),\n    fields: [{\n      node: infoMut(atkTeamDisp, { ...KeyMap.info(\"atk\"), isTeamBuff: true }),\n    }, {\n        text: stg(\"duration\"),\n        value: 12,\n        unit: \"s\"\n    }]\n  }],\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"OldMercsPal\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeArchaic\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { unit: \"%\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: infoMut(dmg, { name: st(\"dmg\") }) }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Rainslasher\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RedhornStonethresher\"\nconst data_gen = data_gen_json as WeaponData\n\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\nconst normal_dmgInc = equal(input.weapon.key, key,\n  prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { unit: \"%\" }), input.premod.def))\nconst charged_dmgInc = equal(input.weapon.key, key,\n  prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { unit: \"%\" }), input.premod.def))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    def_,\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\n  }\n}, {\n  normal_dmgInc,\n  charged_dmgInc,\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: def_\n    }, {\n      node: normal_dmgInc\n    }, {\n      node: charged_dmgInc\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    name: st(\"opponentsDamaged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SerpentSpine\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\n\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { unit: \"%\" })\nconst all_dmg_stack = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: all_dmg_stack\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"activeCharField\"),\n    states: {\n      ...objectKeyMap(range(1, 5), i => ({\n        name: st(\"seconds\", { count: i * 4 }),\n        fields: [{\n          node: all_dmg_stack\n        }, {\n          text: trm(\"takeMoreDmg\"),\n          value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\n          unit: \"%\"\n        }]\n      })),\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkyriderGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst bonusInc = [0.06, 0.07, 0.08, 0.09, 0.1]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    name: st(\"hitOp.normalOrCharged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        text: stg(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardPride\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst dmgPerc = [0.8, 1, 1.2, 1.4, 1.6]\nconst all_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: all_dmg_,\n    }, {\n      node: infoMut(dmg, { name: st(\"dmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SnowTombedStarsilver\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\nconst dmgAoe = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst dmgOnCryoOp = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmgAoe, { name: WeaponSheet.trm(key)(\"aoeDmg\") }),\n    }, {\n      node: infoMut(dmgOnCryoOp, { name: WeaponSheet.trm(key)(\"cryoAffectedDmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SongOfBrokenPines\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { unit: \"%\" })\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, KeyMap.info(\"atk_\")))\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  },\n  teamBuff: {\n    premod: {\n      atk_: atkTeam_,\n      atkSPD_,\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: atk_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"name\"),\n    states: {\n      on: {\n        fields: [{\n          node: atkTeam_\n        }, {\n          node: atkSPD_\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { infoMut, equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customShieldNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheBell\"\nconst data_gen = data_gen_json as WeaponData\n\nconst shieldSrc = [0.2, 0.23, 0.26, 0.29, 0.32]\nconst allDmgSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"RebelliousGuardian\")\nconst shield = equal(input.weapon.key, key,\n  equal(condPassive, \"on\", customShieldNode(prod(subscript(input.weapon.refineIndex, shieldSrc, { unit: \"%\" }), input.total.hp))))\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\nconst all_dmg_ = equal(condWithShield, \"protected\", subscript(input.weapon.refineIndex, allDmgSrc, { unit: \"%\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n}, {\n  shield\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"takeDmg\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(shield, { name: stg(`dmgAbsorption`) })\n        }, {\n          text: stg(\"cd\"),\n          value: 45,\n          unit: \"s\"\n        }]\n      }\n    }\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          node: all_dmg_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheUnforged\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: stg(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"WasterGreatsword\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Whiteblind\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst bonusInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    def_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    name: st(\"hitOp.normalOrCharged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: def_\n      }, {\n        text: stg(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WhiteIronGreatsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpRegen = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst [condPath, condNode] = cond(key, \"CullTheWeak\")\nconst heal = equal(input.weapon.key, key,\n  equal(condNode, 'on', customHealNode(prod(subscript(input.weapon.refineIndex, hpRegen, { unit: \"%\" }), input.total.hp))))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNode,\n    path: condPath,\n    name: st('afterDefeatEnemy'),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\n        }]\n      }\n    }\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WolfsGravestone\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, KeyMap.info(\"atk_\")))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_,\n  },\n  teamBuff: {\n    premod: {\n      atk_: atkTeam_,\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: atk_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"enemyLessPercentHP\", { percent: 30 }),\n    states: {\n      on: {\n        fields: [{\n          node: atkTeam_\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponClaymoreKey } from \"../../../Types/consts\"\nimport WeaponSheet from \"../WeaponSheet\"\nimport Akuoumaru from \"./Akuoumaru\"\nimport BlackcliffSlasher from \"./BlackcliffSlasher\"\nimport BloodtaintedGreatsword from \"./BloodtaintedGreatsword\"\nimport DebateClub from \"./DebateClub\"\nimport FavoniusGreatsword from \"./FavoniusGreatsword\"\nimport FerrousShadow from \"./FerrousShadow\"\nimport ForestRegalia from \"./ForestRegalia\"\nimport KatsuragikiriNagamasa from \"./KatsuragikiriNagamasa\"\nimport LithicBlade from \"./LithicBlade\"\nimport LuxuriousSeaLord from \"./LuxuriousSeaLord\"\nimport MakhairaAquamarine from \"./MakhairaAquamarine\"\nimport OldMercsPal from \"./OldMercsPal\"\nimport PrototypeArchaic from \"./PrototypeArchaic\"\nimport Rainslasher from \"./Rainslasher\"\nimport RedhornStonethresher from \"./RedhornStonethresher\"\nimport RoyalGreatsword from \"./RoyalGreatsword\"\nimport SacrificialGreatsword from \"./SacrificialGreatsword\"\nimport SerpentSpine from \"./SerpentSpine\"\nimport SkyriderGreatsword from \"./SkyriderGreatsword\"\nimport SkywardPride from \"./SkywardPride\"\nimport SnowTombedStarsilver from \"./SnowTombedStarsilver\"\nimport SongOfBrokenPines from \"./SongOfBrokenPines\"\nimport TheBell from \"./TheBell\"\nimport TheUnforged from \"./TheUnforged\"\nimport WasterGreatsword from \"./WasterGreatsword\"\nimport Whiteblind from \"./Whiteblind\"\nimport WhiteIronGreatsword from \"./WhiteIronGreatsword\"\nimport WolfsGravestone from \"./WolfsGravestone\"\nconst claymore: Record<WeaponClaymoreKey, WeaponSheet> = {\n  Akuoumaru,\n  BlackcliffSlasher,\n  BloodtaintedGreatsword,\n  DebateClub,\n  FavoniusGreatsword,\n  FerrousShadow,\n  ForestRegalia,\n  KatsuragikiriNagamasa,\n  LithicBlade,\n  LuxuriousSeaLord,\n  MakhairaAquamarine,\n  OldMercsPal,\n  PrototypeArchaic,\n  Rainslasher,\n  RedhornStonethresher,\n  RoyalGreatsword,\n  SacrificialGreatsword,\n  SerpentSpine,\n  SkyriderGreatsword,\n  SkywardPride,\n  SnowTombedStarsilver,\n  SongOfBrokenPines,\n  TheBell,\n  TheUnforged,\n  WasterGreatsword,\n  Whiteblind,\n  WhiteIronGreatsword,\n  WolfsGravestone,\n} as const\nexport default claymore\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AmenomaKageuchi\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AquilaFavonia\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\nconst heal = equal(input.weapon.key, key, equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { unit: \"%\" }), input.premod.atk)))\nconst dmg = equal(input.weapon.key, key,\n  equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { unit: \"%\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  })))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n  },\n}, {\n  heal, dmg\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk_,\n    }],\n  }, {\n    value: condNode,\n    path: condPath,\n    name: st('takeDmg'),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\n        }, {\n          node: infoMut(dmg, { name: st(\"dmg\") })\n        }, {\n          text: stg(\"cd\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffLongsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states:\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\n        name: st(\"stack\", { count: c }),\n        fields: [{\n          node: atk_,\n        }, {\n          text: stg(\"duration\"),\n          value: 30,\n          unit: \"s\"\n        }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CinnabarSpindle\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\nconst skill_dmgInc = equal(input.weapon.key, key,\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { unit: \"%\" }), input.premod.def)))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: { // TODO: should be total\n    skill_dmgInc\n  }\n}, {\n  skill_dmgInc\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"name\"),\n    states: {\n      on: {\n        fields: [{\n          node: skill_dmgInc\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CoolSteel\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KagotsurubeIsshin\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst atk_ = equal(condPassive, \"on\", percent(0.15)) // No refinement data\nconst dmg = equal(input.weapon.key, key,\n  equal(condPassive, \"on\", customDmgNode(prod(percent(1.8), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"hitOp.normalChargedOrPlunging\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(dmg, { name: st(\"dmg\") })\n        }, {\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }, {\n          text: stg(\"cd\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DarkIronSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"elementalReaction.electro\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_,\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: 's'\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"DullBlade\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusSword\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FesteringDesire\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { unit: \"%\" })\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { unit: \"%\" })\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    skill_critRate_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_\n    }, {\n      node: skill_critRate_\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FilletBlade\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\nconst cd_Src = [15, 14, 13, 12, 11]\nconst dmg_ = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { unit: \"%\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmg_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg_, { name: st(\"dmg\") })\n    }, {\n      text: stg(\"cd\"),\n      value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\n      unit: \"s\"\n    }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, stg, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ToukabouShigure\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst all_dmg_arr = [0.16, 0.20, 0.24, 0.28, 0.32]\nconst all_dmg_ = equal(input.weapon.key, key, equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_arr, { unit: \"%\" })))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\",\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FreedomSworn\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\n// solution, since then these nodes won't show in the team buff panel. And it's\n// a bit unlikely people will try to stack this buff\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\nconst charged_dmg_ = { ...normal_dmg_ }\nconst plunging_dmg_ = { ...normal_dmg_ }\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: dmg_\n  },\n  teamBuff: {\n    premod: {\n      atk_,\n      normal_dmg_,\n      charged_dmg_,\n      plunging_dmg_,\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: dmg_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"sigilsConsumed\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: normal_dmg_\n        }, {\n          node: charged_dmg_\n        }, {\n          node: plunging_dmg_\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport KeyMap from '../../../../KeyMap'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HaranGeppakuFutsu\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst stack_normal_dmg_ = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPath, condNode] = cond(key, \"HonedFlow\")\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  subscript(input.weapon.refineIndex, passiveRefine, KeyMap.info(`${ele}_dmg_`))]\n))\nconst normal_dmg_ = lookup(condNode,\n  objectKeyMap(range(1, 2), i => prod(i, subscript(input.weapon.refineIndex, stack_normal_dmg_)))\n  , naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...passive_dmg_,\n    normal_dmg_,\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [ // Passive\n      ...allElements.map((ele) => {\n        return { node: passive_dmg_[`${ele}_dmg_`] }\n      })\n    ],\n  }, {\n    value: condNode,\n    path: condPath,\n    name: trm(\"consumed\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: objectKeyMap(range(1, 2), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: normal_dmg_ }]\n    }))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HarbingerOfDawn\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_,\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"greaterPercentHP\", { percent: 90 }),\n    states: {\n      on: {\n        fields: [{\n          node: critRate_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"IronSting\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\nconst eleDmgDealtStack = range(1, 2)\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\n  subscript(input.weapon.refineIndex, allDmgInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(eleDmgDealtStack.map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: all_dmg_,\n      }, {\n        text: stg(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, stg } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KeyOfKhajNisut\"\nconst data_gen = data_gen_json as WeaponData\n\nconst selfEmSrc = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst teamEmSrc = [0.002, 0.0025, 0.003, 0.0035, 0.004]\nconst stacksArr = range(1, 3)\nconst hp_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst hp_ = equal(input.weapon.key, key, subscript(input.weapon.refineIndex, hp_arr, { unit: \"%\" }))\n\nconst [condAfterSkillStacksPath, condAfterSkillStacks] = cond(key, \"afterSkill\")\nconst selfEleMas = equal(input.weapon.key, key,\n  lookup(condAfterSkillStacks, Object.fromEntries(stacksArr.map(stack => [\n    stack,\n    prod(\n      stack,\n      subscript(input.weapon.refineIndex, selfEmSrc, { unit: \"%\", fixed: 2 }),\n      input.total.hp\n    )\n  ])), naught)\n)\nconst teamEleMas = equal(input.weapon.key, key,\n  equal(condAfterSkillStacks, \"3\",\n    prod(\n      subscript(input.weapon.refineIndex, teamEmSrc, { unit: \"%\", fixed: 2 }),\n      input.total.hp\n    )))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_,\n  },\n  total: {\n    eleMas: selfEleMas\n  },\n  teamBuff: {\n    total: {\n      eleMas: teamEleMas\n    }\n  }\n}, {\n  selfEleMas, teamEleMas\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: hp_ }]\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    teamBuff: true,\n    path: condAfterSkillStacksPath,\n    value: condAfterSkillStacks,\n    name: st(\"hitOp.skill\"),\n    states: Object.fromEntries(stacksArr.map(stack => [\n      stack,\n      {\n        name: st(\"stack\", { count: stack }),\n        fields: [{\n          node: selfEleMas\n        }, {\n          text: stg(\"duration\"),\n          value: 20,\n          unit: \"s\"\n        }]\n      }\n    ]))\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\n    canShow: equal(condAfterSkillStacks, \"3\", 1),\n    teamBuff: true,\n    fields: [{\n      node: teamEleMas\n    }, {\n      text: stg(\"duration\"),\n      value: 20,\n      unit: \"s\"\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LionsRoar\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\nimport KeyMap from '../../../../KeyMap'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MistsplitterReforged\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst stacks = [\"1\", \"2\", \"3\"] as const\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst stacksRefine = {\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\n}\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  subscript(input.weapon.refineIndex, passiveRefine, KeyMap.info(`${ele}_dmg_`))]\n))\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  equal(input.charEle, ele,\n    lookup(condNode, objectKeyMap(stacks, stack =>\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, KeyMap.info(`${ele}_dmg_`))\n  )]\n))\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\n  [`${ele}_dmg_`,\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\n))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...allEle_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: allElements.map(ele => (\n      { node: passive_dmg_[`${ele}_dmg_`] }\n    ))\n  }, {\n    value: condNode,\n    path: condPath,\n    name: trm(\"emblem\"),\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    states: Object.fromEntries(\n      stacks.map(stack => [stack, {\n        name: st(\"stack\", { count: parseInt(stack) }),\n        fields: allElements.map(ele => ({\n          node: stacks_dmg_[`${ele}_dmg_`]\n        }))\n      }])\n    )\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrimordialJadeCutter\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\nconst atk = equal(input.weapon.key, key,\n  prod(subscript(input.weapon.refineIndex, atkSrc, { unit: \"%\" }), input.premod.hp))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_,\n  },\n  total: {\n    atk\n  }\n}, {\n  atk\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: hp_ }, { node: atk }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeRancour\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    def_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"onHit\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: def_\n      }, {\n        text: stg(\"duration\"),\n        value: 6,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalLongsword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input, target } from '../../../../Formula'\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SapwoodBlade\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst eleMasArr = [60, 75, 90, 105, 120]\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      eleMas\n    },\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(eleMas_disp, KeyMap.info(\"eleMas\")),\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }, {\n          text: stg(\"cd\"),\n          value: 20,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"SilverSword\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkyriderSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }))\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    moveSPD_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.burst\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: moveSPD_\n        }, {\n          text: stg(\"duration\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardBlade\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\nconst dmg = equal(input.weapon.key, key,\n  equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { unit: \"%\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  })))\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_,\n    moveSPD_,\n    atkSPD_,\n  }\n}, { dmg })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: critRate_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st('afterUse.burst'),\n    states: {\n      on: {\n        fields: [{\n          node: moveSPD_\n        }, {\n          node: atkSPD_\n        }, {\n          node: infoMut(dmg, { name: st(\"dmg\") })\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SummitShaper\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: stg(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SwordOfDescension\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk = equal(\"Traveler\", input.charKey, 66)\nconst dmg_ = equal(input.weapon.key, key,\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk\n  }\n}, {\n  dmg_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk\n    }, {\n      node: infoMut(dmg_, { name: st(\"dmg\") })\n    }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheAlleyFlash\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { unit: \"%\" }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheBlackSword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\nconst heal = equal(input.weapon.key, key,\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { unit: \"%\" }), input.total.atk)))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_\n  }\n}, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_\n    }, {\n      node: charged_dmg_\n    }, {\n      node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheFlute\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_ = equal(input.weapon.key, key,\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmg_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: infoMut(dmg_, { name: st(\"dmg\") }) }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TravelersHandySword\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\nconst heal = equal(input.weapon.key, key,\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { unit: \"%\" }), input.total.hp)))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [\n      { node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" }) }\n    ]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"XiphosMoonlight\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\n\nconst enerRech_arr = [0.00036, 0.00045, 0.00054, 0.00063, 0.00072]\nconst selfEnerRech_ = equal(input.weapon.key, key, equal(condPassive, \"on\",\n  prod(\n    subscript(input.weapon.refineIndex, enerRech_arr, { unit: \"%\", fixed: 3 }),\n    input.premod.eleMas,\n  )\n))\nconst teamEnerRech_disp = equal(input.weapon.key, key, prod(percent(0.3), selfEnerRech_))\nconst teamEnerRech_ = unequal(input.activeCharKey, input.charKey, teamEnerRech_disp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  total: {\n    enerRech_: selfEnerRech_\n  },\n  teamBuff: {\n    total: {\n      enerRech_: teamEnerRech_\n    }\n  }\n}, {\n  selfEnerRech_,\n  teamEnerRech_disp\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    path: condPassivePath,\n    value: condPassive,\n    name: trm(\"condName\"),\n    teamBuff: true,\n    states: {\n      on: {\n        fields: [{\n          node: selfEnerRech_,\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\n    teamBuff: true,\n    canShow: equal(condPassive, \"on\", 1),\n    fields: [{\n      node: infoMut(teamEnerRech_disp, { ...KeyMap.info(\"enerRech_\"), isTeamBuff: true }),\n    }, {\n      text: stg(\"duration\"),\n      value: 12,\n      unit: \"s\"\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponSwordKey } from \"../../../Types/consts\"\nimport WeaponSheet from \"../WeaponSheet\"\nimport AmenomaKageuchi from \"./AmenomaKageuchi\"\nimport AquilaFavonia from \"./AquilaFavonia\"\nimport BlackcliffLongsword from \"./BlackcliffLongsword\"\nimport CinnabarSpindle from \"./CinnabarSpindle\"\nimport CoolSteel from \"./CoolSteel\"\nimport KagotsurubeIsshin from \"./KagotsurubeIsshin\"\nimport DarkIronSword from \"./DarkIronSword\"\nimport DullBlade from \"./DullBlade\"\nimport FavoniusSword from \"./FavoniusSword\"\nimport FesteringDesire from \"./FesteringDesire\"\nimport FilletBlade from \"./FilletBlade\"\nimport ToukabouShigure from \"./ToukabouShigure\"\nimport FreedomSworn from \"./FreedomSworn\"\nimport HaranGeppakuFutsu from \"./HaranGeppakuFutsu\"\nimport HarbingerOfDawn from \"./HarbingerOfDawn\"\nimport IronSting from \"./IronSting\"\nimport KeyOfKhajNisut from \"./KeyOfKhajNisut\"\nimport LionsRoar from \"./LionsRoar\"\nimport MistsplitterReforged from \"./MistsplitterReforged\"\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\"\nimport PrototypeRancour from \"./PrototypeRancour\"\nimport RoyalLongsword from \"./RoyalLongsword\"\nimport SacrificialSword from \"./SacrificialSword\"\nimport SapwoodBlade from \"./SapwoodBlade\"\nimport SilverSword from \"./SilverSword\"\nimport SkyriderSword from \"./SkyriderSword\"\nimport SkywardBlade from \"./SkywardBlade\"\nimport SummitShaper from \"./SummitShaper\"\nimport SwordOfDescension from \"./SwordOfDescension\"\nimport TheAlleyFlash from \"./TheAlleyFlash\"\nimport TheBlackSword from \"./TheBlackSword\"\nimport TheFlute from \"./TheFlute\"\nimport TravelersHandySword from \"./TravelersHandySword\"\nimport XiphosMoonlight from \"./XiphosMoonlight\"\nconst sword: Record<WeaponSwordKey, WeaponSheet> = {\n  AmenomaKageuchi,\n  AquilaFavonia,\n  BlackcliffLongsword,\n  CinnabarSpindle,\n  CoolSteel,\n  KagotsurubeIsshin,\n  DarkIronSword,\n  DullBlade,\n  FavoniusSword,\n  FesteringDesire,\n  FilletBlade,\n  ToukabouShigure,\n  FreedomSworn,\n  HaranGeppakuFutsu,\n  HarbingerOfDawn,\n  IronSting,\n  KeyOfKhajNisut,\n  LionsRoar,\n  MistsplitterReforged,\n  PrimordialJadeCutter,\n  PrototypeRancour,\n  RoyalLongsword,\n  SacrificialSword,\n  SapwoodBlade,\n  SilverSword,\n  SkyriderSword,\n  SkywardBlade,\n  SummitShaper,\n  SwordOfDescension,\n  TheAlleyFlash,\n  TheBlackSword,\n  TheFlute,\n  TravelersHandySword,\n  XiphosMoonlight,\n} as const\nexport default sword\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\n\nconst key: WeaponKey = \"BeginnersProtector\"\nconst data_gen = data_gen_json as WeaponData\n\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"BlackcliffPole\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states:\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\n        name: st(\"stack\", { count: c }),\n        fields: [{\n          node: atk_,\n        }, {\n          text: stg(\"duration\"),\n          value: 30,\n          unit: \"s\"\n        }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackTassel\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { compareEq, constant, lookup, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CalamityQueller\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [tr] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\n// const [condActivePath, condActive] = cond(key, \"active\")\n\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\n\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\nconst atkInc = prod(\n  compareEq(input.activeCharKey, input.charKey,\n    constant(1, { /* TODO: Add key for active char */ }),\n    constant(2, { name: WeaponSheet.trm(key)(\"inactiveKey\") })),\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i, { name: st(\"stacks\") })), 0),\n  subscript(input.weapon.refineIndex, atk_, { unit: \"%\" }),\n)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...dmg_Nodes,\n    atk_: atkInc,\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\n  }, {\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: tr(\"passiveName\"),\n    states: Object.fromEntries(range(1, 6).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: atkInc }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CrescentPike\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\nconst hit = equal(input.weapon.key, key,\n  equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" })), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  })))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { hit })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(hit, { name: WeaponSheet.trm(key)(\"hitName\") })\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Deathmatch\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { unit: \"%\" }) }, naught)\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { unit: \"%\" }))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    def_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      \"oneOrNone\": {\n        name: trm(\"opponents.oneOrNone\"),\n        fields: [{ node: atk_ }, { node: def_ }]\n      },\n      \"moreThanOne\": {\n        name: trm(\"opponents.moreThanOne\"),\n        fields: [{ node: atk_ }, { node: def_ }]\n      },\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DragonsBane\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DragonspineSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\nconst dmgAoe = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst dmgOnCryoOp = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmgAoe, { name: WeaponSheet.trm(key)(\"aoeDmg\") }),\n    }, {\n      node: infoMut(dmgOnCryoOp, { name: WeaponSheet.trm(key)(\"cryoAffectedDmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EngulfingLightning\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\nconst atk_ = equal(input.weapon.key, key,\n  min(prod(subscript(input.weapon.refineIndex, atk), sum(input.premod.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax)))\n\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    enerRech_\n  },\n}, {\n  atk_\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk_,\n    }],\n  }, {\n    teamBuff: true,\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.burst\"),\n    states: {\n      on: {\n        fields: [{\n          node: enerRech_\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusLance\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Halberd\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { name: st(\"dmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\n\nconst key: WeaponKey = \"IronPoint\"\nconst data_gen = data_gen_json as WeaponData\n\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KitainCrossSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_,\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input, tally } from '../../../../Formula'\nimport { prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LithicSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\nconst atk_ = prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), tally.liyue)\nconst critRate_ = prod(subscript(input.weapon.refineIndex, critInc, { unit: \"%\" }), tally.liyue)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    fields: [{ node: atk_ }, { node: critRate_ }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MissiveWindspear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst atk_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst emArr = [48, 60, 72, 84, 96]\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_arr, { unit: \"%\" }))\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, emArr))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    eleMas,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterReaction\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_,\n        }, {\n          node: eleMas,\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input, target } from '../../../../Formula'\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Moonpiercer\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst atk_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst atk_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, atk_arr, { unit: \"%\" }))\nconst atk_ = equal(input.activeCharKey, target.charKey, atk_disp)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      atk_\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(atk_disp, KeyMap.info(\"atk_\")),\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }, {\n          text: stg(\"cd\"),\n          value: 20,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), i)), naught)\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { unit: \"%\" }))\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    all_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.none\"),\n    states: Object.fromEntries(range(1, 7).map(i => [i, {\n      name: st(\"hits\", { count: i }),\n      fields: [{ node: atk_ }, { node: all_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeStarglitter\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { unit: \"%\" }), i)), naught)\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { unit: \"%\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterUse.skill\"),\n    states: Object.fromEntries(range(1, 2).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalSpear\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardSpine\"\nconst data_gen = data_gen_json as WeaponData\n\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\nconst atkSPD_ = percent(0.12)\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_,\n    atkSPD_\n  }\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: critRate_,\n    }, {\n      node: atkSPD_,\n    }, {\n      node: infoMut(dmg, { name: st(\"dmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"StaffOfHoma\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { unit: \"%\" })\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\nconst atk1 = prod(subscript(input.weapon.refineIndex, atkInc, { unit: \"%\" }), input.premod.hp)\nconst atk2 = equal(input.weapon.key, key,\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { unit: \"%\" }), input.premod.hp), KeyMap.info(\"atk\")))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_,\n  },\n  total: {\n    atk: sum(atk1, atk2)\n  }\n}, {\n  atk2_: atk2\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: hp_\n    }, {\n      node: infoMut(atk1, KeyMap.info(\"atk\"))\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken),\n    name: st(\"lessPercentHP\", { percent: 50 }),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(atk2, KeyMap.info(\"atk\")),\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"StaffOfTheScarletSands\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\n\nconst baseAtkArr = [0.52, 0.65, 0.78, 0.91, 1.04]\nconst stacksAttArr = [0.28, 0.35, 0.42, 0.49, 0.56]\nconst stacksArr = range(1, 3)\nconst baseAtk = equal(input.weapon.key, key, prod(\n  subscript(input.weapon.refineIndex, baseAtkArr, { unit: \"%\" }),\n  input.premod.eleMas\n), KeyMap.info(\"atk\"))\nconst stacksAtk = lookup(condStacks, Object.fromEntries(stacksArr.map(stack => [\n  stack,\n  prod(\n    stack,\n    subscript(input.weapon.refineIndex, stacksAttArr, { unit: \"%\" }),\n    input.premod.eleMas\n  )\n])), naught, KeyMap.info(\"atk\"))\nconst atk = equal(input.weapon.key, key, sum(baseAtk, stacksAtk))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  total: {\n    atk\n  },\n}, {\n  atk\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: baseAtk\n    }],\n  }, {\n    value: condStacks,\n    path: condStacksPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.skill\"),\n    states: Object.fromEntries(stacksArr.map(i =>\n      [i, {\n        name: st(\"hits\", { count: i }),\n        fields: [{\n          node: stacksAtk\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheCatch\"\nconst data_gen = data_gen_json as WeaponData\n\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_,\n    burst_critRate_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"VortexVanquisher\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\n\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\n\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: stg(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WavebreakersFin\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\nconst energyRange = range(4, 36).map(i => i * 10)\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { unit: \"%\" }), i), subscript(input.weapon.refineIndex, max, { unit: \"%\" }))])), naught)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken),\n    name: trm(\"party\"),\n    states: Object.fromEntries(energyRange.map(i => [i, {\n      name: i.toString(),\n      fields: [{ node: burst_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WhiteTassel\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_,\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponPoleArmKey } from '../../../Types/consts'\nimport WeaponSheet from '../WeaponSheet'\nimport BeginnersProtector from './BeginnersProtector'\nimport BlackcliffPole from './BlackcliffPole'\nimport BlackTassel from './BlackTassel'\nimport CalamityQueller from './CalamityQueller'\nimport CrescentPike from './CrescentPike'\nimport Deathmatch from './Deathmatch'\nimport DragonsBane from './DragonsBane'\nimport DragonspineSpear from './DragonspineSpear'\nimport EngulfingLightning from './EngulfingLightning'\nimport FavoniusLance from './FavoniusLance'\nimport Halberd from './Halberd'\nimport IronPoint from './IronPoint'\nimport KitainCrossSpear from './KitainCrossSpear'\nimport LithicSpear from './LithicSpear'\nimport MissiveWindspear from './MissiveWindspear'\nimport Moonpiercer from './Moonpiercer'\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\nimport PrototypeStarglitter from './PrototypeStarglitter'\nimport RoyalSpear from './RoyalSpear'\nimport SkywardSpine from './SkywardSpine'\nimport StaffOfHoma from './StaffOfHoma'\nimport StaffOfTheScarletSands from './StaffOfTheScarletSands'\nimport TheCatch from './TheCatch'\nimport VortexVanquisher from './VortexVanquisher'\nimport WavebreakersFin from './WavebreakersFin'\nimport WhiteTassel from './WhiteTassel'\nconst polearm: Record<WeaponPoleArmKey, WeaponSheet> = {\n  BeginnersProtector,\n  BlackcliffPole,\n  BlackTassel,\n  CalamityQueller,\n  CrescentPike,\n  Deathmatch,\n  DragonsBane,\n  DragonspineSpear,\n  EngulfingLightning,\n  FavoniusLance,\n  Halberd,\n  IronPoint,\n  KitainCrossSpear,\n  LithicSpear,\n  MissiveWindspear,\n  Moonpiercer,\n  PrimordialJadeWingedSpear,\n  PrototypeStarglitter,\n  RoyalSpear,\n  SkywardSpine,\n  StaffOfHoma,\n  StaffOfTheScarletSands,\n  TheCatch,\n  VortexVanquisher,\n  WavebreakersFin,\n  WhiteTassel,\n} as const\nexport default polearm\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AlleyHunter\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst dmgInc = [.02, .025, .03, .035, .04]\n\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\nconst all_dmg_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i))\n}, naught)\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(range(1, 10).map(c => [c, {\n      name: st(\"seconds\", { count: c }),\n      fields: [{\n        node: all_dmg_\n      }],\n    }]))\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AmosBow\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\n\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, KeyMap.info(\"normal_dmg_\"))\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, KeyMap.info(\"charged_dmg_\"))\n\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\nconst normal_dmg_arrow_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\n}, naught, KeyMap.info(\"normal_dmg_\"))\nconst charged_dmg_arrow_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\n}, naught, KeyMap.info(\"charged_dmg_\"))\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_\n    }, {\n      node: charged_dmg_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 5), i => ({\n      name: st(\"seconds\", { count: i / 10 }),\n      fields: [{\n        node: normal_dmg_arrow_\n      }, {\n        node: charged_dmg_arrow_\n      }]\n    })),\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AquaSimulacra\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst hp_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst dmg_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\n\nconst base_hp_ = subscript(input.weapon.refineIndex, hp_arr)\nconst cond_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    hp_: base_hp_,\n    all_dmg_: cond_dmg_,\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: base_hp_,\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: cond_dmg_\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffWarbow\"\nconst data_gen = data_gen_json as WeaponData\nconst atkInc = [.12, .15, .18, .21, .24]\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst atk_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i))\n}, naught)\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states: Object.fromEntries(range(1, 3).map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: atk_\n      }, {\n        text: stg(\"duration\"),\n        value: 30,\n        unit: 's'\n      }],\n    }]))\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CompoundBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_s = [.04, .05, .06, .07, .08]\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\nconst atk_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i))\n}, naught)\nconst atkSPD_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i))\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    atkSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.normalOrCharged\"),\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\n      name: st(\"hits\", { count: i }),\n      fields: [{\n        node: atk_\n      }, {\n        node: atkSPD_\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from \"../../../../Formula/utils\"\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ElegyForTheEnd\"\nconst [, trm] = trans(\"weapon\", key)\nconst data_gen = data_gen_json as WeaponData\nconst eleMasInc = [60, 75, 90, 105, 120]\nconst eleMasInc2 = [100, 125, 150, 175, 200]\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\n\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, KeyMap.info(\"eleMas\"))\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\n// solution, since then these nodes won't show in the team buff panel. And it's\n// a bit unlikely people will try to stack this buff\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, KeyMap.info(\"eleMas\")))\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas,\n  },\n  teamBuff: {\n    premod: {\n      atk_,\n      eleMas: eleMas2\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: eleMas,\n    }],\n  }, {\n    value: condNode,\n    path: condPath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: eleMas2\n        }, {\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FadingTwilight\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condStatePath, condState] = cond(key, \"state\")\nconst state_dmg_dict = {\n  evengleam: subscript(input.weapon.refineIndex, [0.06, 0.075, 0.09, 0.105, 0.12]),\n  afterglow: subscript(input.weapon.refineIndex, [0.1, 0.125, 0.15, 0.175, 0.20]),\n  dawnblaze: subscript(input.weapon.refineIndex, [0.14, 0.175, 0.21, 0.245, 0.28])\n}\nconst state_dmg_ = lookup(condState, state_dmg_dict, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: state_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condState,\n    path: condStatePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: Object.fromEntries(Object.keys(state_dmg_dict).map(state => [\n      state,\n      {\n        name: trm(`states.${state}`),\n        fields: [{ node: state_dmg_ }]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusWarbow\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript, sum } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Hamayumi\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\n\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, KeyMap.info(\"normal_dmg_\"))\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, KeyMap.info(\"charged_dmg_\"))\n\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, KeyMap.info(\"normal_dmg_\")))\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, KeyMap.info(\"charged_dmg_\")))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_: sum(normal_dmg, normal_passive),\n    charged_dmg_: sum(charged_dmg, charged_passive)\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg\n    }, {\n      node: charged_dmg\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: normal_passive\n        }, {\n          node: charged_passive\n        }]\n      }\n    }\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"HuntersBow\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HuntersPath\"\nconst data_gen = data_gen_json as WeaponData\n\nconst allEle_dmg_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele => [\n  `${ele}_dmg_`,\n  subscript(input.weapon.refineIndex, allEle_dmg_arr, { unit: \"%\" })\n]))\n\nconst charged_dmgIncArr = [1.6, 2, 2.4, 2.8, 3.2]\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst charged_dmgInc = equal(condPassive, \"on\",\n  prod(\n    subscript(input.weapon.refineIndex, charged_dmgIncArr, { unit: \"%\" }),\n    input.total.eleMas\n  ))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...allEle_dmg_,\n    charged_dmgInc,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: Object.values(allEle_dmg_).map(node => ({\n      node\n    }))\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.charged\"),\n    states: {\n      on: {\n        fields: [{\n          node: charged_dmgInc,\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }, {\n          text: st(\"charges\"),\n          value: 12\n        }, {\n          text: stg(\"cd\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KingsSquire\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst eleMasArr = [60, 80, 100, 120, 140]\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, eleMasArr))\nconst dmg_arr = [1, 1.2, 1.4, 1.6, 1.8]\nconst dmg = equal(input.weapon.key, key, customDmgNode(\n  prod(\n    subscript(input.weapon.refineIndex, dmg_arr, { unit: \"%\" }),\n    input.total.atk\n  ),\n  \"elemental\",\n))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas\n  },\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { name: st(\"dmg\") }),\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.skillOrBurst\"),\n    states: {\n      on: {\n        fields: [{\n          node: eleMas,\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }, {\n          text: stg(\"cd\"),\n          value: 20,\n          unit: \"s\",\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Messenger\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { name: st(\"dmg\") })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MitternachtsWaltz\"\nconst data_gen = data_gen_json as WeaponData\n\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\n\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\n\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    normal_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNormal,\n    path: condNormalPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.skill\"),\n    states: {\n      on: {\n        fields: [{\n          node: normal_dmg_\n        }, {\n          text: stg(\"duration\"),\n          value: 5,\n          unit: 's'\n        }]\n      }\n    }\n  }, {\n    value: condSkill,\n    path: condSkillPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.normal\"),\n    states: {\n      on: {\n        fields: [{\n          node: skill_dmg_\n        }, {\n          text: stg(\"duration\"),\n          value: 5,\n          unit: 's'\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MouunsMoon\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\nconst energyRange = range(4, 36).map(i => i * 10)\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { unit: \"%\" }), i), subscript(input.weapon.refineIndex, max, { unit: \"%\" }))])), naught)\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    burst_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"party\"),\n    states: Object.fromEntries(energyRange.map(i => [i, {\n      name: i.toString(),\n      fields: [{ node: burst_dmg_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PolarStar\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\n\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\nconst atk_ = lookup(condPassive, {\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_,\n    atk_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_,\n    }, {\n      node: burst_dmg_,\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 4), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: atk_\n      }]\n    }))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, percent, prod } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Predator\"\nconst data_gen = data_gen_json as WeaponData\n\nconst normalInc = percent(.1)\nconst chargedInc = percent(.1)\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst normal_dmg_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i))\n}, naught)\nconst charged_dmg_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i))\n}, naught)\nconst atk = equal(input.activeCharKey, \"Aloy\", 66)\n\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_,\n    atk\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.cryo\"),\n    states: Object.fromEntries(range(1, 2).map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: normal_dmg_\n      }, {\n        node: charged_dmg_\n      }, {\n        text: stg(\"duration\"),\n        value: 6,\n        unit: 's'\n      }],\n    }]))\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, percent, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeCrescent\"\nconst [, trm] = trans(\"weapon\", key)\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_s = [.36, .45, .54, .63, .72]\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    moveSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: moveSPD_\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: 's'\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RavenBow\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst all_dmg_s = [.12, .15, .18, .21, .24]\n\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_\n        }]\n      }\n    }\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RecurveBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst healing_s = [.08, .10, .12, .14, .16]\nconst healing = equal(input.weapon.key, key,\n  customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s))))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { healing })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(healing, { name: stg(\"healing\"), variant: \"heal\" })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst critRate_s = [.08, .10, .12, .14, .16]\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\nconst critRate_ = lookup(condPassive, {\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i))\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: critRate_\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Rust\"\nconst data_gen = data_gen_json as WeaponData\n\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\n\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\nconst charged_dmg_ = constant(-0.1)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_,\n    charged_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_\n    }, {\n      node: charged_dmg_\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialBow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"SeasonedHuntersBow\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SharpshootersOath\"\nconst data_gen = data_gen_json as WeaponData\n\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    weakspotDMG_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: weakspotDMG_\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, percent, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardHarp\"\nconst data_gen = data_gen_json as WeaponData\n\nconst critd_s = [.20, .25, .30, .35, .40]\nconst dmgPerc = percent(1.25)\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critDMG_\n  },\n}, {\n  dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: critDMG_\n    }, {\n      node: infoMut(dmg, { name: st(\"dmg\") })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Slingshot\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmg_arr = [.36, .42, .48, .54, .60]\n\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\nconst normal_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), KeyMap.info(\"normal_dmg_\"))\nconst charged_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), KeyMap.info(\"charged_dmg_\"))\nconst normal_dmg_dec = equal(condPassive, undefined, percent(-0.1, KeyMap.info(\"normal_dmg_\")))\nconst charged_dmg_dec = equal(condPassive, undefined, percent(-0.1, KeyMap.info(\"charged_dmg_\")))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmg_: sum(normal_dmg_inc, normal_dmg_dec),\n    charged_dmg_: sum(charged_dmg_inc, charged_dmg_dec),\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: normal_dmg_dec\n    }, {\n      node: charged_dmg_dec\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: trm(\"condName\"),\n    states: {\n      on: {\n        fields: [{\n          node: normal_dmg_inc\n        }, {\n          node: charged_dmg_inc\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheStringless\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: skill_dmg_,\n    }, {\n      node: burst_dmg_,\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TheViridescentHunt\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { name: st(\"dmg\") })\n    }]\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ThunderingPulse\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\n\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\nconst normal_dmg_ = lookup(condPassive, {\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\n}, naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    normal_dmg_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atk_,\n    }]\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 3), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [{\n        node: normal_dmg_\n      }]\n    })),\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EndOfTheLine\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgArr = [0.8, 1, 1.2, 1.4, 1.6]\nconst dmg = equal(input.weapon.key, key, customDmgNode(\n  prod(\n    subscript(input.weapon.refineIndex, dmgArr, { unit: \"%\" }),\n    input.total.atk\n  ),\n  \"elemental\"\n))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmg, { name: st(\"dmg\") })\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WindblumeOde\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk_s = [.16, .20, .24, .28, .32]\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterUse.skill\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: 's'\n        }]\n      }\n    }\n  }]\n}\n\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponBowKey } from '../../../Types/consts'\nimport WeaponSheet from '../WeaponSheet'\n\nimport AlleyHunter from './AlleyHunter'\nimport AmosBow from \"./AmosBow\"\nimport AquaSimulacra from \"./AquaSimulacra\"\nimport BlackcliffWarbow from './BlackcliffWarbow'\nimport CompoundBow from './CompoundBow'\nimport ElegyForTheEnd from \"./ElegyForTheEnd\"\nimport FadingTwilight from \"./FadingTwilight\"\nimport FavoniusWarbow from './FavoniusWarbow'\nimport Hamayumi from './Hamayumi'\nimport HuntersBow from \"./HuntersBow\"\nimport HuntersPath from './HuntersPath'\nimport KingsSquire from './KingsSquire'\nimport Messenger from './Messenger'\nimport MitternachtsWaltz from './MitternachtsWaltz'\nimport MouunsMoon from './MouunsMoon'\nimport PolarStar from './PolarStar'\nimport Predator from './Predator'\nimport PrototypeCrescent from './PrototypeCrescent'\nimport RavenBow from './RavenBow'\nimport RecurveBow from './RecurveBow'\nimport RoyalBow from './RoyalBow'\nimport Rust from './Rust'\nimport SacrificialBow from \"./SacrificialBow\"\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\nimport SharpshootersOath from './SharpshootersOath'\nimport SkywardHarp from './SkywardHarp'\nimport Slingshot from './Slingshot'\nimport TheStringless from './TheStringless'\nimport TheViridescentHunt from './TheViridescentHunt'\nimport ThunderingPulse from './ThunderingPulse'\nimport EndOfTheLine from './EndOfTheLine'\nimport WindblumeOde from './WindblumeOde'\n\nconst bow: Record<WeaponBowKey, WeaponSheet> = {\n  AlleyHunter,\n  AmosBow,\n  AquaSimulacra,\n  BlackcliffWarbow,\n  CompoundBow,\n  ElegyForTheEnd,\n  FadingTwilight,\n  FavoniusWarbow,\n  Hamayumi,\n  HuntersBow,\n  HuntersPath,\n  KingsSquire,\n  Messenger,\n  MitternachtsWaltz,\n  MouunsMoon,\n  PolarStar,\n  Predator,\n  PrototypeCrescent,\n  RavenBow,\n  RecurveBow,\n  RoyalBow,\n  Rust,\n  SacrificialBow,\n  SeasonedHuntersBow,\n  SharpshootersOath,\n  SkywardHarp,\n  Slingshot,\n  TheStringless,\n  TheViridescentHunt,\n  ThunderingPulse,\n  EndOfTheLine,\n  WindblumeOde,\n} as const\nexport default bow\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"ApprenticesNotes\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input, tally, target } from '../../../../Formula'\nimport { equal, infoMut, lookup, naught, prod, subscript, sum, unequal } from \"../../../../Formula/utils\"\nimport KeyMap from '../../../../KeyMap'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"AThousandFloatingDreams\"\nconst data_gen = data_gen_json as WeaponData\n\nconst self_eleMasArr = [32, 40, 48, 56, 64]\nconst self_eleDmg_arr = [0.10, 0.14, 0.18, 0.22, 0.26]\nconst team_eleMasArr = [40, 42, 44, 46, 48]\n\nconst numSameElement = lookup(input.charEle, Object.fromEntries(allElements.map(ele => [\n  ele,\n  infoMut(sum(tally[ele], -1), { asConst: true }) // Subtract wielder from count\n])), naught)\nconst partySize = sum(...allElements.map(ele => tally[ele]))\nconst self_eleMas = prod(\n  numSameElement,\n  subscript(input.weapon.refineIndex, self_eleMasArr)\n)\nconst self_eleDmg_ = Object.fromEntries(allElements.map(ele => [\n  `${ele}_dmg_`,\n  equal(input.charEle, ele, prod(\n    infoMut(sum(partySize, -1, prod(numSameElement, -1)), { asConst: true }),\n    subscript(input.weapon.refineIndex, self_eleDmg_arr, { unit: \"%\" })\n  ))\n]))\n\nconst team_eleMasDisp = equal(input.weapon.key, key,\n  subscript(input.weapon.refineIndex, team_eleMasArr),\n  { ...KeyMap.info(\"eleMas\"), isTeamBuff: true }\n)\nconst team_eleMas = unequal(input.charKey, target.charKey, team_eleMasDisp)\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas: self_eleMas,\n    ...self_eleDmg_\n  },\n  teamBuff: {\n    premod: {\n      eleMas: team_eleMas\n    }\n  }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: self_eleMas\n    },\n    ...Object.values(self_eleDmg_).map(node => ({ node }))\n    ]\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\n    teamBuff: true,\n    fields: [{\n      node: team_eleMasDisp\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackcliffAgate\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterDefeatEnemy\"),\n    states: Object.fromEntries(opponentsDefeated.map(c => [c, {\n      name: st(\"stack\", { count: c }),\n      fields: [{\n        node: atk_,\n      }, {\n        text: stg(\"duration\"),\n        value: 30,\n        unit: \"s\"\n      }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"DodocoTales\"\nconst data_gen = data_gen_json as WeaponData\n\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\nconst atkInc = [0.08, 0.10, 0.12, 0.14, 0.16]\n\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    charged_dmg_,\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNormal,\n    path: condNormalPath,\n    name: st(\"hitOp.normal\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: charged_dmg_\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      }\n    }\n  }, {\n    value: condCharged,\n    path: condChargedPath,\n    name: st(\"hitOp.charged\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EmeraldOrb\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"elementalReaction.hydro\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EverlastingMoonglow\"\nconst data_gen = data_gen_json as WeaponData\n\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\nconst [, trm] = trans(\"weapon\", key)\nconst normal_dmgInc = equal(input.weapon.key, key,\n  prod(subscript(input.weapon.refineIndex, hp_conv, { unit: \"%\" }), input.premod.hp))\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\n    heal_\n  }\n}, {\n  normal_dmgInc\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: heal_\n    }, {\n      text: trm(\"name\"),\n      node: normal_dmgInc,\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EyeOfPerception\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { unit: \"%\" }), input.premod.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmg_: dmg\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: infoMut(dmg, { name: st(\"dmg\") }) }],\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FavoniusCodex\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"Frostbearer\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\nconst dmgAoe = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst dmgOnCryoOp = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\n\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  dmgAoe,\n  dmgOnCryoOp\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(dmgAoe, { name: WeaponSheet.trm(key)(\"aoeDmg\") }),\n    }, {\n      node: infoMut(dmgOnCryoOp, { name: WeaponSheet.trm(key)(\"cryoAffectedDmg\") }),\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, percent, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"FruitOfFulfillment\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst eleMasArr = [24, 27, 30, 33, 36]\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\nconst stacksArr = range(1, 5)\nconst eleMas = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\n  stacks,\n  prod(\n    subscript(input.weapon.refineIndex, eleMasArr),\n    stacks\n  )\n])), naught)\n\nconst atk_ = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\n  stacks,\n  prod(\n    percent(-0.05),\n    stacks\n  )\n])), naught)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    eleMas,\n    atk_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    path: condStacksPath,\n    value: condStacks,\n    name: trm(\"stackName\"),\n    states: Object.fromEntries(stacksArr.map(stack => [\n      stack,\n      {\n        name: st(\"stack\", { count: stack }),\n        fields: [{\n          node: eleMas,\n        }, {\n          node: atk_\n        }]\n      }\n    ]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport ColorText from '../../../../Components/ColoredText'\nimport { input, target } from '../../../../Formula'\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"HakushinRing\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\n\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\nconst anemo_dmg_disp = equal(\"anemo\", condPassive, eleDmg)\nconst cryo_dmg_disp = equal(\"cryo\", condPassive, eleDmg)\nconst geo_dmg_disp = equal(\"geo\", condPassive, eleDmg)\nconst hydro_dmg_disp = equal(\"hydro\", condPassive, eleDmg)\nconst pyro_dmg_disp = equal(\"pyro\", condPassive, eleDmg)\nconst dendro_dmg_disp = equal(\"dendro\", condPassive, eleDmg)\nconst anemo_dmg_ = equal(\"anemo\", target.charEle, anemo_dmg_disp)\nconst cryo_dmg_ = equal(\"cryo\", target.charEle, cryo_dmg_disp)\nconst geo_dmg_ = equal(\"geo\", target.charEle, geo_dmg_disp)\nconst hydro_dmg_ = equal(\"hydro\", target.charEle, hydro_dmg_disp)\nconst pyro_dmg_ = equal(\"pyro\", target.charEle, pyro_dmg_disp)\nconst dendro_dmg_ = equal(\"dendro\", target.charEle, dendro_dmg_disp)\n\nconst electro_dmg_disp = unequal(condPassive, undefined, eleDmg)\nconst electro_dmg_ = equal(\"electro\", target.charEle, electro_dmg_disp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      anemo_dmg_,\n      cryo_dmg_,\n      electro_dmg_,\n      geo_dmg_,\n      hydro_dmg_,\n      pyro_dmg_,\n      dendro_dmg_,\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"elementalReaction.electro\"),\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      anemo: {\n        name: <ColorText color=\"swirl\">{stg(\"reaction.swirl\")}</ColorText>,\n        fields: [{\n          node: infoMut(anemo_dmg_disp, { ...KeyMap.info(\"anemo_dmg_\"), isTeamBuff: true }),\n        }, {\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      cryo: {\n        name: <ColorText color=\"superconduct\">{stg(\"reaction.superconduct\")}</ColorText>,\n        fields: [{\n          node: infoMut(cryo_dmg_disp, { ...KeyMap.info(\"cryo_dmg_\"), isTeamBuff: true }),\n        }, {\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      geo: {\n        name: <ColorText color=\"crystallize\">{stg(\"reaction.crystallize\")}</ColorText>,\n        fields: [{\n          node: infoMut(geo_dmg_disp, { ...KeyMap.info(\"geo_dmg_\"), isTeamBuff: true }),\n        }, {\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      pyro: {\n        name: <ColorText color=\"overloaded\">{stg(\"reaction.overloaded\")}</ColorText>,\n        fields: [{\n          node: infoMut(pyro_dmg_disp, { ...KeyMap.info(\"pyro_dmg_\"), isTeamBuff: true }),\n        }, {\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      hydro: {\n        name: <ColorText color=\"electrocharged\">{stg(\"reaction.electrocharged\")}</ColorText>,\n        fields: [{\n          node: infoMut(hydro_dmg_disp, { ...KeyMap.info(\"hydro_dmg_\"), isTeamBuff: true }),\n        }, {\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      },\n      dendro: {\n        name: <ColorText color=\"aggravate\">{stg(\"reaction.aggravate\")}</ColorText>,\n        fields: [{\n          node: infoMut(dendro_dmg_disp, { ...KeyMap.info(\"dendro_dmg_\"), isTeamBuff: true }),\n        }, {\n          node: infoMut(electro_dmg_disp, { ...KeyMap.info(\"electro_dmg_\"), isTeamBuff: true }),\n        }, {\n          text: stg(\"duration\"),\n          value: 6,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\nimport KeyMap from '../../../../KeyMap'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KagurasVerity\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\nconst totems = range(1, 3)\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst skill_dmg_s = totems.map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), KeyMap.info(\"skill_dmg_\")))\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_: sum(...skill_dmg_s),\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNode,\n    path: condPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterUse.skill\"),\n    states:\n      Object.fromEntries(totems.map(i => [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: skill_dmg_s[i - 1]\n        },\n        ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))]\n      }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\nconst data_gen = data_gen_json as WeaponData\nconst ele_dmg_s = [0.08, 0.10, 0.12, 0.14, 0.16]\n\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\n\nconst moveSPD_ = percent(0.1)\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s, { unit: \"%\" })\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\n}, naught)]))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    moveSPD_,\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{ node: moveSPD_ }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"activeCharField\"),\n    states: objectKeyMap(range(1, 4), i => ({\n      name: st(\"seconds\", { count: i * 4 }),\n      fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\n    }))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MagicGuide\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: all_dmg_,\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MappaMare\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\n\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\n}, naught)])\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: eleDmgs\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: trm(\"condName\"),\n    states: objectKeyMap(range(1, 2), i => ({\n      name: st(\"stack\", { count: i }),\n      fields: [...Object.values(eleDmgs).map(node => ({ node })), {\n        text: stg(\"duration\"),\n        value: 10,\n        unit: \"s\"\n      }]\n    }))\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"MemoryOfDust\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\n\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\n\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\n\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\nconst atkStacks = prod(\n  sum(1, equal(condWithShield, \"protected\", 1)),\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\n    [i, prod(atkInc, i)])), naught)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    shield_,\n    atk_: atkStacks\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: shield_\n    }],\n  }, {\n    value: condPassive,\n    path: condPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hits\"),\n    states: Object.fromEntries(range(1, 5).map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n          node: atkStacks\n        }, {\n          text: stg(\"duration\"),\n          value: 8,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condWithShield,\n    path: condWithShieldPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"protectedByShield\"),\n    states: {\n      protected: {\n        fields: [{\n          text: trm(\"atkEffInc\"),\n          value: 100,\n          unit: \"%\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"OathswornEye\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\n\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    enerRech_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condSkillBurst,\n    path: condSkillBurstPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"afterUse.skill\"),\n    states: {\n      skillBurst: {\n        fields: [{\n          node: enerRech_\n        }]\n      },\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"OtherworldlyStory\"\nconst data_gen = data_gen_json as WeaponData\n\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\nconst heal = equal(input.weapon.key, key,\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { unit: \"%\" }), input.total.hp)))\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" })\n    }]\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PocketGrimoire\"\nconst data_gen = data_gen_json as WeaponData\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customHealNode } from '../../../Characters/dataUtil'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"PrototypeAmber\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\n\nconst heal = equal(input.weapon.key, key,\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { unit: \"%\" }), input.total.hp)))\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterUse.burst\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{ node: infoMut(heal, { name: stg(\"healing\"), variant: \"heal\" }) }]\n      }\n    }\n  }]\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"RoyalGrimoire\"\nconst data_gen = data_gen_json as WeaponData\n\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { unit: \"%\" }), i)), naught)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    critRate_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condStack,\n    path: condStackPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"opponentsDamaged\"),\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\n      name: st(\"stack\", { count: i }),\n      fields: [{ node: critRate_ }]\n    }]))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SacrificialFragments\"\nconst data_gen = data_gen_json as WeaponData\n\n\nconst data = dataObjForWeaponSheet(key, data_gen)\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SkywardAtlas\"\nconst data_gen = data_gen_json as WeaponData\n\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\n\nconst dmg = equal(input.weapon.key, key,\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { unit: \"%\" }), input.total.atk), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  }))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\n  }\n}, { dmg })\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\n      {\n        node: infoMut(dmg, { name: st(\"dmg\") }),\n      }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SolarPearl\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\n\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\nconst burst_dmg_ = { ...skill_dmg_ }\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_,\n    normal_dmg_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condNormal,\n    path: condNormalPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.normal\"),\n    states: {\n      normal: {\n        fields: [{\n          node: skill_dmg_\n        }, {\n          node: burst_dmg_\n        }]\n      }\n    }\n  }, {\n    value: condSkillBurst,\n    path: condSkillBurstPath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: st(\"hitOp.skillOrBurst\"),\n    states: {\n      skillBurst: {\n        fields: [{\n          node: normal_dmg_\n        }]\n      },\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"TheWidsith\"\nconst data_gen = data_gen_json as WeaponData\nconst [tr, trm] = trans(\"weapon\", key)\n\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\n\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\nconst eleBonus_ = Object.fromEntries(allElements.map(\n  ele => [ele, equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))]\n))\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\n    eleMas\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    name: tr(\"passiveName\"),\n    states: {\n      aria: {\n        name: trm(\"aria\"),\n        fields: [\n          ...allElements.map(ele => ({ node: eleBonus_[ele] }))\n        ,{\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      },\n      interlude: {\n        name: trm(\"interlude\"),\n        fields: [{\n          node: eleMas\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      },\n      recitative: {\n        name: trm(\"recitative\"),\n        fields: [{\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input, target } from '../../../../Formula'\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\n\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\nconst atk_Disp = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc))\nconst atk_ = unequal(input.activeCharKey, input.charKey, // Don't apply to wielding char\n  equal(input.activeCharKey, target.charKey, atk_Disp) // Only apply to active char\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  teamBuff: {\n    premod: {\n      atk_\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: trm('condName'),\n    canShow: unequal(input.activeCharKey, input.charKey, 1),\n    teamBuff: true,\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: infoMut(atk_Disp, KeyMap.info(\"atk_\"))\n        }, {\n          text: stg(\"duration\"),\n          value: 10,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, lookup, min, naught, prod, subscript, sum } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond, st, stg } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TulaytullahsRemembrance\"\nconst data_gen = data_gen_json as WeaponData\nconst atkSPD_arr = [0.1, 0.125, 0.15, 0.175, 0.2]\nconst time_normal_dmg_arr = [0.048, 0.06, 0.072, 0.084, 0.096]\nconst time_normal_dmg_stacksArr = range(1, 12)\nconst hit_normal_dmg_arr = [0.096, 0.12, 0.144, 0.168,  0.192]\nconst hit_normal_dmg_stacksArr = range(1, 5) // Max stacks before we hit the normal dmg max\nconst max_normal_dmg_arr = [0.48, 0.6, 0.72, 0.84, 0.96]\n\nconst atkSPD_ = equal(input.weapon.key, key, subscript(input.weapon.refineIndex, atkSPD_arr))\n\nconst [condTimePassivePath, condTimePassive] = cond(key, \"timePassive\")\nconst time_normal_dmg_ = equal(input.weapon.key, key, lookup(condTimePassive, Object.fromEntries(time_normal_dmg_stacksArr.map(time => [\n  time,\n  prod(time, subscript(input.weapon.refineIndex, time_normal_dmg_arr, { unit: \"%\" }))\n])), naught, KeyMap.info(\"normal_dmg_\")))\n\nconst [condHitPassivePath, condHitPassive] = cond(key, \"hitPassive\")\nconst hit_normal_dmg_ = equal(input.weapon.key, key, lookup(condHitPassive, Object.fromEntries(hit_normal_dmg_stacksArr.map(hit => [\n  hit,\n  prod(hit, subscript(input.weapon.refineIndex, hit_normal_dmg_arr, { unit: \"%\" }))\n])), naught, KeyMap.info(\"normal_dmg_\")))\n\nconst finalNormal_dmg_ = min(\n  subscript(input.weapon.refineIndex, max_normal_dmg_arr, { unit: \"%\" }),\n  sum(time_normal_dmg_, hit_normal_dmg_)\n)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atkSPD_,\n    normal_dmg_: finalNormal_dmg_\n  },\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\n    fields: [{\n      node: atkSPD_\n    }],\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    fields: [{\n      node: finalNormal_dmg_\n    }],\n  }, {\n    value: condTimePassive,\n    path: condTimePassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"afterUse.skill\"),\n    states: Object.fromEntries(time_normal_dmg_stacksArr.map(i =>\n      [i, {\n        name: st(\"seconds\", { count: i }),\n        fields: [{\n        //   node: time_normal_dmg_\n        // }, {\n          text: stg(\"duration\"),\n          value: 14,\n          unit: \"s\"\n        }]\n      }]\n    )),\n  }, {\n    value: condHitPassive,\n    path: condHitPassivePath,\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\n    name: st(\"hitOp.normal\"),\n    states: Object.fromEntries(hit_normal_dmg_stacksArr.map(i =>\n      [i, {\n        name: st(\"stack\", { count: i }),\n        fields: [{\n        //   node: hit_normal_dmg_,\n        // }, {\n          text: stg(\"cd\"),\n          value: 0.3,\n          unit: \"s\",\n          fixed: 1\n        }]\n      }]\n    ))\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"TwinNephrite\"\nconst data_gen = data_gen_json as WeaponData\n\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\n\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    moveSPD_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterDefeatEnemy\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          node: moveSPD_\n        }, {\n          text: stg(\"duration\"),\n          value: 15,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WanderingEvenstar\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\nconst atkArr = [0.24, 0.3, 0.36, 0.42, 0.48]\nconst selfAtk = equal(input.weapon.key, key, equal(\"on\", condPassive, prod(\n  subscript(input.weapon.refineIndex, atkArr, { unit: \"%\" }),\n  input.premod.eleMas\n)))\nconst teamAtkDisp = equal(input.weapon.key, key, prod(percent(0.3), selfAtk))\nconst teamAtk = unequal(input.activeCharKey, input.charKey, teamAtkDisp)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  total: {\n    atk: selfAtk\n  },\n  teamBuff: {\n    total: {\n      atk: teamAtk\n    }\n  }\n}, {\n  selfAtk,\n  teamAtkDisp\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    teamBuff: true,\n    name: trm(\"condName\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: selfAtk\n        }, {\n          text: stg(\"duration\"),\n          value: 12,\n          unit: \"s\"\n        }]\n      }\n    }\n  }, {\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\n    teamBuff: true,\n    canShow: equal(condPassive, \"on\", 1),\n    fields: [{\n      node: infoMut(teamAtkDisp, { ...KeyMap.info(\"atk\"), isTeamBuff: true }),\n    }, {\n      text: stg(\"duration\"),\n      value: 12,\n      unit: \"s\"\n    }]\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, stg, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"WineAndSong\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\n\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    value: condPassive,\n    path: condPassivePath,\n    name: st(\"afterSprint\"),\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\n    states: {\n      on: {\n        fields: [{\n          node: atk_\n        }, {\n          text: stg(\"duration\"),\n          value: 5,\n          unit: \"s\"\n        }]\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponCatalystKey } from '../../../Types/consts'\nimport WeaponSheet from '../WeaponSheet'\nimport ApprenticesNotes from './ApprenticesNotes'\nimport AThousandFloatingDreams from './AThousandFloatingDreams'\nimport BlackcliffAgate from './BlackcliffAgate'\nimport DodocoTales from './DodocoTales'\nimport EmeraldOrb from './EmeraldOrb'\nimport EverlastingMoonglow from './EverlastingMoonglow'\nimport EyeOfPerception from './EyeOfPerception'\nimport FavoniusCodex from './FavoniusCodex'\nimport Frostbearer from './Frostbearer'\nimport FruitOfFulfillment from './FruitOfFulfillment'\nimport HakushinRing from './HakushinRing'\nimport KagurasVerity from './KagurasVerity'\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\nimport MagicGuide from './MagicGuide'\nimport MappaMare from './MappaMare'\nimport MemoryOfDust from './MemoryOfDust'\nimport OathswornEye from './OathswornEye'\nimport OtherworldlyStory from './OtherworldlyStory'\nimport PocketGrimoire from './PocketGrimoire'\nimport PrototypeAmber from './PrototypeAmber'\nimport RoyalGrimoire from './RoyalGrimoire'\nimport SacrificialFragments from './SacrificialFragments'\nimport SkywardAtlas from './SkywardAtlas'\nimport SolarPearl from './SolarPearl'\nimport TheWidsith from './TheWidsith'\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\nimport TulaytullahsRemembrance from './TulaytullahsRemembrance'\nimport TwinNephrite from './TwinNephrite'\nimport WanderingEvenstar from './WanderingEvenstar'\nimport WineAndSong from './WineAndSong'\nconst catalyst: Record<WeaponCatalystKey, WeaponSheet> = {\n  ApprenticesNotes,\n  AThousandFloatingDreams,\n  BlackcliffAgate,\n  DodocoTales,\n  EmeraldOrb,\n  EverlastingMoonglow,\n  EyeOfPerception,\n  FavoniusCodex,\n  Frostbearer,\n  FruitOfFulfillment,\n  HakushinRing,\n  KagurasVerity,\n  LostPrayerToTheSacredWinds,\n  MagicGuide,\n  MappaMare,\n  MemoryOfDust,\n  OathswornEye,\n  OtherworldlyStory,\n  PocketGrimoire,\n  PrototypeAmber,\n  RoyalGrimoire,\n  SacrificialFragments,\n  SkywardAtlas,\n  SolarPearl,\n  TheWidsith,\n  ThrillingTalesOfDragonSlayers,\n  TulaytullahsRemembrance,\n  TwinNephrite,\n  WanderingEvenstar,\n  WineAndSong,\n} as const\nexport default catalyst\n","import claymore from './Claymore'\nimport sword from './Sword'\nimport polearm from './Polearm'\nimport bow from './Bow'\nimport { WeaponKey } from '../../Types/consts'\nimport catalyst from './Catalyst'\nimport WeaponSheet from './WeaponSheet'\n\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\n  ...sword,\n  ...claymore,\n  ...polearm,\n  ...bow,\n  ...catalyst\n} as const\nexport default WeaponData\n"],"names":["crystallizeMulti1","subscript","input","crystallizeLevelMultipliers","KeyMap","crystallizeElemas","prod","frac","crystallizeHit","infoMut","sum","one","pivot","transMulti1","transformativeReactionLevelMultipliers","transMulti2","trans","objectKeyMap","Object","keys","transformativeReactions","reaction","multi","resist","canCrit","constant","lookup","hit","critHit","avgHit","max","min","naught","info","NaN","swirl","ele","base","res","includes","data","infusionReactions","overloaded","equal","infusionNode","electrocharged","superconduct","burning","bloom","burgeon","reactions","anemo","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","cryo","hydroSwirl","hydro","shattered","hyperbloom","geo","crystallize","fromEntries","absorbableEle","e","percent","dendro","charCurves","objectMap","_charCurves","value","values","commonBasic","key","inferredHitEle","stringPrio","undefined","sword","claymore","polearm","catalyst","getTalentType","move","customDmgNode","additional","mergeData","customShieldNode","shieldNode","customHealNode","healInc","healNode","dmgNode","lvlMultiplier","specialMultiplier","talentType","unit","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","variant","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","length","result","prefix","asConst","endsWith","slice","Error","special","allMainStatKeys","inferInfoMut","weaponCurves","entries","_weaponCurves","dataObjForWeaponSheet","displayWeapon","total","weapon","type","mainStat","subStat","merging","mainStatNode","ascension","addStats","main","substatNode","sub","data_gen","data_gen_json","trm","cond","condPassivePath","condPassive","energyRange","range","i","ratio","burst_dmg_","sheet","icon","iconAwaken","document","path","header","headerTemplate","st","name","states","toString","fields","node","WeaponSheet","opponentsDefeated","atk_","c","count","text","stg","all_dmg_","on","dmg","charged_dmg_","eleMas_disp","eleMas","target","skill_dmg_","critRate_","atkSelf","atkTeamDisp","atkTeam","unequal","atk","canShow","isTeamBuff","def_","normal_dmgInc","charged_dmgInc","condStackPath","condStack","crit_","takeDMG_s","all_dmg_stack","get","bonusInc","dmgAoe","dmgOnCryoOp","atkTeam_","atkSPD_","shield","condWithShieldPath","condWithShield","protected","shield_","atkInc","atkStacks","condPath","condNode","heal","Akuoumaru","BlackcliffSlasher","BloodtaintedGreatsword","DebateClub","FavoniusGreatsword","FerrousShadow","ForestRegalia","KatsuragikiriNagamasa","LithicBlade","LuxuriousSeaLord","MakhairaAquamarine","OldMercsPal","PrototypeArchaic","Rainslasher","RedhornStonethresher","RoyalGreatsword","SacrificialGreatsword","SerpentSpine","SkyriderGreatsword","SkywardPride","SnowTombedStarsilver","SongOfBrokenPines","TheBell","TheUnforged","WasterGreatsword","Whiteblind","WhiteIronGreatsword","WolfsGravestone","addProps","skill_dmgInc","skill_critRate_","cd_Src","dmg_","normal_dmg_","plunging_dmg_","passiveRefine","stack_normal_dmg_","passive_dmg_","allElements","eleDmgDealtStack","selfEmSrc","stacksArr","hp_","condAfterSkillStacksPath","condAfterSkillStacks","selfEleMas","stack","fixed","teamEleMas","stacks","stacksRefine","stacks_dmg_","allEle_dmg_","parseInt","moveSPD_","autoSrc","selfEnerRech_","teamEnerRech_disp","teamEnerRech_","enerRech_","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","KagotsurubeIsshin","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","ToukabouShigure","FreedomSworn","HaranGeppakuFutsu","HarbingerOfDawn","IronSting","KeyOfKhajNisut","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SapwoodBlade","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","XiphosMoonlight","tr","dmg_Nodes","compareEq","atkDefInc","atk_disp","dmgInc","atk1","atk2","atk2_","condStacksPath","condStacks","stacksAttArr","baseAtk","stacksAtk","burst_critRate_","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","MissiveWindspear","Moonpiercer","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","StaffOfTheScarletSands","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","base_hp_","cond_dmg_","atk_s","atkSPD_s","eleMas2","condStatePath","condState","state_dmg_dict","evengleam","afterglow","dawnblaze","state_dmg_","state","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","allEle_dmg_arr","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","dmg_arr","normal_dmg_inc","charged_dmg_inc","normal_dmg_dec","charged_dmg_dec","refinementVals","bow","AlleyHunter","AmosBow","AquaSimulacra","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FadingTwilight","FavoniusWarbow","Hamayumi","HuntersBow","HuntersPath","KingsSquire","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","EndOfTheLine","WindblumeOde","self_eleDmg_arr","numSameElement","partySize","self_eleMas","self_eleDmg_","team_eleMasDisp","team_eleMas","condChargedPath","condCharged","heal_","eleMasArr","eleDmg","anemo_dmg_disp","cryo_dmg_disp","geo_dmg_disp","hydro_dmg_disp","pyro_dmg_disp","dendro_dmg_disp","anemo_dmg_","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","dendro_dmg_","electro_dmg_disp","electro_dmg_","color","totems","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","objectKeyValueMap","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","dmgBonus","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","atk_Disp","time_normal_dmg_arr","time_normal_dmg_stacksArr","hit_normal_dmg_arr","hit_normal_dmg_stacksArr","condTimePassivePath","condTimePassive","time_normal_dmg_","time","condHitPassivePath","condHitPassive","hit_normal_dmg_","finalNormal_dmg_","refineInc","selfAtk","teamAtkDisp","ApprenticesNotes","AThousandFloatingDreams","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","FruitOfFulfillment","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TulaytullahsRemembrance","TwinNephrite","WanderingEvenstar","WineAndSong"],"sourceRoot":""}