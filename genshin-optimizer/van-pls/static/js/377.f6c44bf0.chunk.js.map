{"version":3,"file":"static/js/377.f6c44bf0.chunk.js","mappings":"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","sources":["Components/SortByButton.tsx","Components/SolidColoredToggleButton.tsx","Components/ToggleButton/ElementToggle.tsx","Components/ToggleButton/WeaponToggle.tsx","PageCharacter/index.tsx","../node_modules/@mui/icons-material/esm/FactCheck.js","../node_modules/@mui/icons-material/esm/FavoriteBorder.js","../node_modules/@mui/icons-material/esm/Science.js","../node_modules/@mui/icons-material/esm/TrendingUp.js"],"sourcesContent":["import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem, Box } from \"@mui/material\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\n\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\nexport default function SortByButton<Key extends string>({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: ButtonGroupProps & {\n  sortKeys: Key[]\n  value: Key\n  onChange: (value: Key) => void\n  ascending: boolean\n  onChangeAsc: (value: boolean) => void\n}) {\n  const { t } = useTranslation(\"ui\")\n  return <Box display=\"flex\" alignItems=\"center\" gap={1}>\n    <Trans t={t} i18nKey={t(\"sortBy\") as any}>Sort by: </Trans>\n    <ButtonGroup {...props} >\n      <DropdownButton title={<Trans t={t} i18nKey={t(`sortMap.${value}`) as any}>{{ value: t(`sortMap.${value}`) }}</Trans>}>\n        {sortKeys.map(key =>\n          <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\n      </DropdownButton>\n      <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\n        {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\n      </Button>\n    </ButtonGroup>\n  </Box>\n}\n","import { ButtonProps, ToggleButton, ToggleButtonProps, styled } from \"@mui/material\";\n\ntype SolidColoredToggleButtonPartial = {\n  baseColor?: ButtonProps[\"color\"];\n  selectedColor?: ButtonProps[\"color\"];\n}\nexport type SolidColoredToggleButtonProps = SolidColoredToggleButtonPartial & ToggleButtonProps\n\n\nconst SolidColoredToggleButton = styled(ToggleButton, {\n  shouldForwardProp: (prop) => prop !== \"baseColor\" && prop !== \"selectedColor\"\n})<SolidColoredToggleButtonPartial>(({ theme, baseColor = \"secondary\", selectedColor = \"success\" }) => ({\n  '&': {\n    backgroundColor: theme.palette[baseColor].main,\n    color: theme.palette[baseColor].contrastText,\n  },\n  '&:hover': {\n    backgroundColor: theme.palette[baseColor].dark,\n  },\n  '&.Mui-selected': {\n    backgroundColor: theme.palette[selectedColor].main,\n    color: theme.palette[selectedColor].contrastText,\n  },\n  '&.Mui-selected:hover': {\n    backgroundColor: theme.palette[selectedColor].dark,\n  },\n  '&.Mui-disabled': {\n    backgroundColor: theme.palette[baseColor].dark,\n  },\n  '&.Mui-selected.Mui-disabled': {\n    backgroundColor: theme.palette[selectedColor].dark,\n  },\n}));\n\nexport default SolidColoredToggleButton\n","import { Box, ToggleButtonGroup } from \"@mui/material\";\nimport { allElements, ElementKey } from \"../../Types/consts\";\nimport { handleMultiSelect } from \"../../Util/MultiSelect\";\nimport SolidColoredToggleButton from \"../SolidColoredToggleButton\";\nimport { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\nimport StatIcon from \"../StatIcon\";\ntype ElementToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\n  onChange: (value: ElementKey[]) => void\n  value: ElementKey[]\n}\nconst elementHandler = handleMultiSelect([...allElements])\nexport default function ElementToggle({ value, onChange, ...props }: ElementToggleProps) {\n  return <ToggleButtonGroup exclusive value={value} {...props}>\n    {allElements.map(ele => <SolidColoredToggleButton key={ele} value={ele} selectedColor={ele} onClick={() => onChange(elementHandler(value, ele))}>\n      <Box sx={{ fontSize: \"2em\", lineHeight: 1 }}>{StatIcon[ele]}</Box>\n    </SolidColoredToggleButton>)}\n  </ToggleButtonGroup>\n}\n","import { ToggleButton } from \"@mui/material\";\nimport Assets from \"../../Assets/Assets\";\nimport { allWeaponTypeKeys, WeaponTypeKey } from \"../../Types/consts\";\nimport { handleMultiSelect } from \"../../Util/MultiSelect\";\nimport ImgIcon from \"../Image/ImgIcon\";\nimport SolidToggleButtonGroup, { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\ntype WeaponToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\n  onChange: (value: WeaponTypeKey[]) => void\n  value: WeaponTypeKey[]\n}\nconst weaponTypeHandler = handleMultiSelect([...allWeaponTypeKeys])\nexport default function WeaponToggle({ value, onChange, ...props }: WeaponToggleProps) {\n  return <SolidToggleButtonGroup exclusive value={value} {...props}>\n    {allWeaponTypeKeys.map(wt => <ToggleButton key={wt} value={wt} onClick={() => onChange(weaponTypeHandler(value, wt))}>\n      <ImgIcon src={Assets.weaponTypes?.[wt]} size={2} />\n    </ToggleButton>)}\n  </SolidToggleButtonGroup>\n}\n","import { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Add, DeleteForever, FactCheck, Groups, Science, TrendingUp } from '@mui/icons-material';\nimport { Box, Button, CardContent, Divider, Grid, IconButton, Pagination, Skeleton, TextField, Typography } from '@mui/material';\nimport React, { ChangeEvent, Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useRef, useState } from 'react';\nimport ReactGA from 'react-ga4';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\nimport CardDark from '../Components/Card/CardDark';\nimport CharacterCard from '../Components/Character/CharacterCard';\nimport SortByButton from '../Components/SortByButton';\nimport ElementToggle from '../Components/ToggleButton/ElementToggle';\nimport WeaponToggle from '../Components/ToggleButton/WeaponToggle';\nimport CharacterSheet from '../Data/Characters/CharacterSheet';\nimport { DatabaseContext } from '../Database/Database';\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\nimport useDBMeta from '../ReactHooks/useDBMeta';\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\nimport useMediaQueryUp from '../ReactHooks/useMediaQueryUp';\nimport usePromise from '../ReactHooks/usePromise';\nimport { CharacterKey, charKeyToCharName } from '../Types/consts';\nimport { characterFilterConfigs, characterSortConfigs, characterSortMap } from '../Util/CharacterSort';\nimport { filterFunction, sortFunction } from '../Util/SortByFilters';\nimport { clamp } from '../Util/Util';\nconst CharacterSelectionModal = React.lazy(() => import('./CharacterSelectionModal'))\nconst columns = { xs: 1, sm: 2, md: 3, lg: 4, xl: 4 }\nconst numToShowMap = { xs: 6, sm: 8, md: 12, lg: 16, xl: 16 }\nconst sortKeys = Object.keys(characterSortMap)\n\nexport default function PageCharacter() {\n  const { t } = useTranslation([\"page_character\", \"charNames_gen\"])\n  const { database } = useContext(DatabaseContext)\n  const [state, setState] = useState(() => database.displayCharacter.get())\n  useEffect(() => database.displayCharacter.follow((r, s) => setState(s)), [database, setState])\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const deferredSearchTerm = useDeferredValue(searchTerm)\n  const invScrollRef = useRef<HTMLDivElement>(null)\n  const setPage = useCallback(\n    (_: ChangeEvent<unknown>, value: number) => {\n      invScrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\n      database.displayCharacter.set({ pageIndex: value - 1 });\n    },\n    [database, invScrollRef]\n  )\n\n  const brPt = useMediaQueryUp()\n  const maxNumToDisplay = numToShowMap[brPt]\n\n  const [newCharacter, setnewCharacter] = useState(false)\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  // Set follow, should run only once\n  useEffect(() => {\n    ReactGA.send({ hitType: \"pageview\", page: '/characters' })\n    return database.chars.followAny((k, r) => (r === \"new\" || r === \"remove\") && forceUpdate())\n  }, [forceUpdate, database])\n\n  // character favorite updater\n  useEffect(() => database.charMeta.followAny(s => forceUpdate()), [forceUpdate, database])\n\n  const characterSheets = usePromise(() => CharacterSheet.getAll, [])\n  const { gender } = useDBMeta()\n  const deleteCharacter = useCallback(async (cKey: CharacterKey) => {\n    const chararcterSheet = await CharacterSheet.get(cKey, gender)\n    let name = chararcterSheet?.name\n    // Use translated string\n    if (typeof name === \"object\")\n      name = t(`charNames_gen:${charKeyToCharName(cKey, gender)}`)\n\n    if (!window.confirm(t(\"removeCharacter\", { value: name }))) return\n    database.chars.remove(cKey)\n  }, [database, gender, t])\n\n  const editCharacter = useCharSelectionCallback()\n\n  const navigate = useNavigate()\n\n  const deferredState = useDeferredValue(state)\n  const deferredDbDirty = useDeferredValue(dbDirty)\n  const { charKeyList, totalCharNum } = useMemo(() => {\n    const chars = database.chars.keys\n    const totalCharNum = chars.length\n    if (!characterSheets) return { charKeyList: [], totalCharNum }\n    const { element, weaponType, sortType, ascending } = deferredState\n    const charKeyList = database.chars.keys\n      .filter(filterFunction({ element, weaponType, name: deferredSearchTerm }, characterFilterConfigs(database, characterSheets)))\n      .sort(sortFunction(characterSortMap[sortType] ?? [], ascending, characterSortConfigs(database, characterSheets), [\"new\", \"favorite\"]))\n    return deferredDbDirty && { charKeyList, totalCharNum }\n  },\n    [deferredDbDirty, database, characterSheets, deferredState, deferredSearchTerm])\n\n  const { weaponType, element, sortType, ascending, pageIndex = 0 } = state\n\n  const { charKeyListToShow, numPages, currentPageIndex } = useMemo(() => {\n    const numPages = Math.ceil(charKeyList.length / maxNumToDisplay)\n    const currentPageIndex = clamp(pageIndex, 0, numPages - 1)\n    return { charKeyListToShow: charKeyList.slice(currentPageIndex * maxNumToDisplay, (currentPageIndex + 1) * maxNumToDisplay), numPages, currentPageIndex }\n  }, [charKeyList, pageIndex, maxNumToDisplay])\n\n  const totalShowing = charKeyList.length !== totalCharNum ? `${charKeyList.length}/${totalCharNum}` : `${totalCharNum}`\n\n  return <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n    <Suspense fallback={false}>\n      <CharacterSelectionModal newFirst show={newCharacter} onHide={() => setnewCharacter(false)} onSelect={editCharacter} />\n    </Suspense>\n    <CardDark ref={invScrollRef} ><CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n      <Grid container spacing={1}>\n        <Grid item>\n          <WeaponToggle sx={{ height: \"100%\" }} onChange={weaponType => database.displayCharacter.set({ weaponType })} value={weaponType} size=\"small\" />\n        </Grid>\n        <Grid item>\n          <ElementToggle sx={{ height: \"100%\" }} onChange={element => database.displayCharacter.set({ element })} value={element} size=\"small\" />\n        </Grid>\n        <Grid item flexGrow={1}>\n          <TextField\n            autoFocus\n            value={searchTerm}\n            onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setSearchTerm(e.target.value)}\n            label={t(\"characterName\")}\n            size=\"small\"\n            sx={{ height: \"100%\" }}\n            InputProps={{\n              sx: { height: \"100%\" }\n            }}\n          />\n        </Grid>\n        <Grid item >\n          <SortByButton sx={{ height: \"100%\" }}\n            sortKeys={sortKeys} value={sortType} onChange={sortType => database.displayCharacter.set({ sortType })}\n            ascending={ascending} onChangeAsc={ascending => database.displayCharacter.set({ ascending })} />\n        </Grid>\n      </Grid>\n      <Grid container alignItems=\"flex-end\">\n        <Grid item flexGrow={1}>\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\n        </Grid>\n        <Grid item>\n          <ShowingCharacter numShowing={charKeyListToShow.length} total={totalShowing} t={t} />\n        </Grid>\n      </Grid>\n    </CardContent></CardDark>\n    <Button fullWidth onClick={() => setnewCharacter(true)} color=\"info\" startIcon={<Add />} >{t`addNew`}</Button>\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 5000 }} />}>\n      <Grid container spacing={1} columns={columns}>\n        {charKeyListToShow.map(charKey =>\n          <Grid item key={charKey} xs={1} >\n            <CharacterCard\n              characterKey={charKey}\n              onClick={() => navigate(`${charKey}`)}\n              footer={<><Divider /><Box sx={{ py: 1, px: 2, display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.talent\")}</Typography>}>\n                  <IconButton onClick={() => navigate(`${charKey}/talent`)}>\n                    <FactCheck />\n                  </IconButton>\n                </BootstrapTooltip>\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.teambuffs\")}</Typography>}>\n                  <IconButton onClick={() => navigate(`${charKey}/teambuffs`)} >\n                    <Groups />\n                  </IconButton>\n                </BootstrapTooltip>\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.optimize\")}</Typography>}>\n                  <IconButton onClick={() => navigate(`${charKey}/optimize`)} >\n                    <TrendingUp />\n                  </IconButton>\n                </BootstrapTooltip>\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.theorycraft\")}</Typography>}>\n                  <IconButton onClick={() => navigate(`${charKey}/theorycraft`)} >\n                    <Science />\n                  </IconButton>\n                </BootstrapTooltip>\n                <Divider orientation=\"vertical\" />\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"delete\")}</Typography>}>\n                  <IconButton color=\"error\" onClick={() => deleteCharacter(charKey)}>\n                    <DeleteForever />\n                  </IconButton>\n                </BootstrapTooltip>\n              </Box></>}\n            />\n          </Grid>)}\n      </Grid>\n    </Suspense>\n    {numPages > 1 && <CardDark ><CardContent sx={{ display: \"flex\", gap: 1 }}>\n      <Button onClick={() => setnewCharacter(true)} color=\"info\" sx={{ minWidth: 0 }} ><Typography><FontAwesomeIcon icon={faPlus} className=\"fa-fw\" /></Typography></Button>\n      <Grid container alignItems=\"flex-end\" sx={{ flexGrow: 1 }}>\n        <Grid item flexGrow={1}>\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\n        </Grid>\n        <Grid item>\n          <ShowingCharacter numShowing={charKeyListToShow.length} total={totalShowing} t={t} />\n        </Grid>\n      </Grid>\n    </CardContent></CardDark>}\n  </Box>\n}\nfunction ShowingCharacter({ numShowing, total, t }) {\n  return <Typography color=\"text.secondary\">\n    <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total} >\n      Showing <b>{{ count: numShowing }}</b> out of {{ value: total }} Characters\n    </Trans>\n  </Typography>\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M20 3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM10 17H5v-2h5v2zm0-4H5v-2h5v2zm0-4H5V7h5v2zm4.82 6L12 12.16l1.41-1.41 1.41 1.42L17.99 9l1.42 1.42L14.82 15z\"\n}), 'FactCheck');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z\"\n}), 'FavoriteBorder');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19.8 18.4 14 10.67V6.5l1.35-1.69c.26-.33.03-.81-.39-.81H9.04c-.42 0-.65.48-.39.81L10 6.5v4.17L4.2 18.4c-.49.66-.02 1.6.8 1.6h14c.82 0 1.29-.94.8-1.6z\"\n}), 'Science');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m16 6 2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z\"\n}), 'TrendingUp');"],"names":["SortByButton","sortKeys","value","onChange","ascending","onChangeAsc","props","t","useTranslation","display","alignItems","gap","i18nKey","title","map","key","selected","disabled","onClick","startIcon","icon","faSortAmountDownAlt","faSortAmountUp","className","styled","ToggleButton","shouldForwardProp","prop","theme","baseColor","selectedColor","backgroundColor","palette","main","color","contrastText","dark","elementHandler","handleMultiSelect","allElements","ElementToggle","ToggleButtonGroup","exclusive","ele","Box","sx","fontSize","lineHeight","StatIcon","weaponTypeHandler","allWeaponTypeKeys","WeaponToggle","wt","src","Assets","size","CharacterSelectionModal","React","columns","xs","sm","md","lg","xl","numToShowMap","Object","keys","characterSortMap","PageCharacter","database","useContext","DatabaseContext","useState","displayCharacter","get","state","setState","useEffect","follow","r","s","searchTerm","setSearchTerm","deferredSearchTerm","useDeferredValue","invScrollRef","useRef","setPage","useCallback","_","current","scrollIntoView","behavior","set","pageIndex","brPt","useMediaQueryUp","maxNumToDisplay","newCharacter","setnewCharacter","useForceUpdate","dbDirty","forceUpdate","ReactGA","hitType","page","chars","followAny","k","charMeta","characterSheets","usePromise","CharacterSheet","gender","useDBMeta","deleteCharacter","cKey","chararcterSheet","name","charKeyToCharName","window","confirm","remove","editCharacter","useCharSelectionCallback","navigate","useNavigate","deferredState","deferredDbDirty","useMemo","totalCharNum","length","charKeyList","element","weaponType","sortType","filter","filterFunction","characterFilterConfigs","sort","sortFunction","characterSortConfigs","numPages","Math","ceil","currentPageIndex","clamp","charKeyListToShow","slice","totalShowing","my","flexDirection","Suspense","fallback","newFirst","show","onHide","onSelect","ref","container","spacing","item","height","flexGrow","autoFocus","e","target","label","InputProps","count","ShowingCharacter","numShowing","total","fullWidth","variant","width","minHeight","charKey","characterKey","footer","py","px","justifyContent","placement","orientation","minWidth","faPlus","createSvgIcon","_jsx","fillRule","d"],"sourceRoot":""}