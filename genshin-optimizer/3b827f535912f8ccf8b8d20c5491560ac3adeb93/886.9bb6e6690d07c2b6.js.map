{"version":3,"file":"886.9bb6e6690d07c2b6.js","mappings":"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","sources":["webpack:///./src/app/Components/Artifact/sortByRarityAndName.tsx","webpack:///./src/app/Components/Artifact/ArtifactRarityDropdown.tsx","webpack:///./src/app/Components/Artifact/ArtifactSlotDropdown.tsx","webpack:///./src/app/Components/CustomNumberTextField.tsx","webpack:///./src/app/ReactHooks/usePromise.tsx","webpack:///./src/app/PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","webpack:///./src/app/PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","webpack:///./src/app/PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","webpack:///./src/app/PageArtifact/ScanningUtil.tsx","webpack:///./src/app/PageArtifact/BorrowManager.ts","webpack:///./src/app/PageArtifact/ArtifactEditor.tsx"],"sourcesContent":["import i18n from \"../../i18n\"\r\nimport { ArtifactRarity, ArtifactSetKey } from \"../../Types/consts\"\r\n\r\nexport default function sortByRarityAndName(a: { key: ArtifactSetKey, grouper: ArtifactRarity }, b: { key: ArtifactSetKey, grouper: ArtifactRarity }) {\r\n  if (a.grouper > b.grouper) {\r\n    return -1\r\n  }\r\n  if (a.grouper < b.grouper) {\r\n    return 1\r\n  }\r\n\r\n  const aName = i18n.t(`artifactNames_gen:${a.key}`)\r\n  const bName = i18n.t(`artifactNames_gen:${b.key}`)\r\n  if (aName < bName) {\r\n    return -1\r\n  }\r\n  if (aName > bName) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n","import { ButtonProps, MenuItem } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ArtifactRarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport { StarsDisplay } from \"../StarDisplay\";\r\n\r\ntype props = ButtonProps & {\r\n  rarity?: ArtifactRarity\r\n  onChange: (rarity: ArtifactRarity) => void\r\n  filter: (ArtifactRarity) => boolean\r\n}\r\n\r\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <DropdownButton\r\n    {...props}\r\n    title={rarity ? <StarsDisplay stars={rarity} inline /> : t`editor.rarity`}\r\n    color={rarity ? \"success\" : \"primary\"}\r\n  >\r\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\r\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\r\n        <StarsDisplay stars={rarity} inline />\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { allSlotKeys, SlotKey } from \"@genshin-optimizer/consts\"\r\nimport { Replay } from \"@mui/icons-material\"\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\r\nimport SlotIcon from \"./SlotIcon\"\r\n\r\ntype ArtifactSlotDropdownProps = ButtonProps & {\r\n  slotKey?: SlotKey | \"\"\r\n  onChange: (slotKey: SlotKey | \"\") => void\r\n  hasUnselect?: boolean\r\n}\r\n\r\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  return <DropdownButton\r\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\r\n    color={slotKey ? \"success\" : \"primary\"}\r\n    startIcon={slotKey ? <SlotIcon slotKey={slotKey} /> : undefined}\r\n    {...props}\r\n  >\r\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        {t`ui:unselect`}\r\n      </ListItemText>\r\n    </MenuItem>}\r\n    {hasUnselect && <Divider />}\r\n    {allSlotKeys.map(key =>\r\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\r\n        <ListItemIcon>\r\n          <SlotIcon slotKey={key} />\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {t(`artifact:slotName:${key}`)}\r\n        </ListItemText>\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { TextField, TextFieldProps } from '@mui/material'\r\nimport { useCallback, useEffect, useState } from 'react'\r\ntype props = TextFieldProps & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <TextField\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    {...props}\r\n  />\r\n}","import { useEffect, useState } from \"react\";\r\n/**\r\n *\r\n * @param promiseFunc\r\n * @param dependencies - Reloads the promise when any of the dependencies are changed. (Using useEffect dependency)\r\n * @param useOld - When the promises are updated, then there is a period of time before the new promise return. useOld uses the previous value without a undefined gap.\r\n * @returns\r\n */\r\nexport default function usePromise<T>(promiseFunc: () => Promise<T> | undefined, dependencies: any[], useOld = true): T | undefined {\r\n  const [res, setRes] = useState<[T] | undefined>(undefined);\r\n  useEffect(() => {\r\n    let pending = true\r\n    //encapsulate `res` in an array `[res]`, because res can sometimes be a function, that can interfere with the `useState` api.\r\n    promiseFunc()?.then(res => pending && setRes([res]), console.error) ?? setRes(undefined)\r\n    return () => {\r\n      pending = false\r\n      !useOld && setRes(undefined)\r\n    }\r\n  }, dependencies)// eslint-disable-line react-hooks/exhaustive-deps\r\n  return res?.[0]\r\n}\r\n","import { Grid, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport InfoTooltip from '../../../Components/InfoTooltip';\r\nimport PercentBadge from '../../../Components/PercentBadge';\r\n\r\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\r\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\r\n  return <CardLight sx={{ py: 1, px: 2 }}>\r\n    <Grid container spacing={1}>\r\n      <Grid item>{t(`editor.${eff}`)}</Grid>\r\n      <Grid item flexGrow={1}>\r\n        <InfoTooltip title={<span>\r\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\r\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\r\n        </span>} />\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <PercentBadge valid={valid} max={900} value={valid ? efficiency : \"ERR\"} />\r\n      </Grid>\r\n    </Grid>\r\n  </CardLight>\r\n}\r\n","import { Box, Button, ButtonGroup, Grid, ListItemIcon, ListItemText, MenuItem, Typography } from '@mui/material';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\r\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\r\nimport PercentBadge from '../../../Components/PercentBadge';\r\nimport SqBadge from '../../../Components/SqBadge';\r\nimport TextButton from '../../../Components/TextButton';\r\nimport Artifact from '../../../Data/Artifacts/Artifact';\r\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\r\nimport KeyMap, { cacheValueString } from '../../../KeyMap';\r\nimport StatIcon from '../../../KeyMap/StatIcon';\r\nimport { allSubstatKeys, ICachedArtifact, ISubstat } from '../../../Types/artifact';\r\nimport { RollColorKey } from '../../../Types/consts';\r\nimport { clamp } from '../../../Util/Util';\r\n\r\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = KeyMap.unit(key), rollNum = rolls.length\r\n\r\n  let error = \"\", rollData: readonly number[] = [], allowedRolls = 0\r\n\r\n  if (artifact) {\r\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\r\n    const rarity = artifact.rarity\r\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  return <CardLight>\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\r\n        <DropdownButton\r\n          startIcon={key ? <StatIcon statKey={key} /> : undefined}\r\n          title={key ? KeyMap.getArtStr(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n          disabled={!artifact}\r\n          color={key ? \"success\" : \"primary\"}\r\n          sx={{ whiteSpace: \"nowrap\" }}>\r\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\r\n          {allSubstatKeys.filter(key => mainStatKey !== key)\r\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\r\n              <ListItemIcon><StatIcon statKey={k} /></ListItemIcon>\r\n              <ListItemText>{KeyMap.getArtStr(k)}</ListItemText>\r\n            </MenuItem>)}\r\n        </DropdownButton>\r\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n          <CustomNumberInput\r\n            float={unit === \"%\"}\r\n            placeholder={t`editor.substat.selectSub`}\r\n            value={key ? value : undefined}\r\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n            disabled={!key}\r\n            error={!!error}\r\n            sx={{\r\n              px: 1,\r\n            }}\r\n            inputProps={{\r\n              sx: { textAlign: \"right\" }\r\n            }}\r\n          />\r\n        </CustomNumberInputButtonGroupWrapper>\r\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\r\n        {rollData.map((v, i) => {\r\n          let newValue = cacheValueString(accurateValue + v, unit)\r\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\r\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>\r\n    </Box>\r\n    <Box sx={{ p: 1, }}>\r\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\r\n        <Grid item>\r\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}` as RollColorKey}>\r\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n          </SqBadge>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          {!!rolls.length && [...rolls].sort().map((val, i) =>\r\n            <Typography component=\"span\" key={`${i}.${val}`} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{cacheValueString(val, unit)}</Typography>)}\r\n        </Grid>\r\n        <Grid item xs=\"auto\" flexShrink={1}>\r\n          <Typography>\r\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\r\n              Efficiency: <PercentBadge valid={true} max={rollNum * 100} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\r\n            </Trans>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>}\r\n\r\n    </Box>\r\n  </CardLight >\r\n}\r\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\r\nimport CardDark from '../../../Components/Card/CardDark';\r\nimport CloseButton from '../../../Components/CloseButton';\r\nimport ModalWrapper from '../../../Components/ModalWrapper';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <ModalWrapper open={modalShow} onClose={hide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={hide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Alert variant=\"outlined\" severity=\"warning\">\r\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\r\n        </Alert>\r\n        <Grid container spacing={1} mt={1}>\r\n          <Grid item xs={8} md={4}>\r\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n          <Grid item xs={12} md={8}>\r\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\r\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\r\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\r\n            <Typography variant=\"h6\">Single artifact</Typography>\r\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\r\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\r\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\r\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\r\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} md={7}>\r\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\r\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\r\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\r\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\r\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\r\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\r\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\r\n          </Grid>\r\n          <Grid item xs={8} md={5}>\r\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={hide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","import { allArtifactSets, allSlotKeys, ArtifactSetKey, Rarity, SlotKey } from '@genshin-optimizer/consts';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport ColorText from '../Components/ColoredText';\r\nimport { getArtSheet } from '../Data/Artifacts';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport { allMainStatKeys, allSubstatKeys, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, ArtifactRarity } from '../Types/consts';\r\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\r\nimport { BorrowManager } from './BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = await createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport type ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\nexport type OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nexport function processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n  // TODO: restore\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    // TODO: restore\r\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (getArtSheet(set).rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return score\r\n  })\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => getArtSheet(setKey).rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => getArtSheet(value).name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{cacheValueString(value.value, KeyMap.unit(value.key))}{KeyMap.unit(value.key)}</>)}</div>)\r\n  }</>\r\n\r\n  const valueStrFunc = (value) => <>{cacheValueString(value, KeyMap.unit(result.mainStatKey))}{KeyMap.unit(result.mainStatKey)}</>\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[]): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), getArtSheet(key).nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  const d = pixels\r\n  let lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      const i = (y * width + x) * 4\r\n      const r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstatKeys.forEach(key => {\r\n      const name = KeyMap.getStr(key)\r\n      const regex = KeyMap.unit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}\r\n","import { allElementsWithPhy, ArtifactSetKey, SlotKey } from '@genshin-optimizer/consts';\r\nimport { artifactAsset } from '@genshin-optimizer/g-assets';\r\nimport { Add, ChevronRight, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\r\nimport HelpIcon from '@mui/icons-material/Help';\r\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Grid, MenuItem, Skeleton, styled, Typography, useMediaQuery, useTheme } from '@mui/material';\r\nimport { ChangeEvent, Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\r\nimport ArtifactSetAutocomplete from '../Components/Artifact/ArtifactSetAutocomplete';\r\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport ModalWrapper from '../Components/ModalWrapper';\r\nimport { StatColoredWithUnit } from '../Components/StatDisplay';\r\nimport { getArtSheet } from '../Data/Artifacts';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { cachedArtifact, validateArtifact } from '../Database/DataManagers/ArtifactData';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport StatIcon from '../KeyMap/StatIcon';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstatKeys, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\r\nimport { ArtifactRarity } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\r\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\r\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\r\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\r\n\r\nconst maxProcessingCount = 3, maxProcessedCount = 16\r\nconst allSubstatFilter = new Set(allSubstatKeys)\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\ninterface IEditorArtifact {\r\n  setKey: ArtifactSetKey,\r\n  slotKey: SlotKey,\r\n  level: number,\r\n  rarity: ArtifactRarity,\r\n  mainStatKey: MainStatKey,\r\n  substats: ISubstat[],\r\n}\r\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\r\n      if (oldIndex === -1 || oldIndex === index)\r\n        state!.substats[index] = substat\r\n      else  // Already in used, swap the items instead\r\n        [state!.substats[index], state!.substats[oldIndex]] =\r\n          [state!.substats[oldIndex], state!.substats[index]]\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nconst InputInvis = styled('input')({\r\n  display: 'none',\r\n});\r\nexport type ArtifactEditorProps = { artifactIdToEdit?: string, cancelEdit: () => void, allowUpload?: boolean, allowEmpty?: boolean, disableSet?: boolean, disableSlot?: boolean }\r\nexport default function ArtifactEditor({ artifactIdToEdit = \"\", cancelEdit, allowUpload = false, allowEmpty = false, disableSet = false, disableSlot = false }: ArtifactEditorProps) {\r\n  const { t } = useTranslation(\"artifact\")\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n\r\n  const [show, setShow] = useState(false)\r\n\r\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\r\n  useEffect(() => database.arts.followAny(setDirtyDatabase), [database, setDirtyDatabase])\r\n\r\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifact = useMemo(() => editorArtifact && validateArtifact(editorArtifact), [editorArtifact])\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(() => firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(() => firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\r\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  const disableEditSlot = !!artifact?.location || disableSlot\r\n\r\n  useEffect(() => {\r\n    if (!artifact && artifactProcessed)\r\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\r\n  }, [artifact, artifactProcessed, artifactDispatch])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const uploadFiles = useCallback((files?: FileList | null) => {\r\n    if (!files) return\r\n    setShow(true)\r\n    dispatchQueue({ type: \"upload\", files: Array.from(files).map(file => ({ file, fileName: file.name })) })\r\n  }, [dispatchQueue, setShow])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: Event) => uploadFiles((e as ClipboardEvent).clipboardData?.files)\r\n    allowUpload && window.addEventListener('paste', pasteFunc);\r\n    return () => {\r\n      if (allowUpload) window.removeEventListener('paste', pasteFunc)\r\n    }\r\n  }, [uploadFiles, allowUpload])\r\n\r\n  const onUpload = useCallback(\r\n    (e: ChangeEvent<HTMLInputElement>) => {\r\n      if (!e.target) return\r\n      uploadFiles(e.target.files);\r\n      e.target.value = \"\" // reset the value so the same file can be uploaded again...\r\n    },\r\n    [uploadFiles],\r\n  )\r\n\r\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\r\n    const databaseArtifact = dirtyDatabase && artifactIdToEdit && database.arts.get(artifactIdToEdit)\r\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\r\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\r\n    const { duplicated, upgraded } = dirtyDatabase && database.arts.findDups(artifact)\r\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\r\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const { artifact: cArtifact, errors } = useMemo(() => {\r\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\r\n    const validated = cachedArtifact(artifact, artifactIdToEdit)\r\n    if (old) {\r\n      validated.artifact.location = old.location\r\n      validated.artifact.exclude = old.exclude\r\n    }\r\n    return validated\r\n  }, [artifact, artifactIdToEdit, old])\r\n\r\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\r\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\r\n  useEffect(() => {\r\n    if (artifactIdToEdit === \"new\") {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"reset\" })\r\n    }\r\n    const databaseArtifact = artifactIdToEdit && dirtyDatabase && database.arts.get(artifactIdToEdit)\r\n    if (databaseArtifact) {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const sheet = artifact ? getArtSheet(artifact.setKey) : undefined\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    dispatchQueue({ type: \"pop\" })\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? getArtSheet(newValue.setKey) : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.rarity)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = !errors.length\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cArtifact ? Artifact.getArtifactEfficiency(cArtifact, allSubstatFilter) : {}\r\n  const preventClosing = processed.length || outstanding.length\r\n  const onClose = useCallback(\r\n    (e) => {\r\n      if (preventClosing) e.preventDefault()\r\n      setShow(false)\r\n      cancelEdit()\r\n    }, [preventClosing, setShow, cancelEdit])\r\n\r\n  const theme = useTheme();\r\n  const grmd = useMediaQuery(theme.breakpoints.up('md'));\r\n\r\n  const element = artifact ? allElementsWithPhy.find(ele => artifact.mainStatKey.includes(ele)) : undefined\r\n  const color = artifact\r\n    ? element ?? \"success\"\r\n    : \"primary\"\r\n\r\n  const updateSetKey = useCallback((setKey: ArtifactSetKey | \"\") => update({ setKey: setKey as ArtifactSetKey }), [update],)\r\n  const setACDisable = useCallback((key: ArtifactSetKey | \"\") => {\r\n    if (key === \"\") return true\r\n    //Disable being able to select any of the prayer set unless the current slotkey is circlet\r\n    if (disableEditSlot && slotKey !== \"circlet\" && (key === \"PrayersForDestiny\" || key === \"PrayersForIllumination\" || key === \"PrayersForWisdom\" || key === \"PrayersToSpringtime\"))\r\n      return true\r\n    return false\r\n  }, [disableEditSlot, slotKey])\r\n\r\n\r\n  return <ModalWrapper open={show} onClose={onClose} >\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: show ? \"100%\" : 64 }} />}><CardDark >\r\n      <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\r\n      <CardHeader\r\n        title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\r\n        action={<CloseButton disabled={!!preventClosing} onClick={onClose} />}\r\n      />\r\n      <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n        <Grid container spacing={1} columns={{ xs: 1, md: 2 }} >\r\n          {/* Left column */}\r\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* set & rarity */}\r\n            <Box sx={{ display: \"flex\", gap: 1 }}>\r\n              {/* Artifact Set */}\r\n              <ArtifactSetAutocomplete\r\n                disabled={disableSet}\r\n                size=\"small\"\r\n                artSetKey={artifact?.setKey ?? \"\"}\r\n                setArtSetKey={updateSetKey}\r\n                sx={{ flexGrow: 1 }}\r\n                label={artifact?.setKey ? \"\" : t(\"editor.unknownSetName\")}\r\n                getOptionDisabled={({ key }) => setACDisable(key)}\r\n              />\r\n              {/* rarity dropdown */}\r\n              <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={!sheet} />\r\n            </Box>\r\n\r\n            {/* level */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\r\n                value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\r\n              />\r\n              <ButtonGroup >\r\n                <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n                {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n                <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\r\n              </ButtonGroup>\r\n            </Box>\r\n\r\n            {/* slot */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <ArtifactSlotDropdown disabled={disableEditSlot || !sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Suspense fallback={<Skeleton width=\"60%\" />}>\r\n                  <Typography color=\"text.secondary\">\r\n                    {(artifact && sheet?.getSlotName(artifact!.slotKey)) ?\r\n                      <span>\r\n                        <ImgIcon size={2} src={artifactAsset(artifact.setKey, artifact.slotKey)} />{sheet?.getSlotName(artifact!.slotKey)}\r\n                      </span> : t`editor.unknownPieceName`}\r\n                  </Typography>\r\n                </Suspense>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* main stat */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <DropdownButton startIcon={artifact?.mainStatKey ? <StatIcon statKey={artifact.mainStatKey} /> : undefined}\r\n                title={<b>{artifact ? KeyMap.getArtStr(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={color} >\r\n                {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                  <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                    <StatColoredWithUnit statKey={mainStatK} />\r\n                  </MenuItem>)}\r\n              </DropdownButton>\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Typography color=\"text.secondary\">\r\n                  {artifact ? `${cacheValueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unit(artifact.mainStatKey)}` : t`mainStat`}\r\n                </Typography>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* Current/Max Substats Efficiency */}\r\n            <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\r\n            {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\r\n\r\n            {/* Image OCR */}\r\n            {allowUpload && <CardLight>\r\n              <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n                {/* TODO: artifactDispatch not overwrite */}\r\n                <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\r\n                  <Grid container spacing={1} alignItems=\"center\">\r\n                    <Grid item flexGrow={1}>\r\n                      <label htmlFor=\"contained-button-file\">\r\n                        <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\r\n                        <Button component=\"span\" startIcon={<PhotoCamera />}>\r\n                          Upload Screenshot (or Ctrl-V)\r\n                        </Button>\r\n                      </label>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => setModalShow(true)}><HelpIcon /></Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                  {image && <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\r\n                  </Box>}\r\n                  {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\r\n                    {!firstProcessed && firstOutstanding && <Grid item>\r\n                      <CircularProgress size=\"1em\" />\r\n                    </Grid>}\r\n                    <Grid item flexGrow={1}>\r\n                      <Typography>\r\n                        <span>\r\n                          Screenshots in file-queue: <b>{remaining}</b>\r\n                          {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\r\n                        </span>\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\r\n                    </Grid>\r\n                  </Grid></CardDark>}\r\n                </Suspense>\r\n              </CardContent>\r\n            </CardLight>}\r\n          </Grid>\r\n\r\n          {/* Right column */}\r\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* substat selections */}\r\n            {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cArtifact} setSubstat={setSubstat} />)}\r\n            {texts && <CardLight><CardContent>\r\n              <div>{texts.slotKey}</div>\r\n              <div>{texts.mainStatKey}</div>\r\n              <div>{texts.mainStatVal}</div>\r\n              <div>{texts.rarity}</div>\r\n              <div>{texts.level}</div>\r\n              <div>{texts.substats}</div>\r\n              <div>{texts.setKey}</div>\r\n            </CardContent></CardLight>}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {old && <Grid container sx={{ justifyContent: \"space-around\" }} spacing={1} >\r\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\r\n            <ArtifactCard artifactObj={old} />\r\n          </CardLight></Grid>\r\n          {grmd && <Grid item md={1} display=\"flex\" alignItems=\"center\" justifyContent=\"center\" >\r\n            <CardLight sx={{ display: \"flex\" }}><ChevronRight sx={{ fontSize: 40 }} /></CardLight>\r\n          </Grid>}\r\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\r\n            <ArtifactCard artifactObj={cArtifact} />\r\n          </CardLight></Grid>\r\n        </Grid>}\r\n\r\n        {/* Error alert */}\r\n        {!isValid && <Alert variant=\"filled\" severity=\"error\" >{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\r\n\r\n        {/* Buttons */}\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            {oldType === \"edit\" ?\r\n              <Button startIcon={<Add />} onClick={() => {\r\n                database.arts.set(old!.id, editorArtifact!);\r\n                if (allowEmpty) reset()\r\n                else {\r\n                  setShow(false)\r\n                  cancelEdit()\r\n                }\r\n              }} disabled={!editorArtifact || !isValid} color=\"primary\">\r\n                {t`editor.btnSave`}\r\n              </Button> :\r\n              <Button startIcon={<Add />} onClick={() => {\r\n                database.arts.new(artifact!);\r\n                if (allowEmpty) reset()\r\n                else {\r\n                  setShow(false)\r\n                  cancelEdit()\r\n                }\r\n              }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\r\n                {t`editor.btnAdd`}\r\n              </Button>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            {allowEmpty && <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>}\r\n          </Grid>\r\n          <Grid item>\r\n            {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={() => artifactDispatch({ type: \"overwrite\", artifact: randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n          </Grid>\r\n          {old && oldType !== \"edit\" && <Grid item>\r\n            <Button startIcon={<Update />} onClick={() => { database.arts.set(old.id, { ...editorArtifact, location: old.location }); allowEmpty ? reset() : setShow(false) }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark ></Suspense>\r\n  </ModalWrapper>\r\n}\r\n"],"names":["sortByRarityAndName","a","b","grouper","aName","i18n","key","bName","ArtifactRarityDropdown","rarity","onChange","filter","props","t","useTranslation","DropdownButton","title","stars","inline","color","map","MenuItem","disabled","onClick","ArtifactSlotDropdown","slotKey","hasUnselect","startIcon","SlotIcon","undefined","selected","ListItemIcon","Replay","ListItemText","Divider","allSlotKeys","CustomNumberTextField","value","float","state","setState","useState","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","toString","TextField","type","e","target","onBlur","onKeyDown","usePromise","promiseFunc","dependencies","useOld","res","setRes","pending","then","console","error","SubstatEfficiencyDisplayCard","efficiency","max","valid","eff","CardLight","sx","py","px","Grid","container","spacing","item","flexGrow","InfoTooltip","Typography","variant","i18nKey","xs","PercentBadge","SubstatInput","index","artifact","setSubstat","mainStatKey","rolls","substats","accurateValue","reduce","unit","KeyMap","rollNum","length","rollData","allowedRolls","numUpgrades","high","Artifact","rollOffset","Box","display","ButtonGroup","size","width","StatIcon","statKey","whiteSpace","allSubstatKeys","k","CustomNumberInput","flexBasis","placeholder","inputProps","textAlign","TextButton","v","i","newValue","cacheValueString","artifactSubstatRollCorrection","Button","clamp","p","SqBadge","count","sort","val","component","indexOf","ml","flexShrink","UploadExplainationModal","modalShow","hide","ModalWrapper","open","onClose","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","src","Snippet","height","gutterBottom","href","rel","scan_art_main","large","starColor","r","g","schedulers","constructor","init","deinit","data","this","async","callback","refCount","box","result","scheduler","createScheduler","promises","Array","fill","worker","createWorker","errorHandler","load","loadLanguage","language","initialize","addWorker","Promise","any","_language","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","ocrResult","imageData","urlToImageData","halfHeight","Math","floor","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","rarities","pixels","d","lastRowNum","rowsWithNumber","results","Set","y","star","onStar","x","colorCloseEnough","add","parseRarities","whiteTexts","substatTexts","artifactSetTexts","all","ocr","texts","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","bestScore","bestArtifacts","setKey","level","location","lock","exclude","rarityRates","objectKeyMap","allArtifactRarities","score","set","getArtSheet","includes","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","Object","entries","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatValScore","push","chosen","mainStatVal","resultMainStatVal","every","other","unknownText","name","text","ambiguousText","available","detectedText","inferredText","addText","recommended","valueStrFunc","find","findBestArtifact","allArtifactSets","hammingDistance","replace","nameRaw","parseSetKeys","parseSlotKeys","matches","match","RegExp","exec","parseSubstats","allMainStatKeys","toLowerCase","parseMainStatKeys","regex","parseMainStatValues","resolve","reader","FileReader","onloadend","readAsDataURL","urlFile","img","Image","onload","image","canvas","document","createElement","context","getContext","drawImage","getImageData","imageToImageData","options","putImageData","imageDataToCanvas","borrow","addJob","lines","line","color1","color2","threshold","intCloseEnough","abs","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","maxProcessingCount","maxProcessedCount","allSubstatFilter","artifactReducer","action","oldIndex","current","InputInvis","styled","ArtifactEditor","artifactIdToEdit","cancelEdit","allowUpload","allowEmpty","disableSet","disableSlot","database","useContext","DatabaseContext","show","setShow","dirtyDatabase","setDirtyDatabase","useForceUpdate","arts","followAny","editorArtifact","artifactDispatch","useReducer","useMemo","validateArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","disableEditSlot","numProcessing","min","processingCurrent","forEach","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","old","oldType","databaseArtifact","get","duplicated","upgraded","findDups","cArtifact","errors","validated","cachedArtifact","deepClone","sheet","reset","update","newSheet","pick","prefer","slots","isValid","currentEfficiency","maxEfficiency","preventClosing","preventDefault","theme","useTheme","grmd","useMediaQuery","breakpoints","up","element","allElementsWithPhy","ele","updateSetKey","setACDisable","Suspense","fallback","Skeleton","CardHeader","flexDirection","gap","columns","ArtifactSetAutocomplete","artSetKey","setArtSetKey","label","getOptionDisabled","id","mr","my","margin","l","keys","getSlotName","ImgIcon","artifactAsset","mainStatK","alignItems","htmlFor","accept","multiple","PhotoCamera","minWidth","Help","justifyContent","maxWidth","pl","CircularProgress","lg","ArtifactCard","artifactObj","ChevronRight","fontSize","Add","new","confirm","process","Update"],"sourceRoot":""}