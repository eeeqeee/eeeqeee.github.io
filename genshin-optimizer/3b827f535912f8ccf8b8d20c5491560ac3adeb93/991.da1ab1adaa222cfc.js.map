{"version":3,"file":"991.da1ab1adaa222cfc.js","mappings":"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","sources":["webpack:///../../node_modules/@mui/icons-material/Add.js","webpack:///./src/app/PageCharacter/index.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\nexports.default = _default;","import { DeleteForever, FactCheck, Groups, Science, TrendingUp } from '@mui/icons-material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport { Box, Button, CardContent, Divider, Grid, IconButton, Pagination, Skeleton, TextField, Typography } from '@mui/material';\r\nimport React, { ChangeEvent, Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useRef, useState } from 'react';\r\nimport ReactGA from 'react-ga4';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CharacterCard from '../Components/Character/CharacterCard';\r\nimport SortByButton from '../Components/SortByButton';\r\nimport ElementToggle from '../Components/ToggleButton/ElementToggle';\r\nimport WeaponToggle from '../Components/ToggleButton/WeaponToggle';\r\nimport { getCharSheet } from '../Data/Characters';\r\nimport { getWeaponSheet } from '../Data/Weapons';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\r\nimport useDBMeta from '../ReactHooks/useDBMeta';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport useMediaQueryUp from '../ReactHooks/useMediaQueryUp';\r\nimport { allElements, allWeaponTypeKeys, CharacterKey, charKeyToCharName } from '../Types/consts';\r\nimport { characterFilterConfigs, characterSortConfigs, characterSortMap } from '../Util/CharacterSort';\r\nimport { filterFunction, sortFunction } from '../Util/SortByFilters';\r\nimport { catTotal } from '../Util/totalUtils';\r\nimport { clamp } from '../Util/Util';\r\nconst CharacterSelectionModal = React.lazy(() => import('./CharacterSelectionModal'))\r\nconst columns = { xs: 1, sm: 2, md: 3, lg: 4, xl: 4 }\r\nconst numToShowMap = { xs: 6, sm: 8, md: 12, lg: 16, xl: 16 }\r\nconst sortKeys = Object.keys(characterSortMap)\r\n\r\nexport default function PageCharacter() {\r\n  const { t } = useTranslation([\"page_character\", \"charNames_gen\"])\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useState(() => database.displayCharacter.get())\r\n  useEffect(() => database.displayCharacter.follow((r, s) => setState(s)), [database, setState])\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const deferredSearchTerm = useDeferredValue(searchTerm)\r\n  const invScrollRef = useRef<HTMLDivElement>(null)\r\n  const setPage = useCallback(\r\n    (_: ChangeEvent<unknown>, value: number) => {\r\n      invScrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n      database.displayCharacter.set({ pageIndex: value - 1 });\r\n    },\r\n    [database, invScrollRef]\r\n  )\r\n\r\n  const brPt = useMediaQueryUp()\r\n  const maxNumToDisplay = numToShowMap[brPt]\r\n\r\n  const [newCharacter, setnewCharacter] = useState(false)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  // Set follow, should run only once\r\n  useEffect(() => {\r\n    ReactGA.send({ hitType: \"pageview\", page: '/characters' })\r\n    return database.chars.followAny((k, r) => (r === \"new\" || r === \"remove\") && forceUpdate())\r\n  }, [forceUpdate, database])\r\n\r\n  // character favorite updater\r\n  useEffect(() => database.charMeta.followAny(s => forceUpdate()), [forceUpdate, database])\r\n\r\n  const { gender } = useDBMeta()\r\n  const deleteCharacter = useCallback(async (cKey: CharacterKey) => {\r\n    const chararcterSheet = await getCharSheet(cKey, gender)\r\n    let name = chararcterSheet?.name\r\n    // Use translated string\r\n    if (typeof name === \"object\")\r\n      name = t(`charNames_gen:${charKeyToCharName(cKey, gender)}`)\r\n\r\n    if (!window.confirm(t(\"removeCharacter\", { value: name }))) return\r\n    database.chars.remove(cKey)\r\n  }, [database, gender, t])\r\n\r\n  const editCharacter = useCharSelectionCallback()\r\n\r\n  const navigate = useNavigate()\r\n\r\n  const deferredState = useDeferredValue(state)\r\n  const deferredDbDirty = useDeferredValue(dbDirty)\r\n  const { charKeyList, totalCharNum } = useMemo(() => {\r\n    const chars = database.chars.keys\r\n    const totalCharNum = chars.length\r\n    const { element, weaponType, sortType, ascending } = deferredState\r\n    const charKeyList = database.chars.keys\r\n      .filter(filterFunction({ element, weaponType, name: deferredSearchTerm }, characterFilterConfigs(database)))\r\n      .sort(sortFunction(characterSortMap[sortType] ?? [], ascending, characterSortConfigs(database), [\"new\", \"favorite\"]))\r\n    return deferredDbDirty && { charKeyList, totalCharNum }\r\n  },\r\n    [deferredDbDirty, database, deferredState, deferredSearchTerm])\r\n\r\n  const { weaponType, element, sortType, ascending, pageIndex = 0 } = state\r\n\r\n  const { charKeyListToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(charKeyList.length / maxNumToDisplay)\r\n    const currentPageIndex = clamp(pageIndex, 0, numPages - 1)\r\n    return { charKeyListToShow: charKeyList.slice(currentPageIndex * maxNumToDisplay, (currentPageIndex + 1) * maxNumToDisplay), numPages, currentPageIndex }\r\n  }, [charKeyList, pageIndex, maxNumToDisplay])\r\n\r\n  const totalShowing = charKeyList.length !== totalCharNum ? `${charKeyList.length}/${totalCharNum}` : `${totalCharNum}`\r\n\r\n  const weaponTotals = useMemo(() => catTotal(allWeaponTypeKeys,\r\n    ct => Object.entries(database.chars.data).forEach(([ck, char]) => {\r\n      const weapon = database.weapons.get(char.equippedWeapon)\r\n      if (!weapon) return\r\n      const wtk = getWeaponSheet(weapon.key).weaponType\r\n      ct[wtk].total++\r\n      if (charKeyList.includes(ck)) ct[wtk].current++\r\n    })), [database, charKeyList])\r\n\r\n  const elementTotals = useMemo(() => catTotal(allElements,\r\n    ct => Object.entries(database.chars.data).forEach(([ck, char]) => {\r\n      const eleKey = getCharSheet(char.key, database.gender).elementKey\r\n      ct[eleKey].total++\r\n      if (charKeyList.includes(ck)) ct[eleKey].current++\r\n    })), [database, charKeyList])\r\n\r\n  return <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n    <Suspense fallback={false}>\r\n      <CharacterSelectionModal newFirst show={newCharacter} onHide={() => setnewCharacter(false)} onSelect={editCharacter} />\r\n    </Suspense>\r\n    <CardDark ref={invScrollRef} ><CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n      <Grid container spacing={1}>\r\n        <Grid item>\r\n          <WeaponToggle sx={{ height: \"100%\" }} onChange={weaponType => database.displayCharacter.set({ weaponType })} value={weaponType} totals={weaponTotals} size=\"small\" />\r\n        </Grid>\r\n        <Grid item>\r\n          <ElementToggle sx={{ height: \"100%\" }} onChange={element => database.displayCharacter.set({ element })} value={element} totals={elementTotals} size=\"small\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1} />\r\n        <Grid item>\r\n          <TextField\r\n            autoFocus\r\n            value={searchTerm}\r\n            onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setSearchTerm(e.target.value)}\r\n            label={t(\"characterName\")}\r\n            size=\"small\"\r\n            sx={{ height: \"100%\" }}\r\n            InputProps={{\r\n              sx: { height: \"100%\" }\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"flex-end\" flexWrap=\"wrap\">\r\n        <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\r\n        <ShowingCharacter numShowing={charKeyListToShow.length} total={totalShowing} t={t} />\r\n        <SortByButton\r\n          sortKeys={sortKeys} value={sortType} onChange={sortType => database.displayCharacter.set({ sortType })}\r\n          ascending={ascending} onChangeAsc={ascending => database.displayCharacter.set({ ascending })} />\r\n      </Box>\r\n    </CardContent></CardDark>\r\n    <Button fullWidth onClick={() => setnewCharacter(true)} color=\"info\" startIcon={<AddIcon />} >{t`addNew`}</Button>\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 5000 }} />}>\r\n      <Grid container spacing={1} columns={columns}>\r\n        {charKeyListToShow.map(charKey =>\r\n          <Grid item key={charKey} xs={1} >\r\n            <CharacterCard\r\n              characterKey={charKey}\r\n              onClick={() => navigate(`${charKey}`)}\r\n              footer={<><Divider /><Box sx={{ py: 1, px: 2, display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\r\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.talent\")}</Typography>}>\r\n                  <IconButton onClick={() => navigate(`${charKey}/talent`)}>\r\n                    <FactCheck />\r\n                  </IconButton>\r\n                </BootstrapTooltip>\r\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.teambuffs\")}</Typography>}>\r\n                  <IconButton onClick={() => navigate(`${charKey}/teambuffs`)} >\r\n                    <Groups />\r\n                  </IconButton>\r\n                </BootstrapTooltip>\r\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.optimize\")}</Typography>}>\r\n                  <IconButton onClick={() => navigate(`${charKey}/optimize`)} >\r\n                    <TrendingUp />\r\n                  </IconButton>\r\n                </BootstrapTooltip>\r\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.theorycraft\")}</Typography>}>\r\n                  <IconButton onClick={() => navigate(`${charKey}/theorycraft`)} >\r\n                    <Science />\r\n                  </IconButton>\r\n                </BootstrapTooltip>\r\n                <Divider orientation=\"vertical\" />\r\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"delete\")}</Typography>}>\r\n                  <IconButton color=\"error\" onClick={() => deleteCharacter(charKey)}>\r\n                    <DeleteForever />\r\n                  </IconButton>\r\n                </BootstrapTooltip>\r\n              </Box></>}\r\n            />\r\n          </Grid>)}\r\n      </Grid>\r\n    </Suspense>\r\n    {numPages > 1 && <CardDark ><CardContent sx={{ display: \"flex\", gap: 1 }}>\r\n      <Button onClick={() => setnewCharacter(true)} color=\"info\" sx={{ minWidth: 0 }} ><AddIcon /></Button>\r\n      <Grid container alignItems=\"flex-end\" sx={{ flexGrow: 1 }}>\r\n        <Grid item flexGrow={1}>\r\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\r\n        </Grid>\r\n        <Grid item>\r\n          <ShowingCharacter numShowing={charKeyListToShow.length} total={totalShowing} t={t} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent></CardDark>}\r\n  </Box>\r\n}\r\nfunction ShowingCharacter({ numShowing, total, t }) {\r\n  return <Typography color=\"text.secondary\">\r\n    <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total} >\r\n      Showing <b>{{ count: numShowing } as TransObject}</b> out of {{ value: total } as TransObject} Characters\r\n    </Trans>\r\n  </Typography>\r\n}\r\n"],"names":["_interopRequireDefault","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","CharacterSelectionModal","React","columns","xs","sm","md","lg","xl","numToShowMap","sortKeys","Object","keys","characterSortMap","PageCharacter","t","useTranslation","database","useContext","DatabaseContext","state","setState","useState","displayCharacter","get","useEffect","follow","r","s","searchTerm","setSearchTerm","deferredSearchTerm","useDeferredValue","invScrollRef","useRef","setPage","useCallback","_","value","current","scrollIntoView","behavior","set","pageIndex","brPt","useMediaQueryUp","maxNumToDisplay","newCharacter","setnewCharacter","dbDirty","forceUpdate","useForceUpdate","ReactGA","hitType","page","chars","followAny","k","charMeta","gender","useDBMeta","deleteCharacter","async","chararcterSheet","getCharSheet","cKey","name","charKeyToCharName","window","confirm","remove","editCharacter","useCharSelectionCallback","navigate","useNavigate","deferredState","deferredDbDirty","charKeyList","totalCharNum","useMemo","length","element","weaponType","sortType","ascending","filter","filterFunction","characterFilterConfigs","sort","sortFunction","characterSortConfigs","charKeyListToShow","numPages","currentPageIndex","Math","ceil","clamp","slice","totalShowing","weaponTotals","catTotal","allWeaponTypeKeys","ct","entries","data","forEach","ck","char","weapon","weapons","equippedWeapon","wtk","getWeaponSheet","key","total","includes","elementTotals","allElements","eleKey","elementKey","my","display","flexDirection","gap","Suspense","fallback","newFirst","show","onHide","onSelect","ref","sx","container","spacing","item","height","onChange","totals","size","flexGrow","autoFocus","e","target","label","InputProps","justifyContent","alignItems","flexWrap","count","ShowingCharacter","numShowing","onChangeAsc","fullWidth","onClick","color","startIcon","variant","width","minHeight","map","charKey","characterKey","footer","py","px","placement","title","orientation","minWidth","i18nKey"],"sourceRoot":""}