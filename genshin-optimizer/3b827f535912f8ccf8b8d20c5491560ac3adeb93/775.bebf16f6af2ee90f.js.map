{"version":3,"file":"775.bebf16f6af2ee90f.js","mappings":"oHAMO,SAASA,EAA6CC,EAAoBC,GAC/E,MAAMC,EAKR,SAAyDF,GACvD,OAAOG,OAAOC,YAAYJ,EAAKK,KAAIC,GAAK,CAACA,EAAG,CAAEC,MAAO,EAAGC,QAAS,MACnE,CAPaC,CAAYT,GAEvB,OADAC,EAAGC,GAQ4DQ,EAPpCR,GAQpBS,EAAAA,EAAAA,IAAUD,GAAK,EAAGH,QAAOC,aAAcA,IAAYD,EAAS,GAAEA,IAAW,GAAEC,KAAWD,MAD/F,IAAiEG,CANjE,C","sources":["webpack:///./src/app/Util/totalUtils.ts"],"sourcesContent":["import { objectMap } from \"./Util\"\r\ntype Entry = {\r\n  total: number,\r\n  current: number,\r\n}\r\n// A helper function to generate a `current/total` formated string object with categories\r\nexport function catTotal<T extends string | number | symbol>(keys: readonly T[], cb: (ct: Record<T, Entry>) => void) {\r\n  const ct = catTotalObj(keys)\r\n  cb(ct)\r\n  return catTotalToStringObj(ct)\r\n}\r\n\r\nfunction catTotalObj<T extends string | number | symbol>(keys: readonly T[]): Record<T, Entry> {\r\n  return Object.fromEntries(keys.map(k => [k, { total: 0, current: 0 }])) as Record<T, Entry>\r\n}\r\n\r\nfunction catTotalToStringObj<T extends string | number | symbol>(tot: Record<T, Entry>) {\r\n  return objectMap(tot, ({ total, current }) => current === total ? `${total}` : `${current}/${total}`) as Record<T, string>\r\n}\r\n"],"names":["catTotal","keys","cb","ct","Object","fromEntries","map","k","total","current","catTotalObj","tot","objectMap"],"sourceRoot":""}