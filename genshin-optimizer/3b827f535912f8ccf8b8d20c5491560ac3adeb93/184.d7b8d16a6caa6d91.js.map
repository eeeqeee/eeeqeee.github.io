{"version":3,"file":"184.d7b8d16a6caa6d91.js","mappings":"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","sources":["webpack:///./src/app/Context/GraphContext.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/CharSelectButton.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/FormulaModal.tsx","webpack:///./src/app/Components/ExpandButton.tsx","webpack:///./src/app/Components/StatInput.tsx","webpack:///./src/app/Components/EnemyEditor.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/StatModal.tsx","webpack:///./src/app/Context/OptimizationTargetContext.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/common.ts","webpack:///./src/app/Components/Artifact/SetEffectDisplay.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/useBuildSetting.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ArtifactSetConfig.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/AssumeFullLevelToggle.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BonusStatsCard.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BuildAlert.tsx","webpack:///./src/app/Components/Artifact/ArtifactCardNano.tsx","webpack:///./src/app/Components/Character/StatDisplayComponent.tsx","webpack:///./src/app/Components/Weapon/WeaponCardNano.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ArtifactSetBadges.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BuildDisplayItem.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/useBuildResult.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/CustomDot.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/CustomTooltip.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/EnhancedPoint.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/index.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/MainStatSelectionCard.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/OptimizationTargetEditorList.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/StatFilterCard.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/UseEquipped.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/UseExcluded.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/WorkerErr.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/foreground.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/index.tsx","webpack:///../../libs/char-cards/src/index.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/CompareBuildButton.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/ArtifactSwapModal.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/WeaponSwapModal.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/EquipmentSection.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/index.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTalent.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTeambuffs.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTheorycraft/index.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTheorycraft/useCharTC.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/TravelerElementSelect.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/TravelerGenderSelect.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/index.tsx"],"sourcesContent":["import { createContext } from \"react\"\nimport { NumNode } from \"../Formula/type\"\nimport { Build } from \"../PageCharacter/CharacterDisplay/Tabs/TabOptimize/common\"\n\nexport type ChartData = {\n  valueNode: NumNode,\n  plotNode: NumNode,\n  data: Build[]\n}\nexport type GraphContextObj = {\n  chartData?: ChartData\n  setChartData: (data: ChartData | undefined) => void\n  graphBuilds: string[][] | undefined\n  setGraphBuilds: (builds: string[][] | undefined) => void\n}\nexport const GraphContext = createContext({} as GraphContextObj)\n","import { Button } from '@mui/material';\r\nimport React, { Suspense, useContext, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { characterAsset } from '@genshin-optimizer/g-assets';\r\nimport ThumbSide from '../../Components/Character/ThumbSide';\r\nimport { CharacterContext } from '../../Context/CharacterContext';\r\nimport useCharSelectionCallback from '../../ReactHooks/useCharSelectionCallback';\r\nimport useDBMeta from '../../ReactHooks/useDBMeta';\r\n\r\nconst CharacterSelectionModal = React.lazy(() => import('../CharacterSelectionModal'))\r\n\r\nexport default function CharSelectButton() {\r\n  const { t } = useTranslation(\"page_character\")\r\n  const { characterSheet, character: { key: characterKey } } = useContext(CharacterContext)\r\n  const [showModal, setshowModal] = useState(false)\r\n  const { gender } = useDBMeta()\r\n  const setCharacter = useCharSelectionCallback()\r\n  return <>\r\n    <Suspense fallback={false}>\r\n      <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacter} />\r\n    </Suspense>\r\n    <Button color=\"info\" onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterAsset(characterKey, \"iconSide\", gender)} />} >{characterSheet?.name ?? t(\"selectCharacter\")}</Button>\r\n  </>\r\n}\r\n","import { ExpandMore } from '@mui/icons-material';\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CardContent, CardHeader, Divider, Skeleton, Typography } from '@mui/material';\r\nimport { MutableRefObject, Suspense, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport AmpReactionModeText from '../../Components/AmpReactionModeText';\r\nimport CardDark from '../../Components/Card/CardDark';\r\nimport CardHeaderCustom from '../../Components/Card/CardHeaderCustom';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport CloseButton from '../../Components/CloseButton';\r\nimport ColorText from '../../Components/ColoredText';\r\nimport ImgIcon from '../../Components/Image/ImgIcon';\r\nimport ModalWrapper from \"../../Components/ModalWrapper\";\r\nimport SqBadge from '../../Components/SqBadge';\r\nimport { DataContext } from '../../Context/DataContext';\r\nimport { FormulaDataContext } from '../../Context/FormulaDataContext';\r\nimport { DatabaseContext } from '../../Database/Database';\r\nimport { getDisplayHeader, getDisplaySections } from '../../Formula/DisplayUtil';\r\nimport { DisplaySub, Variant } from '../../Formula/type';\r\nimport { NodeDisplay, nodeVStr } from '../../Formula/uiData';\r\nimport { allAmpReactions, AmpReactionKey } from '../../Types/consts';\r\n\r\nexport default function FormulaModal() {\r\n  const { modalOpen } = useContext(FormulaDataContext)\r\n  const { setFormulaData } = useContext(FormulaDataContext)\r\n  const onCloseHandler = useCallback(() => setFormulaData?.(undefined, undefined), [setFormulaData])\r\n  return <ModalWrapper open={!!modalOpen} onClose={onCloseHandler}>\r\n    <CardDark>\r\n      <CardHeader title=\"Formulas & Calculations\" action={<CloseButton onClick={onCloseHandler} />} />\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <CalculationDisplay />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n\r\nfunction CalculationDisplay() {\r\n  const { data } = useContext(DataContext)\r\n  const { data: contextData } = useContext(FormulaDataContext)\r\n  const sections = getDisplaySections(contextData ?? data)\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\r\n    <Box sx={{ mr: -1, mb: -1 }}>\r\n      {sections.map(([key, Nodes]) =>\r\n        <FormulaCalc key={key} displayNs={Nodes} sectionKey={key} />)}\r\n    </Box>\r\n  </Suspense>\r\n}\r\nfunction FormulaCalc({ sectionKey, displayNs }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\r\n  const { data } = useContext(DataContext)\r\n  const { database } = useContext(DatabaseContext)\r\n  const { data: contextData } = useContext(FormulaDataContext)\r\n  const header = useMemo(() => getDisplayHeader(contextData ?? data, sectionKey, database), [database, contextData, data, sectionKey])\r\n  if (!header) return null\r\n  if (Object.entries(displayNs).every(([_, node]) => node.isEmpty)) return null\r\n  const { title, icon, action } = header\r\n  return <CardLight sx={{ mb: 1 }}>\r\n    <CardHeaderCustom avatar={icon && <ImgIcon size={2} src={icon} />} title={title} action={action && <SqBadge>{action}</SqBadge>} />\r\n    <Divider />\r\n    <CardContent>\r\n      {Object.entries(displayNs).map(([key, node]) => !node.isEmpty && <FormulaAccordian key={key} node={node} />)}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction FormulaAccordian({ node }: { node: NodeDisplay }) {\r\n  const { node: contextNode } = useContext(FormulaDataContext)\r\n  const [expanded, setExpanded] = useState(false);\r\n  const handleChange = useCallback((e: React.SyntheticEvent, isExpanded: boolean) => setExpanded(isExpanded), [])\r\n  const scrollRef = useRef<HTMLDivElement>() as MutableRefObject<HTMLDivElement | null>\r\n\r\n  useEffect(() => {\r\n    if (node === contextNode) setTimeout(() => scrollRef?.current?.scrollIntoView?.({ behavior: \"smooth\" }), 300)\r\n  }, [scrollRef, node, contextNode])\r\n\r\n  return <Accordion sx={{ bgcolor: \"contentDark.main\" }} expanded={node === contextNode || expanded} onChange={handleChange} ref={scrollRef} >\r\n    <AccordionSummary expandIcon={<ExpandMore />} >\r\n      <Typography><ColorText color={node.info.variant}>{node.info.name}</ColorText> <strong>{nodeVStr(node)}</strong></Typography>\r\n      {allAmpReactions.includes(node.info.variant as \"vaporize\" | \"melt\") && <Box sx={{ display: \"inline-block\", ml: \"auto\", mr: 2 }}>\r\n        <AmpReactionModeText reaction={node.info.variant as AmpReactionKey} trigger={node.info.subVariant as \"cryo\" | \"pyro\" | \"hydro\" | undefined} />\r\n      </Box>}\r\n    </AccordionSummary>\r\n    <AccordionDetails >\r\n      {node.formulas.map((subform, i) => <Typography key={i} component=\"div\">{subform}</Typography>)}\r\n    </AccordionDetails>\r\n  </Accordion>\r\n}\r\n","import { IconButton, IconButtonProps, styled } from \"@mui/material\";\r\n\r\ninterface ExpandMoreProps extends IconButtonProps {\r\n  expand: boolean;\r\n}\r\nconst ExpandButton = styled((props: ExpandMoreProps) => {\r\n  const { expand, ...other } = props;\r\n  return <IconButton {...other} />;\r\n})(({ theme, expand }) => ({\r\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\r\n  marginLeft: 'auto',\r\n  transition: (theme as any).transitions.create('transform', {\r\n    duration: (theme as any).transitions.duration.shortest,\r\n  }),\r\n}));\r\n\r\nexport default ExpandButton","import { Replay } from \"@mui/icons-material\"\r\nimport { Button, ButtonGroup, ButtonGroupProps, styled } from \"@mui/material\"\r\nimport { ReactNode } from \"react\"\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"./CustomNumberInput\"\r\nimport TextButton from \"./TextButton\"\r\n\r\ntype StatInputInput = ButtonGroupProps & {\r\n  name: Displayable,\r\n  children?: ReactNode,\r\n  value: number,\r\n  placeholder?: string,\r\n  defaultValue?: number,\r\n  onValueChange: (newValue: number | undefined) => void,\r\n  percent?: boolean,\r\n  disabled?: boolean,\r\n  onReset?: () => void\r\n}\r\nconst FlexButtonGroup = styled(ButtonGroup)({\r\n  display: \"flex\"\r\n})\r\n\r\nexport default function StatInput({ name, children, value, placeholder, defaultValue = 0, onValueChange, percent = false, disabled = false, onReset, ...restProps }: StatInputInput) {\r\n\r\n  return <FlexButtonGroup {...restProps} >\r\n    {children}\r\n    <TextButton sx={{ px: 1 }}>\r\n      {name}\r\n    </TextButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: \"10em\", flexGrow: 1 }} >\r\n      <CustomNumberInput\r\n        sx={{ px: 1 }}\r\n        inputProps={{\r\n          sx: { textAlign: \"right\" }\r\n        }}\r\n        float={percent}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onValueChange}\r\n        disabled={disabled}\r\n        endAdornment={percent ? \"%\" : undefined}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    <Button sx={{ flexShrink: 2 }} size=\"small\" color=\"error\" onClick={() => onReset ? onReset() : onValueChange(defaultValue)} disabled={disabled || value === defaultValue} >\r\n      <Replay />\r\n    </Button>\r\n  </FlexButtonGroup>\r\n}\r\n","import { allElementsWithPhy, ElementKeyWithPhy } from \"@genshin-optimizer/consts\";\r\nimport { CheckBox, CheckBoxOutlineBlank, ExpandMore, Replay } from \"@mui/icons-material\";\r\nimport { Box, Button, CardContent, Chip, Collapse, Grid, Typography } from \"@mui/material\";\r\nimport { useCallback, useContext, useState } from 'react';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { CharacterContext } from \"../Context/CharacterContext\";\r\nimport { DataContext } from \"../Context/DataContext\";\r\nimport { uiInput as input } from \"../Formula\";\r\nimport { nodeVStr } from \"../Formula/uiData\";\r\nimport KeyMap from '../KeyMap';\r\nimport { ElementIcon } from \"../KeyMap/StatIcon\";\r\nimport { iconInlineProps } from \"../SVGIcons\";\r\nimport CardLight from \"./Card/CardLight\";\r\nimport ColorText from \"./ColoredText\";\r\nimport ExpandButton from \"./ExpandButton\";\r\nimport StatInput from \"./StatInput\";\r\n\r\nexport function EnemyExpandCard() {\r\n  const { t } = useTranslation(\"ui\")\r\n  const { characterDispatch } = useContext(CharacterContext)\r\n  const { data } = useContext(DataContext)\r\n  const [expanded, setexpanded] = useState(false)\r\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\r\n  const eLvlNode = data.get(input.enemy.level)\r\n  const eDefRed = data.get(input.enemy.defRed)\r\n  const eDefIgn = data.get(input.enemy.defIgn)\r\n  const onReset = useCallback(() => characterDispatch({ enemyOverride: {} }), [characterDispatch])\r\n\r\n  return <CardLight>\r\n    <CardContent sx={{ display: \"flex\", gap: 1, alignItems: \"center\", flexWrap: \"wrap\" }}>\r\n      <Chip size=\"small\" color=\"success\" label={<span>{eLvlNode.info.name} <strong>{eLvlNode.value}</strong></span>} />\r\n      {allElementsWithPhy.map(element => <Typography key={element} ><EnemyResText element={element} /></Typography>)}\r\n      <Typography>DEF Red. {nodeVStr(eDefRed)}</Typography>\r\n      <Typography>DEF Ignore {nodeVStr(eDefIgn)}</Typography>\r\n      <Box flexGrow={1} display=\"flex\" justifyContent=\"flex-end\" gap={1}>\r\n        <Button size=\"small\" color=\"error\" onClick={onReset} startIcon={<Replay />}>{t`reset`}</Button>\r\n        <ExpandButton\r\n          expand={expanded}\r\n          onClick={toggle}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n          size=\"small\"\r\n          sx={{ marginLeft: 0 }}\r\n        >\r\n          <ExpandMore />\r\n        </ExpandButton>\r\n      </Box>\r\n    </CardContent>\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <EnemyEditor />\r\n      </CardContent>\r\n    </Collapse>\r\n  </CardLight>\r\n}\r\n\r\nexport function EnemyResText({ element }: { element: ElementKeyWithPhy }) {\r\n  const { data } = useContext(DataContext)\r\n  const node = data.get(input.enemy[`${element}_res_`])\r\n  const immune = !isFinite(node.value)\r\n  const icon = <ElementIcon ele={element} iconProps={iconInlineProps} />\r\n  const content = immune ? <span >{icon} &#8734;</span> :\r\n    <span>{icon} <strong>{nodeVStr(node)}</strong></span>\r\n  return <ColorText color={element}>{content}</ColorText>\r\n}\r\n\r\nexport function EnemyEditor({ bsProps = { xs: 12, md: 6 } }: { bsProps?: object }) {\r\n  const { character: { enemyOverride }, characterDispatch } = useContext(CharacterContext)\r\n  const { data } = useContext(DataContext)\r\n  const defaultVal = 10\r\n\r\n  const eLvl = enemyOverride.enemyLevel ?? data.get(input.lvl).value\r\n  const eDefRed = enemyOverride.enemyDefIgn_ ?? 0\r\n  const eDefIgn = enemyOverride.enemyDefRed_ ?? 0\r\n  return <Grid container spacing={1}>\r\n    <Grid item {...bsProps}>\r\n      <Button fullWidth sx={{ height: \"100%\" }} size=\"small\" component=\"a\" color=\"warning\" href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n        To get the specific resistance values of enemies, please visit the wiki.\r\n      </Button>\r\n    </Grid>\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{KeyMap.get(\"enemyLevel\")}</b>}\r\n        value={eLvl}\r\n        placeholder={KeyMap.getStr(\"enemyLevel\")}\r\n        defaultValue={data.get(input.lvl).value}\r\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value })}\r\n        onReset={() => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value: undefined })}\r\n      />\r\n    </Grid>\r\n    {allElementsWithPhy.map(eleKey => {\r\n      const statKey = `${eleKey}_enemyRes_`\r\n      const val = enemyOverride[statKey]\r\n      const elementImmunity = val === Number.MAX_VALUE\r\n      return <Grid item key={eleKey} {...bsProps}>\r\n        <StatInput\r\n          sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n          name={<ColorText color={eleKey}><b>{KeyMap.get(statKey)}</b></ColorText>}\r\n          value={val !== undefined ? (elementImmunity ? Infinity : val) : 10}\r\n          placeholder={elementImmunity ? \"∞ \" : KeyMap.getStr(statKey)}\r\n          defaultValue={defaultVal}\r\n          onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey, value })}\r\n          disabled={elementImmunity}\r\n          percent\r\n        >\r\n          <Button color={eleKey} onClick={() => characterDispatch({ type: \"enemyOverride\", statKey, value: elementImmunity ? defaultVal : Number.MAX_VALUE })} startIcon={elementImmunity ? <CheckBox /> : <CheckBoxOutlineBlank />} >\r\n            Immunity\r\n          </Button>\r\n        </StatInput>\r\n      </Grid>\r\n    })}\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{KeyMap.get(\"enemyDefIgn_\")}</b>}\r\n        value={eDefRed}\r\n        placeholder={KeyMap.getStr(\"enemyDefIgn_\")}\r\n        defaultValue={0}\r\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefIgn_\", value })}\r\n        percent\r\n      />\r\n    </Grid>\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{KeyMap.get(\"enemyDefRed_\")}</b>}\r\n        value={eDefIgn}\r\n        placeholder={KeyMap.getStr(\"enemyDefRed_\")}\r\n        defaultValue={0}\r\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefRed_\", value })}\r\n        percent\r\n      />\r\n    </Grid>\r\n    <Grid item xs={12}>\r\n      <small>Note: Genshin Impact halves resistance shred values below 0%. For the sake of calculations enter the RAW value and GO will do the rest. (e.g. 10% - 20% = -10%)</small>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import { CardContent, CardHeader, Grid, ListItem, Stack, Typography, Box } from \"@mui/material\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport CardDark from \"../../Components/Card/CardDark\";\nimport CardLight from \"../../Components/Card/CardLight\";\nimport CloseButton from \"../../Components/CloseButton\";\nimport ColorText from \"../../Components/ColoredText\";\nimport { EnemyExpandCard } from \"../../Components/EnemyEditor\";\nimport { FieldDisplayList, NodeFieldDisplay } from \"../../Components/FieldDisplay\";\nimport ModalWrapper from \"../../Components/ModalWrapper\";\nimport StatEditorList from \"../../Components/StatEditorList\";\nimport { CharacterContext } from \"../../Context/CharacterContext\";\nimport { DataContext } from \"../../Context/DataContext\";\nimport { allInputPremodKeys, uiInput as input } from \"../../Formula\";\nimport { ReadNode } from \"../../Formula/type\";\nimport { nodeVStr } from \"../../Formula/uiData\";\nimport { allEleDmgKeys, allEleResKeys } from \"../../KeyMap\";\n\nconst cols = {\n  xs: 1, md: 2, lg: 3\n}\n\nexport default function StatModal({ open, onClose }) {\n  const { t } = useTranslation(\"page_character\")\n  return <ModalWrapper open={open} onClose={onClose}>\n    <CardDark>\n      <CardHeader title={t`addStats.title`} action={<CloseButton onClick={onClose} />} />\n      <CardContent sx={{ pt: 0 }}>\n        <Stack spacing={1}>\n          <BonusStatsEditor />\n          <EnemyExpandCard />\n          <MainStatsCards />\n        </Stack>\n      </CardContent></CardDark>\n  </ModalWrapper>\n}\nconst keys = [...allInputPremodKeys]\nconst wrapperFunc = (e: JSX.Element, key?: string) => <Grid item key={key} xs={1}>{e}</Grid>\nfunction BonusStatsEditor() {\n  const { character: { bonusStats }, characterDispatch } = useContext(CharacterContext)\n  const setFilter = useCallback((bonusStats) => characterDispatch({ bonusStats }), [characterDispatch],)\n  return <CardLight>\n    <CardContent sx={{ display: \"flex\" }}>\n      <Grid container columns={cols} sx={{ pt: 1 }} spacing={1}>\n        <StatEditorList statKeys={keys} statFilters={bonusStats} setStatFilters={setFilter} wrapperFunc={wrapperFunc} />\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\n\nconst mainBaseKeys = [\"hp\", \"atk\", \"def\"] as const\nconst mainSubKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"] as const\nconst mainReadNodes = [...mainBaseKeys, ...mainSubKeys].map(k => input.total[k])\nconst mainEditKeys = [\"atk_\", \"atk\", \"hp_\", \"hp\", \"def_\", \"def\", ...mainSubKeys] as const\n\nconst otherStatKeys = [\n  ...allEleDmgKeys,\n  ...allEleResKeys,\n  \"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\"\n] as const\n\nconst miscStatkeys = allInputPremodKeys.filter(k => !mainEditKeys.includes(k as any) && !otherStatKeys.includes(k as any))\n\n\nfunction StatDisplayContent({ nodes, extra }: { nodes: ReadNode<number>[], extra?: Displayable }) {\n  const { data, oldData } = useContext(DataContext)\n  return <FieldDisplayList >\n    {nodes.map(rn => <NodeFieldDisplay component={ListItem} key={JSON.stringify(rn.info)} node={data.get(rn)} oldValue={oldData?.get(rn)?.value} />)}\n    {extra}\n  </FieldDisplayList>\n}\n\nfunction MainStatsCards() {\n  const { characterSheet } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const specialNode = data.get(input.special)\n  const charEle = characterSheet.elementKey\n  const isMelee = characterSheet.isMelee()\n\n  const otherStatReadNodes = useMemo(() => {\n    const nodes = otherStatKeys.filter(k => {\n      if (k.includes(charEle)) return false\n      if (isMelee && k.includes(\"physical\")) return true\n      return true\n    }).map(k => input.total[k])\n\n    return nodes.filter(n => !!data.get(n).value)\n  }, [data, charEle, isMelee])\n\n\n  const miscStatReadNodes = useMemo(() => miscStatkeys.map(k => input.total[k]).filter(n => data.get(n).value), [data])\n\n  return <CardLight><CardContent>\n    <Grid container columns={cols} spacing={1}>\n      <Grid item xs={1}>\n        <StatDisplayCard title=\"Main Stats\">\n          <StatDisplayContent nodes={mainReadNodes}\n            extra={specialNode && <ListItem sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n              <span><b>Special:</b> <ColorText color={specialNode.info.variant}>{specialNode.info.icon} {specialNode.info.name}</ColorText></span>\n              <span >{nodeVStr(specialNode)}</span>\n            </ListItem>}\n          />\n        </StatDisplayCard>\n      </Grid>\n      <Grid item xs={1}>\n        <StatDisplayCard title=\"Other Stats\">\n          <StatDisplayContent nodes={otherStatReadNodes} />\n        </StatDisplayCard>\n      </Grid>\n      {!!miscStatReadNodes.length && <Grid item xs={1}>\n        <StatDisplayCard title=\"Misc Stats\">\n          <StatDisplayContent nodes={miscStatReadNodes} />\n        </StatDisplayCard>\n      </Grid>}\n    </Grid>\n  </CardContent></CardLight>\n}\nfunction StatDisplayCard({ title, children }) {\n  return <CardDark>\n    <CardContent sx={{ py: 1 }}>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"subtitle1\">{title}</Typography>\n      </Box>\n    </CardContent>\n    {children}\n  </CardDark>\n}\n","import { createContext } from \"react\";\r\n\r\nexport const OptimizationTargetContext = createContext(undefined as string[] | undefined)\r\n","import { ArtSetExclusion } from \"../../../../Database/DataManagers/BuildSettingData\";\r\nimport { forEachNodes, mapFormulas } from \"../../../../Formula/internal\";\r\nimport { allOperations, constantFold, OptNode } from \"../../../../Formula/optimization\";\r\nimport { ConstantNode } from \"../../../../Formula/type\";\r\nimport { constant, customRead, max, min, threshold } from \"../../../../Formula/utils\";\r\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from \"../../../../Types/consts\";\r\nimport { assertUnreachable, objectKeyMap, objectMap, range } from \"../../../../Util/Util\";\r\n\r\ntype MicropassOperation = \"reaffine\" | \"pruneArtRange\" | \"pruneNodeRange\" | \"pruneOrder\"\r\nexport function pruneAll(nodes: OptNode[], minimum: number[], arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion, forced: Dict<MicropassOperation, boolean>): { nodes: OptNode[], arts: ArtifactsBySlot } {\r\n  let should = forced\r\n  /** If `key` makes progress, all operations in `value` should be performed */\r\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\r\n    pruneOrder: { pruneNodeRange: true },\r\n    pruneArtRange: { pruneNodeRange: true },\r\n    pruneNodeRange: { reaffine: true },\r\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true }\r\n  }\r\n  let count = 0\r\n  while (Object.values(should).some(x => x) && count++ < 20) {\r\n    if (should.pruneOrder) {\r\n      delete should.pruneOrder\r\n      const newArts = pruneOrder(arts, numTop, exclusion)\r\n      if (arts !== newArts) {\r\n        arts = newArts\r\n        should = { ...should, ...deps.pruneOrder }\r\n      }\r\n    }\r\n    if (should.pruneArtRange) {\r\n      delete should.pruneArtRange\r\n      const newArts = pruneArtRange(nodes, arts, minimum)\r\n      if (arts !== newArts) {\r\n        arts = newArts\r\n        should = { ...should, ...deps.pruneArtRange }\r\n      }\r\n    }\r\n    if (should.pruneNodeRange) {\r\n      delete should.pruneNodeRange\r\n      const newNodes = pruneNodeRange(nodes, arts)\r\n      if (nodes !== newNodes) {\r\n        nodes = newNodes\r\n        should = { ...should, ...deps.pruneNodeRange }\r\n      }\r\n    }\r\n    if (should.reaffine) {\r\n      delete should.reaffine\r\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\r\n      if (nodes !== newNodes || arts !== newArts) {\r\n        nodes = newNodes\r\n        arts = newArts\r\n        should = { ...should, ...deps.reaffine }\r\n      }\r\n    }\r\n  }\r\n  return { nodes, arts }\r\n}\r\n\r\nexport function pruneExclusion(nodes: OptNode[], exclusion: ArtSetExclusion): OptNode[] {\r\n  const maxValues: Dict<keyof typeof exclusion, number> = {}\r\n  for (const [key, e] of Object.entries(exclusion)) {\r\n    if (!e.includes(4)) continue\r\n    maxValues[key] = e.includes(2) ? 1 : 3\r\n  }\r\n  return mapFormulas(nodes, f => f, f => {\r\n    if (f.operation !== \"threshold\") return f\r\n\r\n    const [v, t, pass, fail] = f.operands\r\n    if (v.operation === \"read\" && t.operation === \"const\") {\r\n      const key = v.path[v.path.length - 1], thres = t.value\r\n      if (key in maxValues) {\r\n        const max: number = maxValues[key]\r\n        if (max < thres) return fail\r\n        if (thres === 2 && exclusion[key]!.includes(2))\r\n          return threshold(v, 4, pass, fail)\r\n      }\r\n    }\r\n    return f\r\n  })\r\n}\r\n\r\nfunction reaffine(nodes: OptNode[], arts: ArtifactsBySlot, forceRename = false): { nodes: OptNode[], arts: ArtifactsBySlot } {\r\n  const affineNodes = new Set<OptNode>(), topLevelAffine = new Set<OptNode>()\r\n\r\n  function visit(node: OptNode, isAffine: boolean) {\r\n    if (isAffine) affineNodes.add(node)\r\n    else node.operands.forEach(op => affineNodes.has(op) && topLevelAffine.add(op))\r\n  }\r\n\r\n  const dynKeys = new Set<string>()\r\n\r\n  forEachNodes(nodes, _ => { }, f => {\r\n    const { operation } = f\r\n    switch (operation) {\r\n      case \"read\":\r\n        dynKeys.add(f.path[1])\r\n        visit(f, true)\r\n        break\r\n      case \"add\": visit(f, f.operands.every(op => affineNodes.has(op))); break\r\n      case \"mul\": {\r\n        const nonConst = f.operands.filter(op => op.operation !== \"const\")\r\n        visit(f, nonConst.length === 0 || (nonConst.length === 1 && affineNodes.has(nonConst[0])))\r\n        break\r\n      }\r\n      case \"const\": visit(f, true); break\r\n      case \"res\": case \"threshold\": case \"sum_frac\":\r\n      case \"max\": case \"min\": visit(f, false); break\r\n      default: assertUnreachable(operation)\r\n    }\r\n  })\r\n\r\n  if ([...topLevelAffine].every(({ operation }) => operation === \"read\" || operation === \"const\") &&\r\n    Object.keys(arts.base).length === dynKeys.size)\r\n    return { nodes, arts }\r\n\r\n  let current = -1\r\n  function nextDynKey(): string {\r\n    while (dynKeys.has(`${++current}`));\r\n    return `${current}`\r\n  }\r\n\r\n  nodes.forEach(node => affineNodes.has(node) && topLevelAffine.add(node))\r\n  const affine = [...topLevelAffine].filter(f => f.operation !== \"const\")\r\n  const affineMap = new Map(affine.map(node => [node,\r\n    !forceRename && node.operation === \"read\" && node.path[0] === \"dyn\"\r\n      ? node\r\n      : { ...customRead([\"dyn\", `${nextDynKey()}`]), accu: \"add\" as const }]))\r\n  nodes = mapFormulas(nodes, f => affineMap.get(f) ?? f, f => f)\r\n\r\n  function reaffineArt(stat: DynStat): DynStat {\r\n    const values = constantFold([...affineMap.keys()], {\r\n      dyn: objectMap(stat, (value) => constant(value))\r\n    } as any, _ => true)\r\n    return Object.fromEntries([...affineMap.values()].map((v, i) => [v.path[1], (values[i] as ConstantNode<number>).value]))\r\n  }\r\n  const result = {\r\n    nodes, arts: {\r\n      base: reaffineArt(arts.base),\r\n      values: objectKeyMap(allSlotKeys, slot =>\r\n        arts.values[slot].map(({ id, set, values }) => ({ id, set, values: reaffineArt(values) })))\r\n    }\r\n  }\r\n  const offsets = Object.entries(reaffineArt({}))\r\n  for (const arts of Object.values(result.arts.values))\r\n    for (const { values } of arts)\r\n      for (const [key, baseValue] of offsets)\r\n        values[key] -= baseValue\r\n  return result\r\n}\r\n/** Remove artifacts that cannot be in top `numTop` builds */\r\nfunction pruneOrder(arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion): ArtifactsBySlot {\r\n  let progress = false\r\n  /**\r\n   * Note:\r\n   * This function assumes that every base (reaffined) stats are monotonically increasing. That is, artifacts\r\n   * with higher stats are better. This remains true as long as the main and substats are in increasing. Set\r\n   * effects that decrease enemy resistance (which is monotonically decreasing) does not violate this assumption\r\n   * as set effects are not handled here.\r\n   */\r\n  const allowRainbow = !exclusion.rainbow?.length, keys = Object.keys(arts.base)\r\n  const noSwitchIn = new Set(Object.entries(exclusion).filter(([_, v]) => v.length).map(([k]) => k) as ArtifactSetKey[])\r\n  const noSwitchOut = new Set(Object.entries(exclusion).filter(([_, v]) => v.includes(2) && !v.includes(4)).map(([k]) => k) as ArtifactSetKey[])\r\n  const values = objectKeyMap(allSlotKeys, slot => {\r\n    const list = arts.values[slot]\r\n    const newList = list.filter(art => {\r\n      let count = 0\r\n      return list.every(other => {\r\n        const otherBetterEqual = keys.every(k => (other.values[k] ?? 0) >= (art.values[k] ?? 0))\r\n        const otherMaybeBetter = keys.some(k => (other.values[k] ?? 0) > (art.values[k] ?? 0))\r\n        const otherBetter = otherBetterEqual && (otherMaybeBetter || other.id > art.id)\r\n        const canSwitch = (allowRainbow && !noSwitchIn.has(other.set!) && !noSwitchOut.has(art.set!)) || art.set === other.set\r\n        if (otherBetter && canSwitch) count++\r\n        return count < numTop\r\n      })\r\n    })\r\n    if (newList.length !== list.length) progress = true\r\n    return newList\r\n  })\r\n  return progress ? { base: arts.base, values } : arts\r\n}\r\n/** Remove artifacts that cannot reach `minimum` in any build */\r\nfunction pruneArtRange(nodes: OptNode[], arts: ArtifactsBySlot, minimum: number[]): ArtifactsBySlot {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  const wrap = { arts }\r\n  while (true) {\r\n    const artRanges = objectKeyMap(allSlotKeys, slot => computeArtRange(wrap.arts.values[slot]))\r\n    const otherArtRanges = objectKeyMap(allSlotKeys, key =>\r\n      addArtRange(Object.entries(artRanges).map(a => a[0] === key ? baseRange : a[1]).filter(x => x)))\r\n\r\n    let progress = false\r\n    const values = objectKeyMap(allSlotKeys, slot => {\r\n      const result = wrap.arts.values[slot].filter(art => {\r\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\r\n        const newRange = computeNodeRange(nodes, read)\r\n        return nodes.every((node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity))\r\n      })\r\n      if (result.length !== wrap.arts.values[slot].length)\r\n        progress = true\r\n      return result\r\n    })\r\n    if (!progress) break\r\n    wrap.arts = { base: wrap.arts.base, values }\r\n  }\r\n  return wrap.arts\r\n}\r\nfunction pruneNodeRange(nodes: OptNode[], arts: ArtifactsBySlot): OptNode[] {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  const reads = addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\r\n  const nodeRange = computeNodeRange(nodes, reads)\r\n\r\n  return mapFormulas(nodes, f => {\r\n    {\r\n      const { min, max } = nodeRange.get(f)!\r\n      if (min === max) return constant(min)\r\n    }\r\n    const { operation } = f\r\n    const operandRanges = f.operands.map(x => nodeRange.get(x)!)\r\n    switch (operation) {\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = operandRanges\r\n        if (value.min >= threshold.max) return f.operands[2]\r\n        else if (value.max < threshold.min) return f.operands[3]\r\n        if (pass.max === pass.min &&\r\n          fail.max === fail.min &&\r\n          pass.min === fail.min && isFinite(pass.min))\r\n          return constant(pass.max)\r\n        break\r\n      }\r\n      case \"min\": {\r\n        const newOperands = f.operands.filter((_, i) => {\r\n          const op1 = operandRanges[i]\r\n          return operandRanges.every((op2, j) => op1.min <= op2.max)\r\n        })\r\n        if (newOperands.length < operandRanges.length) return min(...newOperands)\r\n        break\r\n      }\r\n      case \"max\": {\r\n        const newOperands = f.operands.filter((_, i) => {\r\n          const op1 = operandRanges[i]\r\n          return operandRanges.every(op2 => op1.max >= op2.min)\r\n        })\r\n        if (newOperands.length < operandRanges.length) return max(...newOperands)\r\n        break\r\n      }\r\n    }\r\n    return f\r\n  }, f => f)\r\n}\r\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\r\n  const result: DynMinMax = {}\r\n  ranges.forEach(range => {\r\n    Object.entries(range).forEach(([key, value]) => {\r\n      if (result[key]) {\r\n        result[key].min += value.min\r\n        result[key].max += value.max\r\n      } else result[key] = { ...value }\r\n    })\r\n  })\r\n  return result\r\n}\r\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\r\n  const result: DynMinMax = {}\r\n  if (arts.length) {\r\n    Object.keys(arts[0].values)\r\n      .filter(key => arts.every(art => art.values[key]))\r\n      .forEach(key => result[key] = { min: arts[0].values[key], max: arts[0].values[key] })\r\n    arts.forEach(({ values }) => {\r\n      for (const [key, value] of Object.entries(values)) {\r\n        if (!result[key]) result[key] = { min: 0, max: value }\r\n        else {\r\n          if (result[key].max < value) result[key].max = value\r\n          if (result[key].min > value) result[key].min = value\r\n        }\r\n      }\r\n    })\r\n  }\r\n  return result\r\n}\r\nexport function computeFullArtRange(arts: ArtifactsBySlot): DynMinMax {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  return addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\r\n}\r\nexport function computeNodeRange(nodes: OptNode[], reads: DynMinMax): Map<OptNode, MinMax> {\r\n  const range = new Map<OptNode, MinMax>()\r\n\r\n  forEachNodes(nodes, _ => { }, f => {\r\n    const { operation } = f\r\n    const operands = f.operands.map(op => range.get(op)!)\r\n    let current: MinMax\r\n    switch (operation) {\r\n      case \"read\":\r\n        if (f.path[0] !== \"dyn\")\r\n          throw new Error(`Found non-dyn path ${f.path} while computing range`)\r\n        current = reads[f.path[1]] ?? { min: 0, max: 0 }\r\n        break\r\n      case \"const\": current = computeMinMax([f.value]); break\r\n      case \"add\": case \"min\": case \"max\":\r\n        current = {\r\n          min: allOperations[operation](operands.map(x => x.min)),\r\n          max: allOperations[operation](operands.map(x => x.max)),\r\n        }; break\r\n      case \"res\": current = {\r\n        min: allOperations[operation]([operands[0].max]),\r\n        max: allOperations[operation]([operands[0].min]),\r\n      }; break\r\n      case \"mul\": current = operands.reduce((accu, current) => computeMinMax([\r\n        accu.min * current.min, accu.min * current.max,\r\n        accu.max * current.min, accu.max * current.max,\r\n      ])); break\r\n      case \"threshold\":\r\n        if (operands[0].min >= operands[1].max) current = operands[2]\r\n        else if (operands[0].max < operands[1].min) current = operands[3]\r\n        else current = computeMinMax([], [operands[2], operands[3]])\r\n        break\r\n      case \"sum_frac\": {\r\n        const [x, c] = operands, sum = { min: x.min + c.min, max: x.max + c.max }\r\n        if (sum.min <= 0 && sum.max >= 0)\r\n          current = (x.min <= 0 && x.max >= 0) ? { min: NaN, max: NaN } : { min: -Infinity, max: Infinity }\r\n        else\r\n          // TODO: Check this\r\n          current = computeMinMax([\r\n            x.min / sum.min, x.min / sum.max,\r\n            x.max / sum.min, x.max / sum.max\r\n          ])\r\n        break\r\n      }\r\n      default: assertUnreachable(operation)\r\n    }\r\n    range.set(f, current)\r\n  })\r\n  return range\r\n}\r\nfunction computeMinMax(values: readonly number[], minMaxes: readonly MinMax[] = []): MinMax {\r\n  const max = Math.max(...values, ...minMaxes.map(x => x.max))\r\n  const min = Math.min(...values, ...minMaxes.map(x => x.min))\r\n  return { min, max }\r\n}\r\n\r\nexport function filterArts(arts: ArtifactsBySlot, filters: RequestFilter): ArtifactsBySlot {\r\n  return {\r\n    base: arts.base,\r\n    values: objectKeyMap(allSlotKeys, slot => {\r\n      const filter = filters[slot]\r\n      switch (filter.kind) {\r\n        case \"id\": return arts.values[slot].filter(art => filter.ids.has(art.id))\r\n        case \"exclude\": return arts.values[slot].filter(art => !filter.sets.has(art.set!))\r\n        case \"required\": return arts.values[slot].filter(art => filter.sets.has(art.set!))\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\r\n  return builds.flatMap(x => x).sort((a, b) => b.value - a.value).slice(0, maxNum)\r\n}\r\nexport function mergePlot(plots: PlotData[]): PlotData {\r\n  let scale = 0.01, reductionScaling = 2, maxCount = 1500\r\n  let keys = new Set(plots.flatMap(x => Object.values(x).map(v => Math.round(v.plot! / scale))))\r\n  while (keys.size > maxCount) {\r\n    scale *= reductionScaling\r\n    keys = new Set([...keys].map(key => Math.round(key / reductionScaling)))\r\n  }\r\n  const result: PlotData = {}\r\n  for (const plot of plots)\r\n    for (const build of Object.values(plot)) {\r\n      const x = Math.round(build.plot! / scale) * scale\r\n      if (!result[x] || result[x]!.value < build.value)\r\n        result[x] = build\r\n    }\r\n  return result\r\n}\r\n\r\nexport function countBuilds(arts: ArtifactsBySlot): number {\r\n  return allSlotKeys.reduce((_count, slot) => _count * arts.values[slot].length, 1)\r\n}\r\n\r\n\r\nexport function* filterFeasiblePerm(filters: Iterable<RequestFilter>, _artSets: ArtifactsBySlot): Iterable<RequestFilter> {\r\n  const artSets = objectMap(_artSets.values, values => new Set(values.map(v => v.set)))\r\n  filter_loop: for (const filter of filters) {\r\n    for (const [slot, f] of Object.entries(filter)) {\r\n      const available = artSets[slot]!\r\n      switch (f.kind) {\r\n        case \"required\": if ([...f.sets].every(s => !available.has(s))) continue filter_loop; break\r\n        case \"exclude\": if ([...available].every(s => f.sets.has(s!))) continue filter_loop; break\r\n        case \"id\": break\r\n      }\r\n    }\r\n    yield filter\r\n  }\r\n}\r\nexport function exclusionToAllowed(exclusion: number[] | undefined): Set<number> {\r\n  return new Set(exclusion?.includes(2)\r\n    ? exclusion.includes(4) ? [0, 1] : [0, 1, 4, 5]\r\n    : exclusion?.includes(4) ? [0, 1, 2, 3] : [0, 1, 2, 3, 4, 5])\r\n}\r\n/** A *disjoint* set of `RequestFilter` satisfying the exclusion rules */\r\nexport function* artSetPerm(exclusion: ArtSetExclusion, _artSets: ArtifactSetKey[]): Iterable<RequestFilter> {\r\n  /**\r\n   * This generation algorithm is separated into two parts:\r\n   * - \"Shape\" generation\r\n   *   - It first generates all build \"shapes\", e.g., AABBC, ABBCD\r\n   *   - It then filters the generated shapes according to the rainbow exclusion, e.g., removes ABBCD if excluding 3 rainbows\r\n   *   - It then merges the remaining shapes into wildcards, e.g. AABAA + AABAB + AABAC => AABA*\r\n   * - Shape filling\r\n   *   - From the given shapes, it tries to fill in all non-rainbow slots, e.g., slots A and B of AABBC, with actual artifacts\r\n   *   - It then fills the rainbow slots, e.g., slot C of AABBC while ensuring the exclusion rule of each sets\r\n   */\r\n  const artSets = [...new Set(_artSets)], allowedRainbows = exclusionToAllowed(exclusion.rainbow)\r\n  let shapes: number[][] = []\r\n  function populateShapes(current: number[], list: Set<number>, rainbows: number[]) {\r\n    if (current.length === 5) {\r\n      if (allowedRainbows.has(rainbows.length))\r\n        shapes.push(current)\r\n      return\r\n    }\r\n    for (const i of list) populateShapes([...current, i], list, rainbows.filter(j => j !== i))\r\n    populateShapes([...current, current.length], new Set([...list, current.length]), [...rainbows, current.length])\r\n  }\r\n  populateShapes([0], new Set([0]), [0])\r\n  function indexOfShape(shape: number[], replacing: number) {\r\n    if (range(replacing + 1, 4).some(i => shape[i] !== 5))\r\n      return undefined\r\n    shape = [...shape]\r\n    shape[replacing] = 5\r\n    return shape.reduce((a, b) => a * 6 + b, 0)\r\n  }\r\n  for (let replacing = 4; replacing >= 0; replacing--) {\r\n    const required: Map<number, number> = new Map()\r\n    for (const shape of shapes) {\r\n      const id = indexOfShape(shape, replacing)\r\n      if (id === undefined) continue\r\n      required.set(id, (required.get(id) ?? new Set(shape.slice(0, replacing)).size + 1) - 1)\r\n    }\r\n    for (const [id, remaining] of required.entries()) {\r\n      if (remaining === 0) {\r\n        const shape = [...shapes.find(shape => indexOfShape(shape, replacing) === id)!]\r\n        shape[replacing] = 5\r\n        shapes = shapes.filter(shape => indexOfShape(shape, replacing) !== id)\r\n        shapes.push(shape)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Shapes are now calculated and merged, proceed to fill in the sets\r\n\r\n  const noFilter = { kind: \"exclude\" as const, sets: new Set<ArtifactSetKey>() }\r\n  const result: RequestFilter = objectKeyMap(allSlotKeys, _ => noFilter)\r\n\r\n  const counts = { ...objectMap(exclusion, _ => 0), ...objectKeyMap(artSets, _ => 0) }\r\n  const allowedCounts = objectMap(exclusion, exclusionToAllowed)\r\n\r\n  function* check(shape: number[]) {\r\n    const used: Set<ArtifactSetKey> = new Set()\r\n    let groupped: number[][] = [], rainbows: number[] = []\r\n    for (const i of shape) {\r\n      groupped.push([])\r\n      if (i === 5) rainbows.push(groupped.length - 1)\r\n      else groupped[i].push(groupped.length - 1)\r\n    }\r\n    groupped = groupped.filter(v => v.length).sort((a, b) => b.length - a.length)\r\n    let usableRainbows = rainbows.length\r\n\r\n    // Inception.. because js doesn't like functions inside a for-loop\r\n    function* check(i: number) {\r\n      if (i === groupped.length)\r\n        return yield* check_free(0)\r\n\r\n      for (const set of artSets) {\r\n        if (used.has(set)) continue\r\n        const length = groupped[i].length, allowedSet = allowedCounts[set]\r\n        let requiredRainbows = 0\r\n\r\n        if (allowedSet && !allowedSet.has(length)) {\r\n          // Look ahead and see if we have enough rainbows to fill to the next `allowedSet` if we use the current set\r\n          requiredRainbows = (range(length + 1, 5).find(l => allowedSet.has(l)) ?? 6) - length\r\n          if (requiredRainbows > usableRainbows) continue // Not enough rainbows. Next..\r\n        }\r\n\r\n        used.add(set)\r\n        counts[set] = groupped[i].length\r\n        groupped[i].forEach(j => result[allSlotKeys[j]] = { kind: \"required\", sets: new Set([set]) })\r\n        usableRainbows -= requiredRainbows\r\n\r\n        yield* check(i + 1)\r\n\r\n        usableRainbows += requiredRainbows\r\n        counts[set] = 0\r\n        used.delete(set)\r\n      }\r\n    }\r\n    // We separate filling rainbow slots from groupped slots because it has an entirely\r\n    // different set of rules regarding what can be filled and what states to be kept.\r\n    function* check_free(i: number) {\r\n      const remaining = rainbows.length - i, isolated: ArtifactSetKey[] = [], missing: ArtifactSetKey[] = [], rejected: ArtifactSetKey[] = []\r\n      let required = 0\r\n      for (const set of artSets) {\r\n        const allowedSet = allowedCounts[set], count = counts[set]\r\n        if (!allowedSet) continue\r\n        if (range(1, remaining).every(j => !allowedSet.has(count + j))) rejected.push(set)\r\n        else if (!allowedSet.has(count)) {\r\n          required += [...allowedSet].find(x => x > count)! - count\r\n          missing.push(set)\r\n        }\r\n        else if (range(0, remaining).some(j => !allowedSet.has(count + j))) isolated.push(set)\r\n      }\r\n      if (required > remaining) return\r\n      if (i === rainbows.length) {\r\n        yield { ...result }\r\n        return\r\n      }\r\n      if (required === remaining) {\r\n        for (const set of missing) {\r\n          counts[set]++\r\n          result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\r\n          yield* check_free(i + 1)\r\n          counts[set]--\r\n        }\r\n        return\r\n      }\r\n      for (const set of [...isolated, ...missing]) {\r\n        counts[set]++\r\n        result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\r\n        yield* check_free(i + 1)\r\n        counts[set]--\r\n      }\r\n      result[allSlotKeys[rainbows[i]]] = { kind: \"exclude\", sets: new Set([...missing, ...rejected, ...isolated]) }\r\n      yield* check_free(i + 1)\r\n    }\r\n    yield* check(0)\r\n  }\r\n  for (const shape of shapes) yield* check(shape)\r\n}\r\n\r\nexport type RequestFilter = StrictDict<SlotKey,\r\n  { kind: \"required\", sets: Set<ArtifactSetKey> } |\r\n  { kind: \"exclude\", sets: Set<ArtifactSetKey> } |\r\n  { kind: \"id\", ids: Set<string> }\r\n>\r\n\r\nexport type DynStat = { [key in string]: number }\r\nexport type ArtifactBuildData = {\r\n  id: string\r\n  set?: ArtifactSetKey\r\n  values: DynStat\r\n}\r\nexport type ArtifactsBySlot = { base: DynStat, values: StrictDict<SlotKey, ArtifactBuildData[]> }\r\n\r\nexport type PlotData = Dict<number, Build>\r\nexport interface Build {\r\n  value: number\r\n  plot?: number\r\n  artifactIds: string[]\r\n}\r\n\r\nexport type DynMinMax = { [key in string]: MinMax }\r\nexport type MinMax = { min: number, max: number }\r\n","import { Box } from \"@mui/material\"\r\nimport { getArtSheet } from \"../../Data/Artifacts\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport DocumentDisplay from \"../DocumentDisplay\"\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum,\r\n  hideHeader?: boolean,\r\n  conditionalsOnly?: boolean\r\n}\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, hideHeader = false, conditionalsOnly = false }: Data) {\r\n  const sheet = getArtSheet(setKey)\r\n\r\n  const document = conditionalsOnly ? sheet.setEffectDocument(setNumKey)?.filter(section => \"states\" in section) : sheet.setEffectDocument(setNumKey)\r\n  return <Box display=\"flex\" flexDirection=\"column\">\r\n    {document ? <DocumentDisplay sections={document} hideHeader={hideHeader} /> : null}\r\n  </Box>\r\n}\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../../../../Database/Database\";\r\nimport { BuildSetting } from \"../../../../Database/DataManagers/BuildSettingData\";\r\nimport { CharacterKey } from \"../../../../Types/consts\";\r\n\r\nexport default function useBuildSetting(characterKey: CharacterKey) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [buildSetting, setBuildSetting] = useState(() => database.buildSettings.get(characterKey))\r\n  useEffect(() => setBuildSetting(database.buildSettings.get(characterKey)), [database, characterKey])\r\n  useEffect(() =>\r\n    database.buildSettings.follow(characterKey, (k, r, v) => r === \"update\" && setBuildSetting(v)),\r\n    [characterKey, setBuildSetting, database])\r\n  const buildSettingDispatch = useCallback((action: Partial<BuildSetting>) => characterKey && database.buildSettings.set(characterKey, action), [characterKey, database],)\r\n\r\n  return { buildSetting: buildSetting as BuildSetting, buildSettingDispatch }\r\n}\r\n","import { allArtifactSets, allSlotKeys, ArtifactSetKey, SlotKey } from '@genshin-optimizer/consts';\nimport { CheckBox, CheckBoxOutlineBlank, Replay, Settings } from '@mui/icons-material';\nimport BlockIcon from '@mui/icons-material/Block';\nimport ShowChartIcon from '@mui/icons-material/ShowChart';\nimport StarRoundedIcon from '@mui/icons-material/StarRounded';\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, Stack, Typography } from '@mui/material';\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport SetEffectDisplay from '../../../../../Components/Artifact/SetEffectDisplay';\nimport SlotIcon from '../../../../../Components/Artifact/SlotIcon';\nimport CardDark from '../../../../../Components/Card/CardDark';\nimport CardLight from '../../../../../Components/Card/CardLight';\nimport CloseButton from '../../../../../Components/CloseButton';\nimport ColorText from '../../../../../Components/ColoredText';\nimport InfoTooltip, { InfoTooltipInline } from '../../../../../Components/InfoTooltip';\nimport ModalWrapper from '../../../../../Components/ModalWrapper';\nimport SqBadge from '../../../../../Components/SqBadge';\nimport { Translate } from '../../../../../Components/Translate';\nimport { CharacterContext } from '../../../../../Context/CharacterContext';\nimport { DataContext, dataContextObj } from '../../../../../Context/DataContext';\nimport { getArtSheet, setKeysByRarities } from '../../../../../Data/Artifacts';\nimport { artifactDefIcon } from '../../../../../Data/Artifacts/ArtifactSheet';\nimport { DatabaseContext } from '../../../../../Database/Database';\nimport { handleArtSetExclusion } from '../../../../../Database/DataManagers/BuildSettingData';\nimport { UIData } from '../../../../../Formula/uiData';\nimport { constant } from '../../../../../Formula/utils';\nimport useForceUpdate from '../../../../../ReactHooks/useForceUpdate';\nimport { iconInlineProps } from '../../../../../SVGIcons';\nimport { SetNum } from '../../../../../Types/consts';\nimport { deepClone, objectKeyMap } from '../../../../../Util/Util';\nimport useBuildSetting from '../useBuildSetting';\n\nexport default function ArtifactSetConfig({ disabled }: { disabled?: boolean, }) {\n  const { t } = useTranslation([\"page_character_optimize\", \"sheet\"])\n  const dataContext = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const { character: { key: characterKey, conditional }, characterDispatch } = useContext(CharacterContext)\n  const { buildSetting: { artSetExclusion }, buildSettingDispatch } = useBuildSetting(characterKey)\n  const [open, setOpen] = useState(false)\n  const onOpen = useCallback(() => setOpen(true), [setOpen])\n  const onClose = useCallback(() => setOpen(false), [setOpen])\n\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  useEffect(() => database.arts.followAny(forceUpdate), [database, forceUpdate])\n\n  const artKeysByRarity = useMemo(() => Object.entries(setKeysByRarities)\n    .reverse().flatMap(([, sets]) => sets)\n    .filter(key => !key.includes(\"Prayers\"))\n    , [])\n  const { artKeys, artSlotCount } = useMemo(() => {\n    const artSlotCount = objectKeyMap(artKeysByRarity, _ => objectKeyMap(allSlotKeys, _ => 0))\n    database.arts.values.forEach(art => artSlotCount[art.setKey] && artSlotCount[art.setKey][art.slotKey]++)\n    const artKeys = [...artKeysByRarity].sort((a, b) =>\n      +(getNumSlots(artSlotCount[a]) < 2) - +(getNumSlots(artSlotCount[b]) < 2))\n    return dbDirty && { artKeys, artSlotCount }\n  }, [dbDirty, database, artKeysByRarity])\n\n  const allowRainbow2 = !artSetExclusion.rainbow?.includes(2)\n  const allowRainbow4 = !artSetExclusion.rainbow?.includes(4)\n\n  const { allow2, allow4 } = useMemo(() => ({\n    allow2: artKeysByRarity.filter(k => !artSetExclusion[k]?.includes(2)).length,\n    allow4: artKeysByRarity.filter(k => !artSetExclusion[k]?.includes(4)).length,\n  }), [artKeysByRarity, artSetExclusion])\n  const exclude2 = artKeysByRarity.length - allow2, exclude4 = artKeysByRarity.length - allow4\n  const artifactCondCount = useMemo(() =>\n    (Object.keys(conditional)).filter(k =>\n      allArtifactSets.includes(k as ArtifactSetKey) && conditional[k]).length\n    , [conditional])\n  const fakeDataContextObj = useMemo(() => ({\n    ...dataContext,\n    data: new UIData({ ...dataContext.data.data[0], artSet: objectKeyMap(allArtifactSets, _ => constant(4)) }, undefined)\n  }), [dataContext])\n  const resetArtConds = useCallback(() => {\n    const tconditional = Object.fromEntries(Object.entries(conditional).filter(([k, v]) => !allArtifactSets.includes(k as any)))\n    characterDispatch({ conditional: tconditional })\n  }, [conditional, characterDispatch]);\n  const setAllExclusion = useCallback(\n    (setnum: number, exclude = true) => {\n      const artSetExclusion_ = deepClone(artSetExclusion)\n      artKeysByRarity.forEach(k => {\n        if (exclude) artSetExclusion_[k] = [...(artSetExclusion_[k] ?? []), setnum];\n        else if (artSetExclusion_[k]) artSetExclusion_[k] = artSetExclusion_[k].filter(n => n !== setnum);\n      })\n      buildSettingDispatch({ artSetExclusion: artSetExclusion_ })\n    },\n    [artKeysByRarity, artSetExclusion, buildSettingDispatch],\n  )\n\n  return <>\n    <CardLight sx={{ display: \"flex\" }}>\n      <CardContent sx={{ flexGrow: 1 }} >\n        <Typography>\n          <strong>{t`artSetConfig.title`}</strong>\n        </Typography>\n        <Stack spacing={1}>\n          <Typography>{t`artSetConfig.setEffCond`} <SqBadge color={artifactCondCount ? \"success\" : \"warning\"}>{artifactCondCount} {t(\"artSetConfig.enabled\")}</SqBadge></Typography>\n          <Typography>{t`sheet:2set`} <SqBadge color=\"success\">{allow2} <ShowChartIcon {...iconInlineProps} /> {t(\"artSetConfig.allowed\")}</SqBadge>{!!exclude2 && \" / \"}{!!exclude2 && <SqBadge color=\"secondary\">{exclude2} <BlockIcon {...iconInlineProps} /> {t(\"artSetConfig.excluded\")}</SqBadge>}</Typography>\n          <Typography>{t`sheet:4set`} <SqBadge color=\"success\">{allow4} <ShowChartIcon {...iconInlineProps} /> {t(\"artSetConfig.allowed\")}</SqBadge>{!!exclude4 && \" / \"}{!!exclude4 && <SqBadge color=\"secondary\">{exclude4} <BlockIcon {...iconInlineProps} /> {t(\"artSetConfig.excluded\")}</SqBadge>}</Typography>\n          <Typography>{t`artSetConfig.2rainbow`} <SqBadge color={allowRainbow2 ? \"success\" : \"secondary\"}>{allowRainbow2 ? <ShowChartIcon  {...iconInlineProps} /> : <BlockIcon {...iconInlineProps} />} {allowRainbow2 ? t(\"artSetConfig.allowed\") : \"Excluded\"}</SqBadge></Typography>\n          <Typography>{t`artSetConfig.4rainbow`} <SqBadge color={allowRainbow4 ? \"success\" : \"secondary\"}>{allowRainbow4 ? <ShowChartIcon  {...iconInlineProps} /> : <BlockIcon {...iconInlineProps} />} {allowRainbow4 ? t(\"artSetConfig.allowed\") : \"Excluded\"}</SqBadge></Typography>\n        </Stack>\n\n      </CardContent>\n      <Button onClick={onOpen} disabled={disabled} color=\"info\" sx={{ borderRadius: 0 }}>\n        <Settings />\n      </Button>\n    </CardLight>\n    <ModalWrapper open={open} onClose={onClose} ><CardDark>\n      <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\n        <Typography variant=\"h6\" >{t`artSetConfig.title`}</Typography>\n        <CloseButton onClick={onClose} />\n      </CardContent>\n      <Divider />\n      <CardContent >\n        <CardLight sx={{ mb: 1 }}><CardContent>\n          <Box display=\"flex\" gap={1}>\n            <Typography><strong>{t`artSetConfig.modal.setCond.title`}</strong></Typography>\n            <Typography sx={{ flexGrow: 1 }}><SqBadge color={artifactCondCount ? \"success\" : \"warning\"}>{artifactCondCount} {t(\"artSetConfig.selected\")}</SqBadge></Typography>\n            <Button size='small' onClick={resetArtConds} color=\"error\" startIcon={<Replay />}>{t`artSetConfig.modal.setCond.reset`}</Button>\n          </Box>\n          <Typography>{t`artSetConfig.modal.setCond.text`}</Typography>\n        </CardContent></CardLight>\n        <CardLight sx={{ mb: 1 }}><CardContent>\n          <Typography sx={{ flexGrow: 1 }}><strong>\n            <Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.title\" >Artifact Sets <ColorText color='success'>Allowed<ShowChartIcon  {...iconInlineProps} /></ColorText> / <ColorText color='secondary' variant='light'>Excluded<BlockIcon {...iconInlineProps} /></ColorText></Trans>\n          </strong></Typography>\n          <Typography><Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.intro\">You can allow/exclude which sets you want the builder to consider. In the following examples, <strong>A</strong> is on-set, and <strong>R</strong> is rainbow(off-set)</Trans></Typography>\n          <Typography><Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.2set\"><strong><ColorText color='secondary' variant='light'>Excluding<BlockIcon {...iconInlineProps} /> 2-Set</ColorText></strong> would exclude 2-Set builds: <strong><ColorText color='secondary' variant='light'>AA</ColorText>RRR</strong> and <strong><ColorText color='secondary' variant='light'>AAA</ColorText>RR</strong>.</Trans></Typography>\n          <Typography><Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.4set\"><strong><ColorText color='secondary' variant='light'>Excluding<BlockIcon {...iconInlineProps} /> 4-Set</ColorText></strong> would exclude 4-Set builds: <strong><ColorText color='secondary' variant='light'>AAAA</ColorText>R</strong> and <strong><ColorText color='secondary' variant='light'>AAAAA</ColorText></strong>.</Trans></Typography>\n          <Typography><Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.2rain\"><strong><ColorText color='secondary' variant='light'>Excluding<BlockIcon {...iconInlineProps} /> 3-Rainbow</ColorText></strong> would exclude 2-Set + 3-Rainbow builds: <strong>AA<ColorText color='secondary' variant='light'>RRR</ColorText></strong> and <strong>AAA<ColorText color='secondary' variant='light'>RR</ColorText></strong>.</Trans></Typography>\n          <Typography><Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.4rain\"><strong><ColorText color='secondary' variant='light'>Excluding<BlockIcon {...iconInlineProps} /> 5-Rainbow</ColorText></strong> would exclude full 5-Rainbow builds: <strong><ColorText color='secondary' variant='light'>RRRRR</ColorText></strong>.</Trans></Typography>\n        </CardContent></CardLight>\n        <Grid container columns={{ xs: 2, lg: 3 }} sx={{ mb: 1 }} spacing={1}>\n          <Grid item xs={1}>\n            <AllSetAllowExcludeCard setNum={2} numAllow={allow2} numExclude={exclude2} setAllExclusion={setAllExclusion} />\n          </Grid>\n          <Grid item xs={1}>\n            <AllSetAllowExcludeCard setNum={4} numAllow={allow4} numExclude={exclude4} setAllExclusion={setAllExclusion} />\n          </Grid>\n          <Grid item xs={1}>\n            <CardLight>\n              <CardContent>\n                <Typography gutterBottom><strong><Trans t={t} i18nKey=\"artSetConfig.alExRainbow\"><ColorText color='success'>Allow <ShowChartIcon  {...iconInlineProps} /></ColorText> / <ColorText color='secondary' variant='light'>Exclude <BlockIcon {...iconInlineProps} /></ColorText> Rainbow Builds</Trans></strong></Typography>\n                <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n                  <Button fullWidth onClick={() => buildSettingDispatch({ artSetExclusion: handleArtSetExclusion(artSetExclusion, \"rainbow\", 2) })} color={allowRainbow2 ? \"success\" : \"secondary\"} startIcon={!allowRainbow2 ? <CheckBoxOutlineBlank /> : <CheckBox />} endIcon={allowRainbow2 ? <ShowChartIcon /> : <BlockIcon />}>{t`artSetConfig.2rainbow`}</Button>\n                  <Button fullWidth onClick={() => buildSettingDispatch({ artSetExclusion: handleArtSetExclusion(artSetExclusion, \"rainbow\", 4) })} color={allowRainbow4 ? \"success\" : \"secondary\"} startIcon={!allowRainbow4 ? <CheckBoxOutlineBlank /> : <CheckBox />} endIcon={allowRainbow4 ? <ShowChartIcon /> : <BlockIcon />}>{t`artSetConfig.4rainbow`}</Button>\n                </Box>\n              </CardContent>\n            </CardLight>\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} columns={{ xs: 2, lg: 3 }}>\n          {artKeys.map(setKey => <ArtifactSetCard key={setKey} setKey={setKey} fakeDataContextObj={fakeDataContextObj} slotCount={artSlotCount[setKey]} />)}\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <CloseButton large onClick={onClose} />\n      </CardContent>\n    </CardDark></ModalWrapper >\n  </>\n}\nfunction AllSetAllowExcludeCard({ numAllow, numExclude, setNum, setAllExclusion }: { numAllow: number, numExclude: number, setNum: 2 | 4, setAllExclusion: (setNum: 2 | 4, exclude?: boolean) => void }) {\n  const { t } = useTranslation([\"page_character_optimize\", \"sheet\"])\n  return <CardLight>\n    <CardContent>\n      <Typography gutterBottom><strong>{t(`sheet:${setNum}set`)}</strong> <SqBadge color=\"success\">{numAllow} <ShowChartIcon  {...iconInlineProps} /> {t(\"artSetConfig.allowed\")}</SqBadge>{!!numExclude && \" / \"}{!!numExclude && <SqBadge color=\"secondary\">{numExclude} <BlockIcon {...iconInlineProps} /> {t(\"artSetConfig.excluded\")}</SqBadge>}</Typography>\n      <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n        <Button fullWidth disabled={!numExclude} onClick={() => setAllExclusion(setNum, false)} color='success' startIcon={<ShowChartIcon />}>{t(`artSetConfig.allowAll${setNum}set`)}</Button>\n        <Button fullWidth disabled={!numAllow} onClick={() => setAllExclusion(setNum, true)} color='secondary' startIcon={<BlockIcon />}>{t(`artSetConfig.excludeAll${setNum}set`)}</Button>\n      </Box>\n    </CardContent>\n  </CardLight>\n}\nfunction ArtifactSetCard({ setKey, fakeDataContextObj, slotCount }: { setKey: ArtifactSetKey, fakeDataContextObj: dataContextObj, slotCount: Record<SlotKey, number> }) {\n  const { t } = useTranslation(\"sheet\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { buildSetting, buildSettingDispatch } = useBuildSetting(characterKey)\n  const { artSetExclusion } = buildSetting\n  const setExclusionSet = artSetExclusion?.[setKey] ?? []\n  const allow4 = !setExclusionSet.includes(4)\n  const slots = getNumSlots(slotCount)\n  const sheet = getArtSheet(setKey)\n  /* Assumes that all conditionals are from 4-Set. needs to change if there are 2-Set conditionals */\n  const set4CondNums = useMemo(() => {\n    if (!allow4) return []\n    return Object.keys(sheet.setEffects).filter(setNumKey => sheet.setEffects[setNumKey]?.document.some(doc => \"states\" in doc))\n  }, [sheet.setEffects, allow4])\n  const exclude2 = setExclusionSet.includes(2)\n  const exclude4 = setExclusionSet.includes(4)\n  return <Grid item key={setKey} xs={1}>\n    <CardLight sx={{ height: \"100%\", opacity: slots < 2 ? \"50%\" : undefined }}>\n      <Box className={`grad-${sheet.rarity[0]}star`} width=\"100%\" sx={{ display: \"flex\" }} >\n        <Box component=\"img\" src={artifactDefIcon(setKey)} sx={{ height: 100, width: \"auto\", mx: -1 }} />\n        <Box sx={{ flexGrow: 1, px: 1, display: \"flex\", flexDirection: \"column\", justifyContent: \"center\" }}>\n          <Typography variant=\"h6\">{sheet.name ?? \"\"}</Typography>\n          <Box >\n            {/* If there is ever a 2-Set conditional, we will need to change this */}\n            <Typography variant=\"subtitle1\">\n              {sheet.rarity.map((ns, i) => <Box component=\"span\" sx={{ display: \"inline-flex\", alignItems: \"center\" }} key={ns}>{ns} <StarRoundedIcon fontSize='inherit' /> {i < (sheet.rarity.length - 1) ? \"/ \" : null}</Box>)}\n              {' '}\n              <InfoTooltipInline title={<Box>\n                <Typography><SqBadge color=\"success\">{t`2set`}</SqBadge></Typography>\n                <Typography><Translate ns={`artifact_${setKey}_gen`} key18={\"setEffects.2\"} /></Typography>\n                <Box paddingTop={2} sx={{ opacity: setExclusionSet.includes(4) ? 0.6 : 1 }} >\n                  <Typography><SqBadge color=\"success\">{t`4set`}</SqBadge></Typography>\n                  <Typography><Translate ns={`artifact_${setKey}_gen`} key18={\"setEffects.4\"} /></Typography>\n                </Box>\n              </Box>} />\n            </Typography>\n          </Box>\n          <Box sx={{ display: \"flex\", gap: 1 }}>{Object.entries(slotCount).map(([slotKey, count]) => <Typography key={slotKey} sx={{ flexGrow: 1 }} variant=\"subtitle2\" ><SqBadge sx={{ width: \"100%\" }} color={count ? \"primary\" : \"secondary\"}><SlotIcon slotKey={slotKey} iconProps={iconInlineProps} /> {count}</SqBadge></Typography>)}</Box>\n        </Box>\n      </Box>\n      <ButtonGroup sx={{ \".MuiButton-root\": { borderRadius: 0 } }} fullWidth>\n        <Button startIcon={exclude2 ? <CheckBoxOutlineBlank /> : <CheckBox />} onClick={() => buildSettingDispatch({ artSetExclusion: handleArtSetExclusion(artSetExclusion, setKey, 2) })} color={exclude2 ? 'secondary' : 'success'} endIcon={exclude2 ? <BlockIcon /> : <ShowChartIcon />}>{t`2set`}</Button>\n        <Button startIcon={exclude4 ? <CheckBoxOutlineBlank /> : <CheckBox />} onClick={() => buildSettingDispatch({ artSetExclusion: handleArtSetExclusion(artSetExclusion, setKey, 4) })} color={exclude4 ? 'secondary' : 'success'} endIcon={exclude4 ? <BlockIcon /> : <ShowChartIcon />}>{t`4set`}</Button>\n      </ButtonGroup>\n\n      {!!set4CondNums.length && <DataContext.Provider value={fakeDataContextObj}>\n        <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n          {set4CondNums.map(setNumKey =>\n            <SetEffectDisplay key={setNumKey} setKey={setKey} setNumKey={parseInt(setNumKey) as SetNum} hideHeader conditionalsOnly />\n          )}\n        </CardContent>\n      </DataContext.Provider>}\n    </CardLight>\n  </Grid >\n}\n\nfunction getNumSlots(slotCount: Record<string, number>): number {\n  return Object.values(slotCount).reduce((tot, v) => tot + (v ? 1 : 0), 0)\n}\n","import { MenuItem } from \"@mui/material\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport DropdownButton from \"../../../../../Components/DropdownMenu/DropdownButton\"\r\n\r\nconst levels = [0, 4, 8, 12, 16, 20] as const\r\nexport default function AssumeFullLevelToggle({ mainStatAssumptionLevel = 0, setmainStatAssumptionLevel, disabled }) {\r\n  const { t } = useTranslation(\"page_character_optimize\")\r\n  return <DropdownButton fullWidth color={mainStatAssumptionLevel ? \"success\" : \"primary\"} disabled={disabled}\r\n    title={mainStatAssumptionLevel ? t(\"mainStat.assumptionLvl.lvl\", { lvl: mainStatAssumptionLevel }) : t(\"mainStat.assumptionLvl.no\")}>\r\n    {levels.map((lvl) => <MenuItem key={lvl} onClick={() => setmainStatAssumptionLevel(lvl)}>{lvl ? t(\"mainStat.assumptionLvl.lvl\", { lvl }) : t(\"mainStat.assumptionLvl.no\")}</MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { CardContent, Divider, Typography } from '@mui/material';\r\nimport { useContext } from 'react';\r\nimport { CharacterContext } from '../../../../../Context/CharacterContext';\r\nimport CardLight from '../../../../../Components/Card/CardLight';\r\nimport { NodeFieldDisplay } from '../../../../../Components/FieldDisplay';\r\nimport { DataContext } from '../../../../../Context/DataContext';\r\nimport { uiInput as input } from '../../../../../Formula';\r\nimport { NumNode } from '../../../../../Formula/type';\r\nexport default function BonusStatsCard() {\r\n  const { character: { bonusStats } } = useContext(CharacterContext)\r\n  const { data } = useContext(DataContext)\r\n  const bonusStatsKeys = Object.keys(bonusStats)\r\n  if (!bonusStatsKeys.length) return null\r\n  const nodes = bonusStatsKeys.map(k => data.get(input.customBonus[k] as NumNode))\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Typography>Bonus Stats</Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      {nodes.map(n => <NodeFieldDisplay key={JSON.stringify(n.info)} node={n} />)}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { Alert, Grid, LinearProgress, styled, Typography } from '@mui/material';\r\nimport { ReactNode } from 'react';\r\nimport { timeStringMs } from '../../../../../Util/TimeUtil';\r\n\r\nexport const warningBuildNumber = 10000000\r\nexport type BuildStatus = {\r\n  type: \"active\" | \"inactive\"\r\n  tested: number      // tested, including `failed`\r\n  failed: number      // tested but fail the filter criteria, e.g., not enough EM\r\n  skipped: number\r\n  total: number\r\n  startTime?: number\r\n  finishTime?: number\r\n}\r\n\r\nconst Monospace = styled(\"strong\")({\r\n  fontFamily: \"monospace\"\r\n})\r\n\r\nconst BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({\r\n  height: 10,\r\n  borderRadius: 5,\r\n}));\r\nexport default function BuildAlert({ status: { type, tested, failed, skipped, total, startTime, finishTime }, characterName }: { status: BuildStatus, characterName: Displayable }) {\r\n  const hasTotal = isFinite(total)\r\n\r\n  const generatingBuilds = type !== \"inactive\"\r\n  const unskipped = total - skipped\r\n\r\n  const testedString = <Monospace>{tested.toLocaleString()}</Monospace>\r\n  const unskippedString = <Monospace>{unskipped.toLocaleString()}</Monospace>\r\n  const skippedText = !!skipped && <span>(<b>{<Monospace>{skipped.toLocaleString()}</Monospace>}</b> skipped)</span>\r\n\r\n  const durationString = <Monospace>{timeStringMs(Math.round((finishTime ?? performance.now()) - (startTime ?? NaN)))}</Monospace>\r\n\r\n  const color = \"success\" as \"success\" | \"warning\" | \"error\"\r\n  let title = \"\" as ReactNode\r\n  let subtitle = \"\" as ReactNode\r\n  let progress = undefined as undefined | number\r\n\r\n  if (generatingBuilds) {\r\n    progress = tested * 100 / (unskipped)\r\n    title = <Typography>Generating and testing {testedString}{hasTotal ? <>/{unskippedString}</> : undefined} build configurations against the criteria for <b>{characterName}</b>. {skippedText}</Typography>\r\n    subtitle = <Typography>Time elapsed: {durationString}</Typography>\r\n  } else if (tested + skipped) {\r\n    progress = 100\r\n    title = <Typography>Generated and tested {testedString} Build configurations against the criteria for <b>{characterName}</b>. {skippedText}</Typography>\r\n    subtitle = <Typography>Total duration: {durationString}</Typography>\r\n  } else {\r\n    return null\r\n  }\r\n\r\n  return <Alert severity={color} variant=\"filled\" sx={{\r\n    \"& .MuiAlert-message\": {\r\n      flexGrow: 1\r\n    }\r\n  }}>\r\n    {title}\r\n    {subtitle}\r\n    {progress !== undefined && <Grid container spacing={1} alignItems=\"center\">\r\n      {hasTotal && <Grid item>\r\n        <Typography>{`${progress.toFixed(1)}%`}</Typography>\r\n      </Grid>}\r\n      <Grid item flexGrow={1} >\r\n        <BorderLinearProgress variant={hasTotal ? \"determinate\" : \"indeterminate\"} value={progress} color=\"primary\" />\r\n      </Grid>\r\n    </Grid>}\r\n  </Alert>\r\n}\r\n","import { artifactAsset } from \"@genshin-optimizer/g-assets\";\nimport { BusinessCenter } from \"@mui/icons-material\";\nimport { alpha, Box, CardActionArea, Chip, Typography, useTheme } from \"@mui/material\";\nimport { useCallback, useContext } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport Artifact from \"../../Data/Artifacts/Artifact\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport KeyMap, { cacheValueString } from \"../../KeyMap\";\nimport StatIcon from \"../../KeyMap/StatIcon\";\nimport useArtifact from \"../../ReactHooks/useArtifact\";\nimport { ICachedSubstat } from \"../../Types/artifact\";\nimport { allElementsWithPhy, SlotKey } from \"@genshin-optimizer/consts\";\nimport { clamp } from \"../../Util/Util\";\nimport BootstrapTooltip from \"../BootstrapTooltip\";\nimport CardDark from \"../Card/CardDark\";\nimport LocationIcon from \"../Character/LocationIcon\";\nimport ColorText from \"../ColoredText\";\nimport ConditionalWrapper from \"../ConditionalWrapper\";\nimport { StatColoredWithUnit } from \"../StatDisplay\";\nimport ArtifactTooltip from \"./ArtifactTooltip\";\n\ntype Data = {\n  artifactId?: string,\n  slotKey: SlotKey,\n  mainStatAssumptionLevel?: number,\n  onClick?: () => void,\n  showLocation?: boolean,\n  BGComponent?: React.ElementType\n}\n\nexport default function ArtifactCardNano({ artifactId, slotKey: pSlotKey, mainStatAssumptionLevel = 0, showLocation = false, onClick, BGComponent = CardDark }: Data) {\n  const art = useArtifact(artifactId)\n  const { database } = useContext(DatabaseContext)\n  const actionWrapperFunc = useCallback(children => <CardActionArea onClick={onClick} sx={{ height: \"100%\" }}>{children}</CardActionArea>, [onClick],)\n  const theme = useTheme()\n  if (!art) return <BGComponent sx={{ display: \"flex\", height: \"100%\", alignItems: \"center\", justifyContent: \"center\" }}>\n    <Box component=\"img\" src={Assets.slot[pSlotKey]} sx={{ width: \"25%\", height: \"auto\", opacity: 0.7 }} />\n  </BGComponent>\n\n  const { slotKey, rarity, level, mainStatKey, substats, location } = art\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\n  const mainStatUnit = KeyMap.unit(mainStatKey)\n  const element = allElementsWithPhy.find(ele => art.mainStatKey.includes(ele))\n  const color = element ? alpha(theme.palette[element].main, 0.6) : alpha(theme.palette.secondary.main, 0.6)\n  return <BGComponent sx={{ height: \"100%\" }}><ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}  >\n    <Box display=\"flex\" height=\"100%\">\n      <Box className={`grad-${rarity}star`} sx={{ position: \"relative\", flexGrow: 1, display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\" }} >\n        <ArtifactTooltip art={art}>\n          <Box\n            component=\"img\"\n            src={artifactAsset(art.setKey, slotKey)}\n            sx={{ m: -1, maxHeight: \"110%\", maxWidth: \"110%\" }}\n          />\n        </ArtifactTooltip>\n        <Box sx={{ position: \"absolute\", width: \"100%\", height: \"100%\", p: 0.5, opacity: 0.85, display: \"flex\", justifyContent: \"space-between\", pointerEvents: \"none\" }} >\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={Artifact.levelVariant(level)} />\n          {showLocation && <Chip size=\"small\" label={location ? <LocationIcon characterKey={location && database.chars.LocationToCharacterKey(location)} /> : <BusinessCenter />} color={\"secondary\"} sx={{\n            overflow: \"visible\", \".MuiChip-label\": {\n              overflow: \"visible\"\n            }\n          }} />}\n        </Box>\n        {/* mainstats */}\n        <Chip size=\"small\" sx={{ position: \"absolute\", bottom: 0, mb: 1, backgroundColor: color }}\n          label={<Typography sx={{ display: \"flex\", gap: 0.5, px: 1, zIndex: 1 }}>\n            <BootstrapTooltip placement=\"top\" title={<Typography><StatColoredWithUnit statKey={mainStatKey} /></Typography>} disableInteractive>\n              <StatIcon statKey={mainStatKey} />\n            </BootstrapTooltip>\n            <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}{mainStatUnit}</ColorText>\n          </Typography>} />\n      </Box>\n      {/* substats */}\n      <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" sx={{ p: 1, }}>\n        {substats.map((stat: ICachedSubstat, i: number) => <SubstatDisplay key={i + stat.key} stat={stat} />)}\n      </Box>\n    </Box>\n  </ConditionalWrapper></BGComponent >\n}\nfunction SubstatDisplay({ stat }: { stat: ICachedSubstat }) {\n  if (!stat.value) return null\n  const numRolls = stat.rolls?.length ?? 0\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\n  const unit = KeyMap.unit(stat.key)\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\n    <Typography sx={{ flexGrow: 1, display: \"flex\", gap: 0.5, alignItems:\"center\" }} color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">\n      <BootstrapTooltip placement=\"top\" title={<Typography>{stat.key && <StatColoredWithUnit statKey={stat.key} />}</Typography>} disableInteractive>\n        <StatIcon statKey={stat.key} iconProps={{ fontSize: \"inherit\" }} />\n      </BootstrapTooltip>\n      <span>{`${cacheValueString(stat.value, KeyMap.unit(stat.key))}${unit}`}</span>\n    </Typography>\n  </Box>)\n}\n","import { Masonry } from \"@mui/lab\"\nimport { Box, Divider, ListItem } from \"@mui/material\"\nimport { useContext, useMemo } from \"react\"\nimport { DataContext } from \"../../Context/DataContext\"\nimport { OptimizationTargetContext } from \"../../Context/OptimizationTargetContext\"\nimport { DatabaseContext } from \"../../Database/Database\"\nimport { getDisplayHeader, getDisplaySections } from \"../../Formula/DisplayUtil\"\nimport { DisplaySub } from \"../../Formula/type\"\nimport { NodeDisplay } from \"../../Formula/uiData\"\nimport { customRead } from \"../../Formula/utils\"\nimport { objectMap } from \"../../Util/Util\"\nimport CardDark from \"../Card/CardDark\"\nimport CardHeaderCustom from \"../Card/CardHeaderCustom\"\nimport { FieldDisplayList, NodeFieldDisplay } from \"../FieldDisplay\"\nimport ImgIcon from \"../Image/ImgIcon\"\nimport SqBadge from \"../SqBadge\"\n\nexport default function StatDisplayComponent() {\n  const { data } = useContext(DataContext)\n  const sections = useMemo(() =>\n    getDisplaySections(data).filter(([, ns]) => Object.values(ns).some(n => !n.isEmpty)),\n    [data])\n  return <Box sx={{ mr: -1, mb: -1 }}>\n    <Masonry columns={{ xs: 1, sm: 2, md: 3, xl: 4 }} spacing={1}>\n      {sections.map(([key, Nodes]) =>\n        <Section key={key} displayNs={Nodes} sectionKey={key} />)}\n    </Masonry >\n  </Box>\n}\n\nfunction Section({ displayNs, sectionKey }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\n  const optimizationTarget = useContext(OptimizationTargetContext)\n  const { data, oldData } = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const header = useMemo(() => getDisplayHeader(data, sectionKey, database), [database, data, sectionKey])\n  const displayNsReads = useMemo(() => objectMap(displayNs, (n, nodeKey) => customRead([\"display\", sectionKey, nodeKey])), [displayNs, sectionKey]);\n  if (!header) return <CardDark></CardDark>\n\n  const { title, icon, action } = header\n  return <CardDark >\n    <CardHeaderCustom avatar={icon && <ImgIcon size={2} src={icon} />} title={title} action={action && <SqBadge>{action}</SqBadge>} />\n    <Divider />\n    <FieldDisplayList sx={{ m: 0 }}>\n      {Object.entries(displayNs).map(([nodeKey, n]) =>\n        <NodeFieldDisplay key={nodeKey} node={n} oldValue={oldData ? oldData.get(displayNsReads[nodeKey]!).value : undefined} component={ListItem}\n          emphasize={JSON.stringify(optimizationTarget) === JSON.stringify([sectionKey, nodeKey])}\n        />)}\n    </FieldDisplayList>\n  </CardDark>\n}\n","import { weaponAsset } from \"@genshin-optimizer/g-assets\";\nimport { BusinessCenter } from \"@mui/icons-material\";\nimport { Box, CardActionArea, Chip, Skeleton, Typography } from \"@mui/material\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport { getWeaponSheet } from \"../../Data/Weapons\";\nimport WeaponSheet from \"../../Data/Weapons/WeaponSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport { input } from \"../../Formula\";\nimport { computeUIData, dataObjForWeapon } from \"../../Formula/api\";\nimport { NodeDisplay, nodeVStr } from '../../Formula/uiData';\nimport useWeapon from \"../../ReactHooks/useWeapon\";\nimport BootstrapTooltip from \"../BootstrapTooltip\";\nimport CardDark from \"../Card/CardDark\";\nimport LocationIcon from \"../Character/LocationIcon\";\nimport ConditionalWrapper from \"../ConditionalWrapper\";\nimport WeaponNameTooltip from \"./WeaponNameTooltip\";\n\ntype Data = {\n  weaponId?: string,\n  onClick?: () => void,\n  showLocation?: boolean,\n  BGComponent?: React.ElementType,\n}\n\nexport default function WeaponCardNano({ weaponId, showLocation = false, onClick, BGComponent = CardDark, }: Data) {\n  const { database } = useContext(DatabaseContext)\n  const weapon = useWeapon(weaponId)\n  const weaponSheet = weapon?.key && getWeaponSheet(weapon.key)\n  const actionWrapperFunc = useCallback(children => <CardActionArea sx={{ height: \"100%\" }} onClick={onClick}>{children}</CardActionArea>, [onClick],)\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n  if (!weapon || !weaponSheet || !UIData) return <BGComponent sx={{ height: \"100%\" }}><Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\" }} /></BGComponent>;\n  const { refinement, location } = weapon\n  return <BGComponent sx={{ height: \"100%\" }}><ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}  >\n    <Box display=\"flex\" height=\"100%\" alignItems=\"stretch\" >\n      <Box className={`grad-${weaponSheet.rarity}star`} sx={{ height: \"100%\", position: \"relative\", flexGrow: 1, display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"flex-end\" }} >\n        <WeaponNameTooltip sheet={weaponSheet}>\n          <Box\n            component=\"img\"\n            src={weaponAsset(weapon.key, weapon.ascension >= 2)}\n            sx={{ mx: -1, maxHeight: \"100%\", maxWidth: \"100%\" }}\n          />\n        </WeaponNameTooltip>\n        <Box sx={{ position: \"absolute\", width: \"100%\", height: \"100%\", p: 0.5, opacity: 0.85, display: \"flex\", justifyContent: \"space-between\", pointerEvents: \"none\" }} >\n          <Chip size=\"small\" label={<strong>{WeaponSheet.getLevelString(weapon)}</strong>} color=\"primary\" />\n          {showLocation && <Chip size=\"small\" label={location ? <LocationIcon characterKey={database.chars.LocationToCharacterKey(location)} /> : <BusinessCenter />} color={\"secondary\"} sx={{\n            overflow: \"visible\", \".MuiChip-label\": {\n              overflow: \"visible\"\n            }\n          }} />}\n        </Box>\n        <Box sx={{ position: \"absolute\", width: \"100%\", height: \"100%\", p: 0.5, opacity: 0.85, display: \"flex\", justifyContent: \"flex-end\", alignItems: \"flex-end\" }} >\n          {weaponSheet.hasRefinement && <Chip size=\"small\" color=\"info\" label={<strong>R{refinement}</strong>} />}\n        </Box>\n      </Box>\n      <Box display=\"flex\" flexDirection=\"column\" sx={{ p: 1, }}>\n        <WeaponStat node={UIData.get(input.weapon.main)} />\n        <WeaponStat node={UIData.get(input.weapon.sub)} />\n      </Box>\n    </Box>\n  </ConditionalWrapper></BGComponent >\n}\nfunction WeaponStat({ node }: { node: NodeDisplay }) {\n  if (!node.info.name) return null\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\n    <Typography sx={{ flexGrow: 1, display: \"flex\", gap: 1 }} component=\"span\">\n      <BootstrapTooltip placement=\"top\" title={<Typography>{node.info.name}</Typography>} disableInteractive>\n        <span>{node.info.icon}</span>\n      </BootstrapTooltip>\n      <span>{nodeVStr(node)}</span>\n    </Typography>\n  </Box>)\n}\n","import { ArtifactSetKey, SlotKey } from \"@genshin-optimizer/consts\"\nimport { Box, Typography } from \"@mui/material\"\nimport { useMemo } from \"react\"\nimport ArtifactSetTooltip from \"../../../../../Components/Artifact/ArtifactSetTooltip\"\nimport SlotIcon from \"../../../../../Components/Artifact/SlotIcon\"\nimport SqBadge from \"../../../../../Components/SqBadge\"\nimport { getArtSheet } from \"../../../../../Data/Artifacts\"\nimport { iconInlineProps } from \"../../../../../SVGIcons\"\nimport { ICachedArtifact } from \"../../../../../Types/artifact\"\n\ntype ArtifactSetBadgesProps = {\n  artifacts: ICachedArtifact[],\n  currentlyEquipped?: boolean\n}\nexport function ArtifactSetBadges({ artifacts, currentlyEquipped = false }: ArtifactSetBadgesProps) {\n  const setToSlots: Partial<Record<ArtifactSetKey, SlotKey[]>> = useMemo(() => artifacts\n    .filter(arti => arti)\n    .reduce((acc, curr) => {\n      acc[curr.setKey] ? acc[curr.setKey].push(curr.slotKey) : acc[curr.setKey] = [curr.slotKey]\n      return acc\n    }, {}),\n    [artifacts]\n  )\n  return <>{Object.entries(setToSlots)\n    .sort(([_k1, slotarr1], [_k2, slotarr2]) => slotarr2.length - slotarr1.length)\n    .map(([key, slotarr]) =>\n      <ArtifactSetBadge key={key} setKey={key} currentlyEquipped={currentlyEquipped} slotarr={slotarr} />\n    )\n  }</>\n\n}\nfunction ArtifactSetBadge({ setKey, currentlyEquipped = false, slotarr }: { setKey: ArtifactSetKey, currentlyEquipped: boolean, slotarr: SlotKey[] }) {\n  const artifactSheet = getArtSheet(setKey)\n  const numInSet = slotarr.length\n  const setActive = Object.keys(artifactSheet.setEffects).map((setKey) => parseInt(setKey)).filter(setNum => setNum <= numInSet)\n  return <Box>\n    <ArtifactSetTooltip artifactSheet={artifactSheet} numInSet={numInSet} >\n      <SqBadge sx={{ height: \"100%\" }} color={currentlyEquipped ? \"success\" : \"primary\"} ><Typography >\n        {slotarr.map(slotKey => <SlotIcon key={slotKey} slotKey={slotKey} iconProps={iconInlineProps} />)} {artifactSheet.name ?? \"\"}\n        {setActive.map((n, i) => <SqBadge sx={{ ml: 0.5 }} key={\"\" + n + i} color=\"success\">{n}</SqBadge>)}\n      </Typography></SqBadge>\n    </ArtifactSetTooltip>\n  </Box>\n}\n","import { Checkroom, ChevronRight } from '@mui/icons-material';\nimport { Button, CardContent, Grid, Skeleton, Typography, Box } from '@mui/material';\nimport { Suspense, useCallback, useContext, useMemo, useState } from 'react';\nimport ArtifactCardNano from '../../../../../Components/Artifact/ArtifactCardNano';\nimport CardDark from '../../../../../Components/Card/CardDark';\nimport CardLight from '../../../../../Components/Card/CardLight';\nimport StatDisplayComponent from '../../../../../Components/Character/StatDisplayComponent';\nimport ModalWrapper from '../../../../../Components/ModalWrapper';\nimport SqBadge from '../../../../../Components/SqBadge';\nimport WeaponCardNano from '../../../../../Components/Weapon/WeaponCardNano';\nimport { CharacterContext } from '../../../../../Context/CharacterContext';\nimport { DataContext } from '../../../../../Context/DataContext';\nimport { DatabaseContext } from '../../../../../Database/Database';\nimport { uiInput as input } from '../../../../../Formula';\nimport ArtifactCard from '../../../../../PageArtifact/ArtifactCard';\nimport { ICachedArtifact } from '../../../../../Types/artifact';\nimport { allSlotKeys, charKeyToLocCharKey } from '../../../../../Types/consts';\nimport useBuildSetting from '../useBuildSetting';\nimport { ArtifactSetBadges } from './ArtifactSetBadges';\n\ntype NewOld = {\n  newId: string,\n  oldId?: string\n}\n\ntype BuildDisplayItemProps = {\n  label?: Displayable,\n  compareBuild: boolean,\n  disabled?: boolean,\n  extraButtonsRight?: JSX.Element,\n  extraButtonsLeft?: JSX.Element,\n}\n//for displaying each artifact build\nexport default function BuildDisplayItem({ label, compareBuild, extraButtonsRight, extraButtonsLeft, disabled }: BuildDisplayItemProps) {\n  const { character: { key: characterKey, equippedArtifacts } } = useContext(CharacterContext)\n  const { buildSetting: { mainStatAssumptionLevel } } = useBuildSetting(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const dataContext = useContext(DataContext)\n\n  const { data, oldData } = dataContext\n  const [newOld, setNewOld] = useState(undefined as NewOld | undefined)\n  const close = useCallback(() => setNewOld(undefined), [setNewOld],)\n\n  const equipBuild = useCallback(() => {\n    if (!window.confirm(\"Do you want to equip this build to this character?\")) return\n    const char = database.chars.get(characterKey)\n    if (!char) return\n    allSlotKeys.forEach(s => {\n      const aid = data.get(input.art[s].id).value\n      if (aid) database.arts.set(aid, { location: charKeyToLocCharKey(characterKey) })\n      else {\n        const oldAid = char.equippedArtifacts[s]\n        if (oldAid && database.arts.get(oldAid)) database.arts.set(oldAid, { location: \"\" })\n      }\n    })\n    const weapon = data.get(input.weapon.id).value\n    if (weapon) database.weapons.set(weapon, { location: charKeyToLocCharKey(characterKey) })\n  }, [characterKey, data, database])\n\n  const statProviderContext = useMemo(() => {\n    const dataContext_ = { ...dataContext }\n    if (!compareBuild) dataContext_.oldData = undefined\n    return dataContext_\n  }, [dataContext, compareBuild])\n\n  const artifactIdsBySlot = useMemo(() => Object.fromEntries(allSlotKeys.map(slotKey => [\n    slotKey,\n    data.get(input.art[slotKey].id).value\n  ])), [data])\n  const artifacts = useMemo(() => artifactIdsBySlot && Object.values(artifactIdsBySlot)\n    .map((artiId: string) => database.arts.get(artiId))\n    .filter(arti => arti) as ICachedArtifact[],\n    [artifactIdsBySlot, database.arts]\n  )\n\n  // Memoize Arts because of its dynamic onClick\n  const artNanos = useMemo(() => allSlotKeys.map(slotKey =>\n    <Grid item xs={1} key={slotKey} >\n      <ArtifactCardNano showLocation slotKey={slotKey} artifactId={artifactIdsBySlot[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onClick={() => {\n        const oldId = equippedArtifacts[slotKey]\n        const newId = artifactIdsBySlot[slotKey]!\n        setNewOld({ oldId: oldId !== newId ? oldId : undefined, newId })\n      }} />\n    </Grid>), [setNewOld, equippedArtifacts, mainStatAssumptionLevel, artifactIdsBySlot])\n\n  if (!oldData) return null\n  const currentlyEquipped = allSlotKeys.every(slotKey => artifactIdsBySlot[slotKey] === oldData.get(input.art[slotKey].id).value) && data.get(input.weapon.id).value === oldData.get(input.weapon.id).value\n\n  return <CardLight>\n    <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\n      {newOld && <CompareArtifactModal newOld={newOld} mainStatAssumptionLevel={mainStatAssumptionLevel} onClose={close} />}\n      <CardContent>\n        <Box display=\"flex\" gap={1} sx={{ pb: 1 }} flexWrap=\"wrap\">\n          {label !== undefined && <SqBadge color=\"info\"><Typography><strong>{label}{currentlyEquipped ? \" (Equipped)\" : \"\"}</strong></Typography></SqBadge>}\n          <ArtifactSetBadges artifacts={artifacts} currentlyEquipped={currentlyEquipped} />\n          <Box sx={{ flexGrow: 1, display: \"flex\", justifyContent: \"flex-end\" }}>\n          </Box>\n          {extraButtonsLeft}\n          <Button size='small' color=\"success\" onClick={equipBuild} disabled={disabled || currentlyEquipped} startIcon={<Checkroom />}>Equip Build</Button>\n          {extraButtonsRight}\n        </Box>\n        <Grid container spacing={1} sx={{ pb: 1 }} columns={{ xs: 2, sm: 3, md: 4, lg: 6 }}>\n          <Grid item xs={1}>\n            <WeaponCardNano showLocation weaponId={data.get(input.weapon.id).value} />\n          </Grid>\n          {artNanos}\n        </Grid>\n        <DataContext.Provider value={statProviderContext}>\n          <StatDisplayComponent />\n        </DataContext.Provider>\n      </CardContent>\n    </Suspense>\n  </CardLight>\n}\n\nfunction CompareArtifactModal({ newOld: { newId, oldId }, mainStatAssumptionLevel, onClose }: { newOld: NewOld, mainStatAssumptionLevel: number, onClose: () => void }) {\n  const { database } = useContext(DatabaseContext)\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const onEquip = useCallback(() => {\n    if (!window.confirm(\"Do you want to equip this artifact to this character?\")) return\n    database.arts.set(newId, { location: charKeyToLocCharKey(characterKey) })\n    onClose()\n  }, [newId, database, characterKey, onClose])\n\n  return <ModalWrapper open={!!newId} onClose={onClose} containerProps={{ maxWidth: oldId ? \"md\" : \"xs\" }}>\n    <CardDark>\n      <CardContent sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"stretch\", gap: 2, height: \"100%\" }}>\n        {oldId && <Box minWidth={320}><ArtifactCard artifactId={oldId} mainStatAssumptionLevel={mainStatAssumptionLevel} canExclude canEquip editorProps={{ disableSet: true, disableSlot: true }} /></Box>}\n        {oldId && <Box display=\"flex\" flexGrow={1} />}\n        {oldId && <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\"><Button onClick={onEquip} sx={{ display: \"flex\" }}><ChevronRight sx={{ fontSize: 40 }} /></Button></Box>}\n        {oldId && <Box display=\"flex\" flexGrow={1} />}\n        <Box minWidth={320}><ArtifactCard artifactId={newId} mainStatAssumptionLevel={mainStatAssumptionLevel} canExclude canEquip editorProps={{ disableSet: true, disableSlot: true }} /></Box>\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../../../../Database/Database\";\r\nimport { IBuildResult } from \"../../../../Database/DataManagers/BuildResult\";\r\nimport { CharacterKey } from \"../../../../Types/consts\";\r\n\r\nexport default function useBuildResult(characterKey: CharacterKey) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [buildResult, setBuildResult] = useState(() => database.buildResult.get(characterKey))\r\n  useEffect(() => setBuildResult(database.buildResult.get(characterKey)), [database, characterKey])\r\n  useEffect(() =>\r\n    database.buildResult.follow(characterKey, (k, r, v) => r === \"update\" && setBuildResult(v)),\r\n    [characterKey, setBuildResult, database])\r\n  const buildResultDispatch = useCallback((action: Partial<IBuildResult>) => characterKey && database.buildResult.set(characterKey, action), [characterKey, database],)\r\n\r\n  return { buildResult, buildResultDispatch }\r\n}\r\n","import { DotProps } from \"recharts\"\nimport EnhancedPoint from \"./EnhancedPoint\"\n\ntype CustomShapeType = \"circle\" | \"diamond\" | \"square\"\ntype CustomDotProps = DotProps & {\n  selectedPoint: EnhancedPoint | undefined\n  payload?: EnhancedPoint\n  radiusSelected?: number\n  radiusUnselected?: number\n  colorSelected?: string\n  colorUnselected: string\n  shape?: CustomShapeType\n}\nexport default function CustomDot({ cx, cy, payload, selectedPoint, radiusSelected = 6, radiusUnselected = 3, colorSelected = \"red\", colorUnselected, shape = \"circle\" }: CustomDotProps) {\n  if (!cx || !cy || !payload) {\n    return null\n  }\n\n  const isSelected = selectedPoint && selectedPoint.x === payload.x && selectedPoint.y === payload.y\n\n  return (\n    <g\n      className=\"custom-dot\"\n      data-chart-x={cx}\n      data-chart-y={cy}\n      data-x-value={payload.x}\n      data-y-value={payload.y}\n      data-radius={isSelected ? radiusUnselected : radiusSelected}\n    >\n      {!isSelected\n        ? <CustomShape id=\"customShapeUnselected\" shape={shape} cx={cx} cy={cy} r={radiusUnselected} fill={colorUnselected} />\n        : <>\n          <CustomShape id=\"customShapeSelected\" shape={shape} cx={cx} cy={cy} r={radiusSelected / 2} fill={colorSelected} />\n          <CustomShape id=\"customShapeBorder\" shape={shape} cx={cx} cy={cy} r={radiusSelected} fill=\"none\" stroke={colorSelected} />\n        </>\n      }\n    </g>\n  )\n}\nfunction CustomShape({ shape, id, cx, cy, r, fill, stroke}: { shape: CustomShapeType, id?: string, cx: number, cy: number, r: number, fill?: string, stroke?: string }) {\n  switch(shape) {\n    case \"circle\":\n      return <circle id={id} cx={cx} cy={cy} r={r} fill={fill} stroke={stroke} />\n    case \"square\":\n      return <rect id={id} x={cx-r} y={cy-r} width={r*2} height={r*2} fill={fill} stroke={stroke} />\n    case \"diamond\":\n      return <polygon id={id} points={`${cx},${cy+r*2.5} ${cx+r*1.5},${cy} ${cx},${cy-r*2.5} ${cx-r*1.5},${cy}`} fill={fill} stroke={stroke} />\n  }\n}\n","import { Button, CardContent, ClickAwayListener, Grid, Skeleton, Stack, Typography } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useMemo } from \"react\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport { TooltipProps } from \"recharts\"\nimport ArtifactCardPico from \"../../../../../../Components/Artifact/ArtifactCardPico\"\nimport BootstrapTooltip from \"../../../../../../Components/BootstrapTooltip\"\nimport CardDark from \"../../../../../../Components/Card/CardDark\"\nimport CloseButton from \"../../../../../../Components/CloseButton\"\nimport SqBadge from \"../../../../../../Components/SqBadge\"\nimport { DataContext } from \"../../../../../../Context/DataContext\"\nimport { DatabaseContext } from \"../../../../../../Database/Database\"\nimport { input } from \"../../../../../../Formula\"\nimport { Unit, valueString } from \"../../../../../../KeyMap\"\nimport { ICachedArtifact } from \"../../../../../../Types/artifact\"\nimport { allSlotKeys } from \"../../../../../../Types/consts\"\nimport { ArtifactSetBadges } from \"../ArtifactSetBadges\"\nimport EnhancedPoint from \"./EnhancedPoint\"\n\ntype CustomTooltipProps = TooltipProps<number, string> & {\n  xLabel: Displayable\n  xUnit: Unit | undefined\n  yLabel: Displayable\n  yUnit: Unit | undefined\n  selectedPoint: EnhancedPoint | undefined\n  setSelectedPoint: (pt: EnhancedPoint | undefined) => void\n  addBuildToList: (build: string[]) => void\n}\nexport default function CustomTooltip({ xLabel, xUnit, yLabel, yUnit, selectedPoint, setSelectedPoint, addBuildToList, ...tooltipProps }: CustomTooltipProps) {\n  const { database } = useContext(DatabaseContext)\n  const { data } = useContext(DataContext)\n  const { t } = useTranslation(\"page_character_optimize\")\n\n  const artifactsBySlot: { [slot: string]: ICachedArtifact } = useMemo(() =>\n    selectedPoint && selectedPoint.artifactIds && Object.fromEntries(selectedPoint.artifactIds\n      .map(id => {\n        const artiObj = database.arts.get(id)\n        return [artiObj?.slotKey, artiObj]\n      })\n      .filter(arti => arti)\n    ),\n    [database.arts, selectedPoint]\n  )\n  const clickAwayHandler = useCallback((e) => {\n    if (!(e.target.id.includes(\"customShape\") || e.target.id.includes(\"chartContainer\"))) {\n      setSelectedPoint(undefined)\n    }\n  }, [setSelectedPoint])\n\n  const currentlyEquipped = artifactsBySlot && allSlotKeys.every(slotKey => artifactsBySlot[slotKey]?.id === data.get(input.art[slotKey].id).value)\n\n  const highlightLabel = useMemo(() => selectedPoint?.buildNumber && (selectedPoint.highlightedType === \"graph\"\n    ? <Trans t={t} i18nKey=\"graphBuildLabel\" count={selectedPoint?.buildNumber}>Graph #{{ count: selectedPoint?.buildNumber + 1 }}</Trans>\n    : `#${selectedPoint?.buildNumber}`),\n  [selectedPoint, t])\n\n  if (tooltipProps.active && selectedPoint) {\n    return <ClickAwayListener onClickAway={clickAwayHandler}>\n      <CardDark sx={{ minWidth: \"400px\", maxWidth: \"400px\" }} onClick={(e) => e.stopPropagation()}>\n        <CardContent>\n          <Stack gap={1}>\n            <Stack direction=\"row\" alignItems=\"start\" gap={1}>\n              <Stack spacing={0.5} flexGrow={99}>\n                {currentlyEquipped && <SqBadge color=\"info\"><strong>{t(\"currentlyEquippedBuild\")}</strong></SqBadge>}\n                {!currentlyEquipped && selectedPoint.highlighted && <SqBadge color=\"info\">{highlightLabel}</SqBadge>}\n                <Suspense fallback={<Skeleton width={300} height={50} />}>\n                  <ArtifactSetBadges artifacts={Object.values(artifactsBySlot)} currentlyEquipped={currentlyEquipped} />\n                </Suspense>\n              </Stack>\n              <Grid item flexGrow={1} />\n              <CloseButton onClick={() => setSelectedPoint(undefined)} />\n            </Stack>\n            <Grid container direction=\"row\" spacing={0.75} columns={5}>\n              {allSlotKeys.map(key =>\n                <Grid item key={key} xs={1}>\n                  <Suspense fallback={<Skeleton width={75} height={75} />}>\n                    <ArtifactCardPico artifactObj={artifactsBySlot[key]} slotKey={key} />\n                  </Suspense>\n                </Grid>\n              )}\n            </Grid>\n            <Typography><strong>{xLabel}</strong>: {valueString(xUnit === \"%\" ? selectedPoint.x / 100 : selectedPoint.x, xUnit)}</Typography>\n            <Typography><strong>{yLabel}</strong>: {valueString(yUnit === \"%\" ? selectedPoint.y / 100 : selectedPoint.y, yUnit)}</Typography>\n            <BootstrapTooltip title={selectedPoint.highlighted ? t(\"tcGraph.buildAlreadyInList\") : \"\"} placement=\"top\">\n              <span>\n                <Button sx={{ width: \"100%\" }} disabled={!!selectedPoint.highlighted} color=\"info\" onClick={() => addBuildToList(selectedPoint.artifactIds)}>{t(\"addBuildToList\")}</Button>\n              </span>\n            </BootstrapTooltip>\n          </Stack>\n        </CardContent>\n      </CardDark>\n    </ClickAwayListener>\n  }\n\n  return null\n}\n","export default class EnhancedPoint {\n  public x: number\n  public trueY?: number\n  public artifactIds: string[]\n  public min?: number\n  public current?: number\n  public highlighted?: number\n  public buildNumber?: number\n  public highlightedType?: \"generated\" | \"graph\"\n\n  public constructor(x: number, y: number, artifactIds: string[]) {\n    this.x = x\n    this.trueY = y\n    this.artifactIds = artifactIds\n  }\n\n  public get y(): number {\n    return (this.trueY || this.current || this.highlighted) as number\n  }\n  public set y(y: number | undefined) {\n    this.trueY = y\n  }\n}\n","import { CheckBox, CheckBoxOutlineBlank, Download, Replay } from '@mui/icons-material';\nimport { Button, CardContent, Collapse, Divider, Grid, Slider, styled, Typography } from '@mui/material';\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { CartesianGrid, ComposedChart, Label, Legend, LegendType, Line, ResponsiveContainer, Scatter, Tooltip, XAxis, YAxis } from 'recharts';\nimport BootstrapTooltip from '../../../../../../Components/BootstrapTooltip';\nimport CardDark from '../../../../../../Components/Card/CardDark';\nimport CardLight from '../../../../../../Components/Card/CardLight';\nimport InfoTooltip from '../../../../../../Components/InfoTooltip';\nimport { CharacterContext } from '../../../../../../Context/CharacterContext';\nimport { DataContext } from '../../../../../../Context/DataContext';\nimport { GraphContext } from '../../../../../../Context/GraphContext';\nimport { input } from '../../../../../../Formula';\nimport { NumNode } from '../../../../../../Formula/type';\nimport { valueString } from '../../../../../../KeyMap';\nimport { allSlotKeys } from '../../../../../../Types/consts';\nimport { objectKeyMap, objPathValue } from '../../../../../../Util/Util';\nimport useBuildResult from '../../useBuildResult';\nimport OptimizationTargetSelector from '../OptimizationTargetSelector';\nimport CustomDot from './CustomDot';\nimport CustomTooltip from './CustomTooltip';\nimport EnhancedPoint from './EnhancedPoint';\n\nexport type Point = {\n  x: number\n  y: number\n  artifactIds: string[]\n  min?: number\n}\ntype ChartCardProps = {\n  plotBase?: string[]\n  setPlotBase: (path: string[] | undefined) => void\n  disabled?: boolean\n  showTooltip?: boolean\n}\nexport default function ChartCard({ plotBase, setPlotBase, disabled = false, showTooltip = false }: ChartCardProps) {\n  const { t } = useTranslation([\"page_character_optimize\", \"ui\"])\n  const { data } = useContext(DataContext)\n  const { chartData } = useContext(GraphContext)\n  const [showDownload, setshowDownload] = useState(false)\n  const [showMin, setshowMin] = useState(true)\n  const { graphBuilds } = useContext(GraphContext)\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { buildResult: { builds: generatedBuilds } } = useBuildResult(characterKey)\n\n  const [sliderLow, setSliderLow] = useState(-Infinity)\n  const [sliderHigh, setSliderHigh] = useState(Infinity)\n  const setSlider = useCallback(\n    (_e: unknown, value: number | number[]) => {\n      if (typeof value === \"number\") throw new TypeError()\n      const [l, h] = value\n      setSliderLow(l)\n      setSliderHigh(h)\n    },\n    [setSliderLow, setSliderHigh]\n  )\n  useEffect(() => { setSliderLow(-Infinity); setSliderHigh(Infinity) }, [chartData])\n\n  const { displayData, downloadData, sliderMin, sliderMax } = useMemo(() => {\n    if (!chartData) return { displayData: null, downloadData: null }\n    let sliderMin = Infinity\n    let sliderMax = -Infinity\n    const currentBuild = allSlotKeys.map(slotKey => data?.get(input.art[slotKey].id).value ?? \"\")\n    // Shape the data so we know the current and highlighted builds\n    const points = chartData.data.map(({ value: y, plot: x, artifactIds }) => {\n      if (x === undefined) return null\n      if (x < sliderMin) sliderMin = x\n      if (x > sliderMax) sliderMax = x\n      const enhancedDatum: EnhancedPoint = new EnhancedPoint(x, y, artifactIds)\n      const datumBuildMap = objectKeyMap(artifactIds, _ => true)\n\n      const isCurrentBuild = currentBuild.every(aId => datumBuildMap[aId])\n      if (isCurrentBuild) {\n        enhancedDatum.current = y\n        // Remove the Y-value so there are not 2 dots displayed for these builds\n        enhancedDatum.y = undefined\n        return enhancedDatum\n      }\n\n      const generBuildIndex = generatedBuilds.findIndex(build =>\n        build.every(aId => datumBuildMap[aId])\n      )\n      if (generBuildIndex !== -1) {\n        enhancedDatum.highlighted = y\n        enhancedDatum.buildNumber = generBuildIndex + 1\n        enhancedDatum.highlightedType = \"generated\"\n        // Remove the Y-value so there are not 2 dots displayed for these builds\n        enhancedDatum.y = undefined\n        return enhancedDatum\n      }\n\n      const graphBuildIndex = graphBuilds?.findIndex(build =>\n        build.every(aId => datumBuildMap[aId])\n      )\n      if (graphBuildIndex !== undefined && graphBuildIndex !== -1) {\n        enhancedDatum.highlighted = y\n        enhancedDatum.buildNumber = graphBuildIndex + 1\n        enhancedDatum.highlightedType = \"graph\"\n        // Remove the Y-value so there are not 2 dots displayed for these builds\n        enhancedDatum.y = undefined\n      }\n\n      return enhancedDatum\n    })\n    .sort((a, b) => a!.x - b!.x) as EnhancedPoint[]\n\n    const minimumData: EnhancedPoint[] = []\n    for (const point of points) {\n      let last: EnhancedPoint | undefined\n      while ((last = minimumData.pop())) {\n        if (last.y > point.y) {\n          minimumData.push(last)\n          break\n        }\n      }\n      minimumData.push(point)\n    }\n\n    // Note:\n    // We can also just use `minimumData` if the plotter supports multiple data sources.\n    // It could be faster too since there're no empty entries in `minimumData`.\n    // From my limited testing, using multiple data sources makes the graph behave strangely though.\n    if (minimumData[0]?.x !== points[0]?.x)\n      points[0].min = minimumData[0].y\n    minimumData.forEach(pt => { pt.min = pt.y })\n\n    const downloadData = {\n      minimum: minimumData.map(point => [point.x, point.y]),\n      allData: points.map(point => [point.x, point.y]),\n    }\n    return { displayData: points.filter(pt => pt && pt.x >= sliderLow && pt.x <= sliderHigh), downloadData, sliderMin, sliderMax }\n  }, [chartData, generatedBuilds, data, graphBuilds, sliderLow, sliderHigh])\n\n  const plotBaseNode = plotBase && objPathValue(data?.getDisplay(), plotBase)\n  const invalidTarget = plotBase && (!plotBaseNode || plotBaseNode.isEmpty)\n\n  const buttonText = invalidTarget\n    ? t(\"page_character_optimize:targetSelector.invalidTarget\")\n    : t(\"page_character_optimize:targetSelector.selectGraphTarget\")\n\n  return <CardLight>\n    <CardContent>\n      <Grid container spacing={1} alignItems=\"center\">\n        <Grid item>\n          <Typography >{t`tcGraph.vs`}</Typography>\n        </Grid>\n        <Grid item>\n          <BootstrapTooltip placement=\"top\" title={showTooltip ? t(\"page_character_optimize:selectTargetFirst\") : \"\"}>\n            <span>\n              <OptimizationTargetSelector\n                optimizationTarget={plotBase}\n                setTarget={target => setPlotBase(target)}\n                defaultText={buttonText}\n                disabled={disabled}\n              />\n            </span>\n          </BootstrapTooltip>\n        </Grid>\n        <Grid item>\n          <BootstrapTooltip title={!plotBase ? \"\" : t(\"ui:reset\")} placement=\"top\">\n            <span><Button color=\"error\" onClick={() => setPlotBase(undefined)} disabled={!plotBase}>\n              <Replay />\n            </Button></span>\n          </BootstrapTooltip>\n        </Grid>\n        <Grid item flexGrow={1}>\n          <InfoTooltip placement=\"top\" title={t(\"page_character_optimize:tcGraph.desc\")} />\n        </Grid>\n        {!!downloadData && <Grid item>\n          <Button size='small' startIcon={showMin ? <CheckBox /> : <CheckBoxOutlineBlank />}\n            color={showMin ? \"success\" : \"secondary\"}\n            onClick={() => setshowMin(!showMin)}>{t`tcGraph.showStatThr`}</Button>\n        </Grid>}\n        {!!downloadData && <Grid item>\n          <Button size='small' color=\"info\" startIcon={<Download />} onClick={() => setshowDownload(!showDownload)}>{t`tcGraph.downloadData`}</Button>\n        </Grid>}\n      </Grid>\n    </CardContent>\n    {displayData && displayData.length && <Divider />}\n    {chartData && displayData && displayData.length && <CardContent>\n      <Collapse in={!!downloadData && showDownload}>\n        <CardDark sx={{ mb: 2 }}>\n          <CardContent>\n            <Typography>Min Data</Typography>\n            <DataDisplay data={downloadData?.minimum} />\n            <Typography>All Data</Typography>\n            <DataDisplay data={downloadData?.allData} />\n          </CardContent>\n        </CardDark>\n      </Collapse>\n      <Chart displayData={displayData} plotNode={chartData.plotNode} valueNode={chartData.valueNode} showMin={showMin} />\n      {displayData.length > 1 && <Slider\n        marks\n        value={[sliderLow, sliderHigh]}\n        onChange={setSlider}\n        onChangeCommitted={setSlider}\n        min={sliderMin}\n        max={sliderMax}\n        step={(sliderMax - sliderMin) / 20}\n        valueLabelDisplay=\"auto\"\n        valueLabelFormat={n => valueString(chartData.plotNode.info?.unit === \"%\" ? n / 100 : n, chartData.plotNode.info?.unit)}\n        sx={{ ml: \"6%\", width: \"93%\" }}\n      />}\n    </CardContent>}\n  </CardLight >\n}\nconst TextArea = styled(\"textarea\")({\n  width: \"100%\",\n  fontFamily: \"monospace\",\n  resize: \"vertical\",\n  minHeight: \"5em\"\n})\nfunction DataDisplay({ data, }: { data?: object }) {\n  return <TextArea readOnly value={JSON.stringify(data)} onClick={e => {\n    const target = e.target as HTMLTextAreaElement;\n    target.selectionStart = 0;\n    target.selectionEnd = target.value.length;\n  }} />\n}\n\nconst optTargetColor = \"#8884d8\"\nconst highlightedColor = \"cyan\"\nconst currentColor = \"#46a046\"\nconst lineColor = \"#ff7300\"\nfunction Chart({ displayData, plotNode, valueNode, showMin }: {\n  displayData: EnhancedPoint[]\n  plotNode: NumNode\n  valueNode: NumNode\n  showMin: boolean\n}) {\n  const { graphBuilds, setGraphBuilds } = useContext(GraphContext)\n  const { t } = useTranslation(\"page_character_optimize\")\n  const [selectedPoint, setSelectedPoint] = useState<EnhancedPoint>()\n  const addBuildToList = useCallback((build: string[]) => { setGraphBuilds([...(graphBuilds ?? []), build]); setSelectedPoint(undefined) }, [setGraphBuilds, graphBuilds])\n  const chartOnClick = useCallback(props => {\n    if (props && props.chartX && props.chartY) setSelectedPoint(getNearestPoint(props.chartX, props.chartY, 20, displayData))\n  }, [setSelectedPoint, displayData])\n\n  // Below works because character translation should already be loaded\n  const xLabelValue = getLabelFromNode(plotNode, t)\n  const yLabelValue = getLabelFromNode(valueNode, t)\n\n  return <ResponsiveContainer width=\"100%\" height={600}>\n    <ComposedChart id=\"chartContainer\" data={displayData} onClick={chartOnClick} style={{ cursor: \"pointer\" }}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis\n        dataKey=\"x\"\n        scale=\"linear\"\n        unit={plotNode.info?.unit}\n        domain={[\"auto\", \"auto\"]}\n        tick={{ fill: 'white' }}\n        type=\"number\"\n        tickFormatter={n => n > 10000 ? n.toFixed() : n.toFixed(1)}\n        label={<Label fill=\"white\" dy={10}>{xLabelValue}</Label>}\n        height={50}\n      />\n      <YAxis\n        name=\"DMG\"\n        domain={[\"auto\", \"auto\"]}\n        unit={valueNode.info?.unit}\n        allowDecimals={false}\n        tick={{ fill: 'white' }}\n        type=\"number\"\n        label={<Label fill=\"white\" angle={-90} dx={-40}>{yLabelValue}</Label>}\n        width={100}\n      />\n      <Tooltip\n        content={<CustomTooltip\n          xLabel={xLabelValue}\n          xUnit={plotNode.info?.unit}\n          yLabel={yLabelValue}\n          yUnit={valueNode.info?.unit}\n          selectedPoint={selectedPoint}\n          setSelectedPoint={setSelectedPoint}\n          addBuildToList={addBuildToList}\n        />}\n        trigger=\"click\"\n        wrapperStyle={{ pointerEvents: \"auto\", cursor: \"auto\" }}\n        cursor={false}\n      />\n      <Legend payload={[\n        ...(showMin ? [{ id: \"min\", value: t`tcGraph.statReqThr`, type: \"line\" as LegendType, color: lineColor }] : []),\n        { id: \"trueY\", value: t`tcGraph.generatedBuilds`, type: \"circle\", color: optTargetColor },\n        { id: \"highlighted\", value: t`tcGraph.highlightedBuilds`, type: \"square\", color: highlightedColor },\n        { id: \"current\", value: t`tcGraph.currentBuild`, type: \"diamond\", color: currentColor },\n      ]}/>\n      {showMin && <Line\n        dataKey=\"min\"\n        stroke={lineColor}\n        type=\"stepBefore\"\n        connectNulls\n        strokeWidth={2}\n        isAnimationActive={false}\n        dot={false}\n        activeDot={false}\n      />}\n      <Scatter\n        dataKey=\"trueY\"\n        isAnimationActive={false}\n        shape={<CustomDot selectedPoint={selectedPoint} colorUnselected={optTargetColor} />}\n      />\n      <Scatter\n        dataKey=\"highlighted\"\n        isAnimationActive={false}\n        shape={<CustomDot shape=\"square\" selectedPoint={selectedPoint} colorUnselected={highlightedColor} />}\n      />\n      <Scatter\n        dataKey=\"current\"\n        isAnimationActive={false}\n        shape={<CustomDot shape=\"diamond\" selectedPoint={selectedPoint} colorUnselected={currentColor} />}\n      />\n    </ComposedChart>\n  </ResponsiveContainer>\n}\n\nfunction getNearestPoint(clickedX: number, clickedY: number, threshold: number, data: EnhancedPoint[]) {\n  const nearestDomPtData = Array.from(document.querySelectorAll(\".custom-dot\"))\n    .reduce((domPtA, domPtB) => {\n      const { chartX: aChartX, chartY: aChartY } = (domPtA as any).dataset\n      const aDistance = Math.sqrt((clickedX - aChartX) ** 2 + (clickedY - aChartY) ** 2)\n      const { chartX: bChartX, chartY: bChartY } = (domPtB as any).dataset\n      const bDistance = Math.sqrt((clickedX - bChartX) ** 2 + (clickedY - bChartY) ** 2)\n      return aDistance <= bDistance\n        ? domPtA\n        : domPtB\n    })[\"dataset\"]\n\n  // Don't select a point too far away\n  const distance = Math.sqrt((clickedX - nearestDomPtData.chartX) ** 2 + (clickedY - nearestDomPtData.chartY) ** 2)\n  return distance < threshold\n    ? data.find(d => d.x === +nearestDomPtData.xValue && d.y === +nearestDomPtData.yValue)\n    : undefined\n}\n\nfunction getLabelFromNode(node: NumNode, t: any) {\n  return typeof node.info?.name === \"string\"\n    ? node.info.name\n    : `${t(`${node.info?.name?.props.ns}:${node.info?.name?.props.key18}`)}${node.info?.textSuffix ? ` ${node.info?.textSuffix}` : \"\"}`\n}\n","import { allElementsWithPhy, allSlotKeys } from '@genshin-optimizer/consts';\nimport { Box, Button, CardContent, Divider, Grid, Typography } from '@mui/material';\nimport { useContext, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport SlotIcon from '../../../../../Components/Artifact/SlotIcon';\nimport BootstrapTooltip from '../../../../../Components/BootstrapTooltip';\nimport SqBadge from '../../../../../Components/SqBadge';\nimport { StatColoredWithUnit } from '../../../../../Components/StatDisplay';\nimport { CharacterContext } from '../../../../../Context/CharacterContext';\nimport Artifact from '../../../../../Data/Artifacts/Artifact';\nimport { DatabaseContext } from '../../../../../Database/Database';\nimport StatIcon from '../../../../../KeyMap/StatIcon';\nimport { iconInlineProps } from '../../../../../SVGIcons';\nimport FlowerIcon from '../../../../../SVGIcons/ArtifactSlot/FlowerIcon';\nimport PlumeIcon from '../../../../../SVGIcons/ArtifactSlot/PlumeIcon';\nimport AtkIcon from '../../../../../SVGIcons/Stats/AtkIcon';\nimport HpIcon from '../../../../../SVGIcons/Stats/HpIcon';\nimport { handleMultiSelect } from '../../../../../Util/MultiSelect';\nimport { catTotal } from '../../../../../Util/totalUtils';\nimport { objectKeyMap } from '../../../../../Util/Util';\nimport useBuildSetting from '../useBuildSetting';\n\nexport const artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"] as const\n\nexport default function MainStatSelectionCard({ disabled = false, filteredArtIds }: {\n  disabled?: boolean,\n  filteredArtIds: string[]\n}) {\n  const { t } = useTranslation(\"artifact\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { buildSetting: { mainStatKeys }, buildSettingDispatch } = useBuildSetting(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const tots = useMemo(() => objectKeyMap(allSlotKeys, slotKey =>\n    catTotal(Artifact.slotMainStats(slotKey), ct => Object.entries(database.arts.data).forEach(([id, a]) => {\n      const sk = a.slotKey\n      if (sk !== slotKey) return\n      const msk = a.mainStatKey\n      if (!msk || !ct[msk]) return\n      ct[msk].total++\n      if (filteredArtIds.includes(id)) ct[msk].current++\n    }))\n  ), [filteredArtIds, database])\n  const slotTots = useMemo(() => catTotal(artifactsSlotsToSelectMainStats, ct => Object.entries(database.arts.data).forEach(([id, a]) => {\n    const sk = a.slotKey\n    if (!ct[sk]) return\n    ct[sk].total++\n    if (filteredArtIds.includes(id)) ct[sk].current++\n  })), [filteredArtIds, database])\n\n  return <Box display=\"flex\" flexDirection=\"column\">\n    <Divider />\n    <Box display=\"flex\">\n      <CardContent sx={{ flexGrow: 1 }}>\n        <Box sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }}>\n          <BootstrapTooltip placement=\"top\" title={<Typography>{t(`slotName.flower`)}</Typography>}>\n            <FlowerIcon fontSize='inherit' />\n          </BootstrapTooltip>\n          <Box flexGrow={1}>\n            <SqBadge color=\"info\"><HpIcon {...iconInlineProps} /> {tots.flower.hp}</SqBadge>\n          </Box>\n        </Box>\n      </CardContent>\n      <Divider orientation=\"vertical\" flexItem />\n      <CardContent sx={{ flexGrow: 1 }}>\n        <Box sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }}>\n          <BootstrapTooltip placement=\"top\" title={<Typography>{t(`slotName.plume`)}</Typography>}>\n            <PlumeIcon fontSize='inherit' />\n          </BootstrapTooltip>\n          <Box flexGrow={1}>\n            <SqBadge color=\"info\"><AtkIcon {...iconInlineProps} /> {tots.plume.atk}</SqBadge>\n          </Box>\n        </Box>\n      </CardContent>\n    </Box>\n    {artifactsSlotsToSelectMainStats.map(slotKey => {\n      const selectedMainKeys = mainStatKeys[slotKey]\n      const mainKeys = Artifact.slotMainStats(slotKey)\n      const mainKeysHandler = handleMultiSelect([...mainKeys])\n      return <Box key={slotKey}>\n        <Divider />\n        <CardContent sx={{ pt: 1, pb: 1 }}>\n          <Box sx={{ display: \"flex\", gap: 1, alignItems: \"center\", pb: 1 }}>\n            <BootstrapTooltip placement=\"top\" title={<Typography>{t(`slotName.${slotKey}`)}</Typography>}>\n              <SlotIcon slotKey={slotKey} iconProps={{ fontSize: 'inherit' }} />\n            </BootstrapTooltip>\n            <Box flexGrow={1}>\n              <SqBadge color=\"info\">{slotTots[slotKey]}</SqBadge>\n            </Box>\n          </Box>\n          <Grid container spacing={1}>\n            {mainKeys.map((mainStatKey, i) => {\n              const element = allElementsWithPhy.find(ele => mainStatKey.includes(ele))\n              const color = selectedMainKeys.includes(mainStatKey)\n                ? element ?? \"success\"\n                : \"secondary\"\n              return <Grid item key={mainStatKey} flexGrow={1} xs={((i < 3 && slotKey !== \"goblet\") || slotKey === \"goblet\") ? 4 : undefined} >\n                <BootstrapTooltip placement=\"top\" title={<Typography><strong><StatColoredWithUnit statKey={mainStatKey} /></strong></Typography>} disableInteractive>\n                  <Button fullWidth size=\"small\" color={color} sx={{ height: \"100%\", pointerEvents: disabled ? \"none\" : undefined, cursor: disabled ? \"none\" : undefined }}\n                    startIcon={<StatIcon statKey={mainStatKey} />}\n                    onClick={() => buildSettingDispatch({ mainStatKeys: { ...mainStatKeys, [slotKey]: mainKeysHandler(selectedMainKeys, mainStatKey) } })}>\n                    {tots[slotKey][mainStatKey]}\n                  </Button>\n                </BootstrapTooltip>\n              </Grid>\n            })}\n          </Grid>\n        </CardContent>\n      </Box>\n    })}\n  </Box >\n}\n","import { CheckBox, CheckBoxOutlineBlank, DeleteForever } from \"@mui/icons-material\"\nimport { Button, ButtonGroup } from \"@mui/material\"\nimport { useCallback, useContext } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../../../../../Components/CustomNumberInput\"\nimport { DataContext } from \"../../../../../Context/DataContext\"\nimport { StatFilters, StatFilterSetting } from \"../../../../../Database/DataManagers/BuildSettingData\"\nimport { NodeDisplay } from \"../../../../../Formula/uiData\"\nimport { objPathValue } from \"../../../../../Util/Util\"\nimport OptimizationTargetSelector from \"./OptimizationTargetSelector\"\n\ntype OptimizationTargetEditorListProps = {\n  statFilters: StatFilters\n  setStatFilters: (statFilters: StatFilters) => void\n  disabled: boolean\n}\n\nexport default function OptimizationTargetEditorList({ statFilters, setStatFilters, disabled = false }: OptimizationTargetEditorListProps) {\n  const setTarget = useCallback((path: string[], oldPath?: string[], oldIndex?: number) => {\n    const statFilters_ = { ...statFilters }\n    const oldPathStr = JSON.stringify(oldPath)\n    const oldFilterArr = oldPath ? [...statFilters[oldPathStr]!] : undefined\n    const pathStr = JSON.stringify(path)\n    const filterArr = [...(statFilters[pathStr] ?? [])]\n    // Copy/create new setting\n    if (oldIndex !== undefined && oldFilterArr) filterArr.push(oldFilterArr[oldIndex])\n    else filterArr.push({ value: 0, disabled: false })\n    statFilters_[pathStr] = filterArr\n    // Remove old setting\n    if (oldIndex !== undefined && oldFilterArr) {\n      oldFilterArr.splice(oldIndex, 1)\n      if (oldFilterArr.length) statFilters_[oldPathStr] = oldFilterArr\n      else delete statFilters_[oldPathStr]\n    }\n    setStatFilters({ ...statFilters_ })\n  }, [setStatFilters, statFilters])\n\n  const delTarget = useCallback((path: string[], index: number) => {\n    const statFilters_ = { ...statFilters }\n    const pathStr = JSON.stringify(path)\n    const filterArr = [...statFilters[pathStr]!]\n    filterArr.splice(index, 1)\n    if (filterArr.length) statFilters_[pathStr] = filterArr\n    else delete statFilters_[pathStr]\n    setStatFilters({ ...statFilters_ })\n  }, [setStatFilters, statFilters])\n\n  const setTargetValue = useCallback((path: string[], index: number, value: number) => {\n    const statFilters_ = { ...statFilters }\n    const pathStr = JSON.stringify(path)\n    const filterArr = [...statFilters[pathStr]!]\n    filterArr[index] = { ...filterArr[index], value } as StatFilterSetting\n    statFilters_[pathStr] = filterArr\n    setStatFilters({ ...statFilters_ })\n  }, [setStatFilters, statFilters])\n\n  const setTargetDisabled = useCallback((path: string[], index: number, disabled: boolean) => {\n    const statFilters_ = { ...statFilters }\n    const pathStr = JSON.stringify(path)\n    const filterArr = [...statFilters[pathStr]!]\n    filterArr[index] = { ...filterArr[index], disabled } as StatFilterSetting\n    statFilters_[pathStr] = filterArr\n    setStatFilters({ ...statFilters_ })\n  }, [setStatFilters, statFilters])\n\n  return <>\n    {Object.entries(statFilters).flatMap(([pathStr, settings]) =>\n      settings?.map((setting, index) =>\n        <OptimizationTargetEditorItem path={JSON.parse(pathStr)} setting={setting} index={index} setTarget={setTarget} delTarget={delTarget} setValue={setTargetValue} setDisabled={setTargetDisabled} disabled={disabled} key={pathStr + index} />\n      )\n    )}\n    <OptimizationTargetEditorItem setTarget={setTarget} delTarget={delTarget} setValue={setTargetValue} setDisabled={setTargetDisabled} disabled={disabled} />\n  </>\n}\n\ntype OptimizationTargetEditorItemProps = {\n  path?: string[]\n  setting?: StatFilterSetting\n  index?: number\n  setTarget: (path: string[], oldPath?: string[], oldIndex?: number) => void\n  delTarget: (path: string[], index: number) => void\n  setValue: (path: string[], index: number, value: number) => void\n  setDisabled: (path: string[], index: number, disabled: boolean) => void\n  disabled: boolean\n}\nfunction OptimizationTargetEditorItem({ path, setting, index, setTarget, delTarget, setValue, setDisabled, disabled }: OptimizationTargetEditorItemProps) {\n  const { t } = useTranslation(\"page_character_optimize\")\n  const { data } = useContext(DataContext)\n  const onChange = useCallback((val: number | undefined) => path && (index !== undefined) && setValue(path, index, val ?? 0), [setValue, path, index])\n  const buttonStyle = { p: 1, flexBasis: 30, flexGrow: 0, flexShrink: 0 }\n\n  const buildConstraintNode: NodeDisplay = objPathValue(data.getDisplay(), path ?? [])\n  const isPercent = buildConstraintNode?.info?.unit === \"%\"\n\n  return <ButtonGroup sx={{ \"& .MuiButtonGroup-grouped\": { minWidth: 24 }, width: \"100%\" }}>\n    {!!setting && !!path && (index !== undefined) && <Button sx={buttonStyle} color={setting.disabled ? \"secondary\" : \"success\"} onClick={() => setDisabled(path, index, !setting.disabled)} disabled={disabled}>\n      {setting.disabled ? <CheckBoxOutlineBlank /> : <CheckBox />}\n    </Button>}\n    <OptimizationTargetSelector showEmptyTargets optimizationTarget={path} setTarget={(target) => setTarget(target, path, index)} defaultText={t(\"targetSelector.selectBuildTarget\")} />\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 150, flexGrow: 1 }}>\n      <CustomNumberInput\n        float\n        disabled={!path || disabled}\n        value={setting?.value}\n        placeholder=\"Stat Value\"\n        onChange={onChange}\n        sx={{ px: 1, }}\n        inputProps={{ sx: { textAlign: \"right\" } }}\n        endAdornment={isPercent ? \"%\" : undefined}\n      />\n    </CustomNumberInputButtonGroupWrapper>\n    {!!path && (index !== undefined) && <Button sx={buttonStyle} color=\"error\" onClick={() => delTarget(path, index)} disabled={disabled}>\n      <DeleteForever fontSize=\"small\" />\n    </Button>}\n  </ButtonGroup>\n}\n","import { Box, CardContent, Typography } from \"@mui/material\"\nimport { useCallback, useContext } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport CardLight from \"../../../../../Components/Card/CardLight\"\nimport InfoTooltip from \"../../../../../Components/InfoTooltip\"\nimport { CharacterContext } from \"../../../../../Context/CharacterContext\"\nimport { StatFilters } from \"../../../../../Database/DataManagers/BuildSettingData\"\nimport useBuildSetting from \"../useBuildSetting\"\nimport OptimizationTargetEditorList from \"./OptimizationTargetEditorList\"\n\nexport default function StatFilterCard({ disabled = false }: { disabled?: boolean }) {\n  const { t } = useTranslation(\"page_character_optimize\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { buildSetting: { statFilters }, buildSettingDispatch } = useBuildSetting(characterKey)\n  const setStatFilters = useCallback((statFilters: StatFilters) => buildSettingDispatch({ statFilters }), [buildSettingDispatch])\n\n  return <Box>\n    <CardLight>\n      <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\n        <Typography>{t`constraintFilter.title`}</Typography>\n        <InfoTooltip title={<Typography>{t`constraintFilter.tooltip`}</Typography>} />\n      </CardContent>\n    </CardLight>\n    <Box display=\"flex\" flexDirection=\"column\" gap={0.5}>\n      <OptimizationTargetEditorList statFilters={statFilters} setStatFilters={setStatFilters} disabled={disabled} />\n    </Box>\n  </Box>\n}\n","import { Add, CheckBox, CheckBoxOutlineBlank, Close, KeyboardArrowDown, KeyboardArrowUp, KeyboardDoubleArrowDown, KeyboardDoubleArrowUp, Replay, Settings } from \"@mui/icons-material\";\r\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, Typography } from \"@mui/material\";\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport ArtifactCardPico from \"../../../../../Components/Artifact/ArtifactCardPico\";\r\nimport CardDark from \"../../../../../Components/Card/CardDark\";\r\nimport CardLight from \"../../../../../Components/Card/CardLight\";\r\nimport CharacterCardPico from \"../../../../../Components/Character/CharacterCardPico\";\r\nimport CloseButton from \"../../../../../Components/CloseButton\";\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../../../../../Components/CustomNumberInput\";\r\nimport ModalWrapper from \"../../../../../Components/ModalWrapper\";\r\nimport SqBadge from \"../../../../../Components/SqBadge\";\r\nimport WeaponCardPico from \"../../../../../Components/Weapon/WeaponCardPico\";\r\nimport { CharacterContext } from \"../../../../../Context/CharacterContext\";\r\nimport { DatabaseContext } from \"../../../../../Database/Database\";\r\nimport useBoolState from \"../../../../../ReactHooks/useBoolState\";\r\nimport useCharacter from \"../../../../../ReactHooks/useCharacter\";\r\nimport useCharSelectionCallback from \"../../../../../ReactHooks/useCharSelectionCallback\";\r\nimport { ICachedArtifact } from \"../../../../../Types/artifact\";\r\nimport { ICachedCharacter } from \"../../../../../Types/character\";\r\nimport { CharacterKey, charKeyToLocCharKey } from \"../../../../../Types/consts\";\r\nimport useBuildSetting from \"../useBuildSetting\";\r\nconst CharacterSelectionModal = React.lazy(() => import('../../../../CharacterSelectionModal'))\r\n\r\nexport default function UseEquipped({ disabled = false, filteredArts }: { disabled?: boolean, filteredArts: ICachedArtifact[] }) {\r\n  const { t } = useTranslation(\"page_character_optimize\")\r\n  const { character: { key: characterKey } } = useContext(CharacterContext)\r\n  const { buildSetting: { useEquippedArts }, buildSettingDispatch } = useBuildSetting(characterKey)\r\n  const { database } = useContext(DatabaseContext)\r\n  const [show, onOpen, onClose] = useBoolState(false)\r\n  const [{ equipmentPriority: tempEquipmentPriority }, setTO] = useState(database.displayOptimize.get())\r\n  useEffect(() => database.displayOptimize.follow((r, to) => setTO(to)), [database, setTO])\r\n  //Basic validate for the equipmentPrio list to remove dups and characters that doesnt exist.\r\n  const equipmentPriority = useMemo(() => [...new Set(tempEquipmentPriority)].filter(ck => database.chars.get(ck)), [database, tempEquipmentPriority])\r\n  const setPrio = useCallback((equipmentPriority: CharacterKey[]) => database.displayOptimize.set({ equipmentPriority }), [database])\r\n\r\n  const setPrioRank = useCallback((fromIndex, toIndex) => {\r\n    const arr = [...equipmentPriority]\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n    setPrio(arr)\r\n  }, [equipmentPriority, setPrio])\r\n  const removePrio = useCallback((fromIndex) => {\r\n    const arr = [...equipmentPriority]\r\n    arr.splice(fromIndex, 1)\r\n    setPrio(arr)\r\n  }, [equipmentPriority, setPrio])\r\n  const addPrio = useCallback((ck: CharacterKey) => setPrio([...equipmentPriority, ck]), [equipmentPriority, setPrio])\r\n  const resetPrio = useCallback(() => setPrio([]), [setPrio])\r\n\r\n  const numAbove = useMemo(() => {\r\n    let numAbove = equipmentPriority.length\r\n    const index = equipmentPriority.indexOf(characterKey)\r\n    if (index >= 0) numAbove = index\r\n    return numAbove\r\n  }, [characterKey, equipmentPriority])\r\n  const numUseEquippedChar = useMemo(() => {\r\n    return database.chars.keys.length - 1 - numAbove\r\n  }, [numAbove, database])\r\n  const numUnlisted = useMemo(() => {\r\n    return database.chars.keys.length - equipmentPriority.length\r\n  }, [equipmentPriority, database])\r\n\r\n  const totArts = useMemo(() => filteredArts.filter(a => a.location && a.location !== charKeyToLocCharKey(characterKey)).length, [filteredArts, characterKey])\r\n\r\n  return <Box display=\"flex\" gap={1}>\r\n    <ModalWrapper open={show} onClose={onClose} containerProps={{ maxWidth: \"sm\" }}><CardDark>\r\n      <CardContent>\r\n        <Grid container spacing={1}>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"h6\">{t`useEquipped.modal.title`}</Typography>\r\n          </Grid>\r\n          <Grid item sx={{ mb: -1 }}>\r\n            <CloseButton onClick={onClose} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <CardLight sx={{ mb: 1 }}>\r\n          <CardContent>\r\n            <Typography gutterBottom><Trans t={t} i18nKey=\"useEquipped.modal.desc1\">When generating a build, the Optimizer will only consider equipped artifacts from characters below the current character or those not on the list.</Trans></Typography>\r\n            <Typography gutterBottom><Trans t={t} i18nKey=\"useEquipped.modal.desc2\">If the current character is not on the list, the Optimizer will only consider equipped artifacts from others characters that are not on the list.</Trans></Typography>\r\n          </CardContent>\r\n        </CardLight>\r\n        <Box display=\"flex\" flexDirection=\"column\" gap={2}>\r\n          {equipmentPriority.map((ck, i) =>\r\n            <SelectItem key={ck} characterKey={ck} rank={i + 1} maxRank={equipmentPriority.length} setRank={(num) => num && setPrioRank(i, num - 1)} onRemove={() => removePrio(i)} numAbove={numAbove} />)}\r\n          <Box sx={{ display: \"flex\", gap: 1 }}>\r\n            <NewItem onAdd={addPrio} list={equipmentPriority} />\r\n            <Button color=\"error\" onClick={resetPrio} startIcon={<Replay />}><Trans t={t} i18nKey=\"useEquipped.modal.clearList\">Clear List</Trans></Button>\r\n          </Box>\r\n          {!!numUseEquippedChar && <SqBadge color=\"success\"><Typography><Trans t={t} i18nKey=\"useEquipped.modal.usingNum\" count={numUnlisted}>Using artifacts from <strong>{{ count: numUnlisted } as TransObject}</strong> unlisted characters</Trans></Typography></SqBadge>}\r\n        </Box>\r\n      </CardContent>\r\n    </CardDark ></ModalWrapper>\r\n    <ButtonGroup sx={{ display: \"flex\", width: \"100%\" }}>\r\n      <Button sx={{ flexGrow: 1 }} onClick={() => buildSettingDispatch({ useEquippedArts: !useEquippedArts })} disabled={disabled} startIcon={useEquippedArts ? <CheckBox /> : <CheckBoxOutlineBlank />} color={useEquippedArts ? \"success\" : \"secondary\"}>\r\n        <Box sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }}>\r\n          <span><Trans t={t} i18nKey=\"useEquipped.title\">Use Equipped Artifacts</Trans></span>\r\n          {useEquippedArts && <SqBadge sx={{ whiteSpace: \"normal\" }}><Trans t={t} i18nKey=\"useEquipped.usingNumTot\" count={numUnlisted} arts={totArts}>Using <strong>{{ arts: totArts } as TransObject}</strong> artifacts from <strong>{{ count: numUnlisted } as TransObject}</strong> characters</Trans></SqBadge>}\r\n        </Box>\r\n      </Button>\r\n      {useEquippedArts && <Button sx={{ flexShrink: 1 }} color=\"info\" onClick={onOpen} disabled={disabled}><Settings /></Button>}\r\n    </ButtonGroup>\r\n  </Box>\r\n}\r\n\r\nconst itemSize = 60\r\nfunction SelectItem({ characterKey, rank, maxRank, setRank, onRemove, numAbove }: {\r\n  characterKey: CharacterKey,\r\n  rank: number,\r\n  maxRank: number,\r\n  setRank: (r: number | undefined) => void,\r\n  onRemove: () => void,\r\n  numAbove: number,\r\n}) {\r\n  const { t } = useTranslation(\"page_character_optimize\")\r\n  const { database } = useContext(DatabaseContext)\r\n  const character = useCharacter(characterKey)\r\n  const onClick = useCharSelectionCallback()\r\n  if (!character) return null\r\n  const { equippedWeapon, equippedArtifacts } = character\r\n  return <CardLight sx={{ p: 1 }}  >\r\n    <Box sx={{ pb: 1, display: \"flex\", justifyContent: \"space-between\", gap: 1 }}>\r\n      <SqBadge color=\"info\">\r\n        <Typography>#{rank}</Typography>\r\n      </SqBadge>\r\n      <SqBadge sx={{ flexGrow: 1 }} color={numAbove === (rank - 1) ? \"warning\" : (rank - 1) < numAbove ? \"error\" : \"success\"}>\r\n        <Typography>{numAbove === (rank - 1) ? <Trans t={t} i18nKey=\"useEquipped.modal.status.curr\">Current character</Trans>\r\n          : (rank - 1) < numAbove ? <Trans t={t} i18nKey=\"useEquipped.modal.status.dont\">Don't Use artifacts</Trans> :\r\n            <Trans t={t} i18nKey=\"useEquipped.modal.status.use\">Use artifacts</Trans>}</Typography>\r\n      </SqBadge>\r\n      <Box>\r\n        <ButtonGroup sx={{ flexGrow: 1 }} size=\"small\">\r\n          <CustomNumberInputButtonGroupWrapper >\r\n            <CustomNumberInput onChange={setRank} value={rank}\r\n              // startAdornment=\"Rank:\"\r\n              inputProps={{ min: 1, max: maxRank, sx: { textAlign: \"center\" } }}\r\n              sx={{ width: \"100%\", height: \"100%\", pl: 2 }} />\r\n          </CustomNumberInputButtonGroupWrapper>\r\n          <Button disabled={rank === 1} onClick={() => setRank(1)} >\r\n            <KeyboardDoubleArrowUp />\r\n          </Button>\r\n          <Button disabled={rank === 1} onClick={() => setRank(rank - 1)}  >\r\n            <KeyboardArrowUp />\r\n          </Button>\r\n          <Button disabled={rank === maxRank} onClick={() => setRank(rank + 1)}  >\r\n            <KeyboardArrowDown />\r\n          </Button>\r\n          <Button disabled={rank === maxRank} onClick={() => setRank(maxRank)}  >\r\n            <KeyboardDoubleArrowDown />\r\n          </Button>\r\n          <Button color=\"error\" onClick={onRemove}>\r\n            <Close />\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Box>\r\n    </Box>\r\n    <Grid container columns={7} spacing={1}>\r\n      <Grid item xs={1} >\r\n        <CharacterCardPico characterKey={characterKey} onClick={onClick} />\r\n      </Grid>\r\n      <Grid item xs={1}><WeaponCardPico weaponId={equippedWeapon} /></Grid>\r\n      {Object.entries(equippedArtifacts).map(([slotKey, aId]) => <Grid item xs={1} key={slotKey} ><ArtifactCardPico slotKey={slotKey} artifactObj={database.arts.get(aId)} /></Grid>)}\r\n    </Grid>\r\n\r\n  </CardLight>\r\n}\r\nfunction NewItem({ onAdd, list }: { onAdd: (ck: CharacterKey) => void, list: CharacterKey[] }) {\r\n  const { t } = useTranslation(\"page_character_optimize\")\r\n  const [show, onOpen, onClose] = useBoolState(false)\r\n  const filter = useCallback((char?: ICachedCharacter) => {\r\n    if (!char) return false\r\n    return !list.includes(char.key)\r\n  }, [list])\r\n  return <>\r\n    <Suspense fallback={false}>\r\n      <CharacterSelectionModal show={show} onHide={onClose} onSelect={onAdd} filter={filter} />\r\n    </Suspense>\r\n    <Button fullWidth sx={{ height: itemSize }} color=\"info\" onClick={onOpen} startIcon={<Add />} >\r\n      <Trans t={t} i18nKey=\"useEquipped.modal.add\">Add character to list</Trans>\r\n    </Button>\r\n  </>\r\n}\r\n","import { CheckBox, CheckBoxOutlineBlank } from \"@mui/icons-material\";\nimport { Box, Button } from \"@mui/material\";\nimport { useContext, useMemo } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport SqBadge from \"../../../../../Components/SqBadge\";\nimport { CharacterContext } from \"../../../../../Context/CharacterContext\";\nimport { DatabaseContext } from \"../../../../../Database/Database\";\nimport useBuildSetting from \"../useBuildSetting\";\n\nexport default function UseExcluded({ disabled = false, artsDirty }: { disabled?: boolean, artsDirty: object }) {\n  const { t } = useTranslation(\"page_character_optimize\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { buildSetting: { useExcludedArts }, buildSettingDispatch } = useBuildSetting(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const numExcludedArt = useMemo(() => artsDirty && database.arts.values.reduce((a, art) => a + (art.exclude ? 1 : 0), 0), [database, artsDirty])\n  return <Button fullWidth onClick={() => buildSettingDispatch({ useExcludedArts: !useExcludedArts })} disabled={!numExcludedArt || disabled} startIcon={useExcludedArts ? <CheckBox /> : <CheckBoxOutlineBlank />} color={useExcludedArts ? \"success\" : \"secondary\"}>\n    <Box sx={{ display: \"flex\", gap: 1 }}>\n      <Box><Trans t={t} i18nKey=\"useExcluded.title\" count={numExcludedArt}>Use Excluded Artifacts</Trans></Box>\n      {useExcludedArts ? <SqBadge><Trans t={t} i18nKey=\"useExcluded.usingNum\" count={numExcludedArt}>Using <strong>{{ count: numExcludedArt } as TransObject}</strong> excluded artifacts</Trans></SqBadge> :\n        <SqBadge color=\"error\"><Trans t={t} i18nKey=\"useExcluded.excNum\" count={numExcludedArt}>Excluded <strong>{{ count: numExcludedArt } as TransObject}</strong> artifacts</Trans></SqBadge>}\n    </Box>\n  </Button>\n}\n","import Alert from \"@mui/material/Alert\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function WorkerErr() {\n  const { t } = useTranslation(\"page_character_optimize\")\n  return <Alert severity=\"error\" variant=\"filled\" onClick={() => window.location.reload()} sx={{\n    \"& .MuiAlert-message\": {\n      flexGrow: 1,\n      cursor: \"pointer\"\n    }\n  }}>{t`workerLoadFailed`}</Alert>\n}\n","import Artifact from \"../../../../Data/Artifacts/Artifact\";\r\nimport { input } from \"../../../../Formula\";\r\nimport { computeUIData } from \"../../../../Formula/api\";\r\nimport { formulaString } from \"../../../../Formula/debug\";\r\nimport { Data, NumNode } from \"../../../../Formula/type\";\r\nimport { constant, setReadNodeKeys } from \"../../../../Formula/utils\";\r\nimport { allMainStatKeys, allSubstatKeys, ICachedArtifact } from \"../../../../Types/artifact\";\r\nimport { deepClone, objectKeyMap, objectMap } from \"../../../../Util/Util\";\r\nimport type { ArtifactBuildData, ArtifactsBySlot, DynStat } from \"./common\";\r\n\r\nconst dynamic = setReadNodeKeys(deepClone({ dyn: { ...input.art, ...input.artSet } }))\r\nexport const dynamicData = {\r\n  art: objectKeyMap([...allMainStatKeys, ...allSubstatKeys], key => dynamic.dyn[key]),\r\n  artSet: objectMap(input.artSet, (_, key) => dynamic.dyn[key]),\r\n}\r\n\r\nexport function compactArtifacts(arts: ICachedArtifact[], mainStatAssumptionLevel: number, allowPartial: boolean): ArtifactsBySlot {\r\n  const result: ArtifactsBySlot = {\r\n    base: {},\r\n    values: { flower: [], plume: [], goblet: [], circlet: [], sands: [] }\r\n  }\r\n  const keys = new Set<string>()\r\n\r\n  for (const art of arts) {\r\n    const mainStatVal = Artifact.mainStatValue(art.mainStatKey, art.rarity, Math.max(Math.min(mainStatAssumptionLevel, art.rarity * 4), art.level))\r\n\r\n    const data: ArtifactBuildData = {\r\n      id: art.id, set: art.setKey,\r\n      values: {\r\n        [art.setKey]: 1,\r\n        [art.mainStatKey]: art.mainStatKey.endsWith('_') ? mainStatVal / 100 : mainStatVal,\r\n        ...Object.fromEntries(art.substats.map(substat =>\r\n          [substat.key, substat.key.endsWith('_') ? substat.accurateValue / 100 : substat.accurateValue]))\r\n      },\r\n    }\r\n    delete data.values[\"\"]\r\n    result.values[art.slotKey].push(data)\r\n    Object.keys(data.values).forEach(x => keys.add(x))\r\n  }\r\n  result.base = objectKeyMap([...keys], _ => 0)\r\n  if (allowPartial)\r\n    for (const value of Object.values(result.values))\r\n      value.push({ id: \"\", values: {} })\r\n  return result\r\n}\r\n\r\nexport function debugCompute(nodes: NumNode[], base: DynStat, arts: ArtifactBuildData[]) {\r\n  const stats = { ...base }\r\n  for (const art of arts) {\r\n    for (const [key, value] of Object.entries(art.values)) {\r\n      stats[key] = (stats[key] ?? 0) + value\r\n    }\r\n  }\r\n  const data = { dyn: Object.fromEntries(Object.entries(stats).map(([key, value]) => [key, constant(value)])) } as Data\r\n  const uiData = computeUIData([data])\r\n  return {\r\n    base, arts, stats,\r\n    data, uiData,\r\n    nodes: nodes.map(formulaString),\r\n    results: nodes.map(node => uiData.get(node)),\r\n  }\r\n}\r\n","import { CheckBox, CheckBoxOutlineBlank, Close, DeleteForever, Science, TrendingUp } from '@mui/icons-material';\nimport { Alert, Box, Button, ButtonGroup, CardContent, Divider, Grid, Link, MenuItem, Skeleton, ToggleButton, Typography } from '@mui/material';\nimport React, { Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useRef, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Link as RouterLink, useLocation, useNavigate } from 'react-router-dom';\nimport ArtifactLevelSlider from '../../../../Components/Artifact/ArtifactLevelSlider';\nimport BootstrapTooltip from '../../../../Components/BootstrapTooltip';\nimport CardLight from '../../../../Components/Card/CardLight';\nimport CharacterCard from '../../../../Components/Character/CharacterCard';\nimport DropdownButton from '../../../../Components/DropdownMenu/DropdownButton';\nimport { HitModeToggle, ReactionToggle } from '../../../../Components/HitModeEditor';\nimport InfoTooltip from '../../../../Components/InfoTooltip';\nimport SolidToggleButtonGroup from '../../../../Components/SolidToggleButtonGroup';\nimport SqBadge from '../../../../Components/SqBadge';\nimport { CharacterContext } from '../../../../Context/CharacterContext';\nimport { DataContext, dataContextObj } from '../../../../Context/DataContext';\nimport { GraphContext } from '../../../../Context/GraphContext';\nimport { OptimizationTargetContext } from '../../../../Context/OptimizationTargetContext';\nimport { DatabaseContext } from '../../../../Database/Database';\nimport { defThreads } from '../../../../Database/DataEntries/DisplayOptimizeEntry';\nimport { mergeData, uiDataForTeam } from '../../../../Formula/api';\nimport { optimize } from '../../../../Formula/optimization';\nimport { NumNode } from '../../../../Formula/type';\nimport { UIData } from '../../../../Formula/uiData';\nimport useCharacterReducer from '../../../../ReactHooks/useCharacterReducer';\nimport useCharSelectionCallback from '../../../../ReactHooks/useCharSelectionCallback';\nimport useDBMeta from '../../../../ReactHooks/useDBMeta';\nimport useForceUpdate from '../../../../ReactHooks/useForceUpdate';\nimport useMediaQueryUp from '../../../../ReactHooks/useMediaQueryUp';\nimport useTeamData, { getTeamData } from '../../../../ReactHooks/useTeamData';\nimport { CharacterKey, charKeyToLocCharKey, LocationCharacterKey } from '../../../../Types/consts';\nimport { objPathValue, range } from '../../../../Util/Util';\nimport { FinalizeResult, Setup, WorkerCommand, WorkerResult } from './BackgroundWorker';\nimport { maxBuildsToShowList } from './Build';\nimport { artSetPerm, Build, filterFeasiblePerm, mergeBuilds, mergePlot, pruneAll, pruneExclusion, RequestFilter } from './common';\nimport ArtifactSetConfig from './Components/ArtifactSetConfig';\nimport AssumeFullLevelToggle from './Components/AssumeFullLevelToggle';\nimport BonusStatsCard from './Components/BonusStatsCard';\nimport BuildAlert, { BuildStatus } from './Components/BuildAlert';\nimport BuildDisplayItem from './Components/BuildDisplayItem';\nimport ChartCard from './Components/ChartCard';\nimport MainStatSelectionCard from './Components/MainStatSelectionCard';\nimport OptimizationTargetSelector from './Components/OptimizationTargetSelector';\nimport StatFilterCard from './Components/StatFilterCard';\nimport UseEquipped from './Components/UseEquipped';\nimport UseExcluded from './Components/UseExcluded';\nimport WorkerErr from './Components/WorkerErr';\nimport { compactArtifacts, dynamicData } from './foreground';\nimport useBuildResult from './useBuildResult';\nimport useBuildSetting from './useBuildSetting';\nimport NotificationsOffIcon from '@mui/icons-material/NotificationsOff';\nimport NotificationsActiveIcon from '@mui/icons-material/NotificationsActive';\n\nconst audio = new Audio(\"notification.mp3\")\nexport default function TabBuild() {\n  const { t } = useTranslation(\"page_character_optimize\")\n  const { character: { key: characterKey, compareData } } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const { setChartData, graphBuilds, setGraphBuilds } = useContext(GraphContext)\n  const { gender } = useDBMeta()\n\n  const [notification, setnotification] = useState(false)\n  const notificationRef = useRef(false)\n  useEffect(() => { notificationRef.current = notification }, [notification])\n\n\n  const [buildStatus, setBuildStatus] = useState({ type: \"inactive\", tested: 0, failed: 0, skipped: 0, total: 0 } as BuildStatus)\n  const generatingBuilds = buildStatus.type !== \"inactive\"\n\n  const [artsDirty, setArtsDirty] = useForceUpdate()\n\n  const [{ equipmentPriority, threads = defThreads }, setDisplayOptimize] = useState(database.displayOptimize.get())\n  useEffect(() => database.displayOptimize.follow((r, to) => setDisplayOptimize(to)), [database, setDisplayOptimize])\n\n  const maxWorkers = threads > defThreads ? defThreads : threads\n  const setMaxWorkers = useCallback(threads => database.displayOptimize.set({ threads }), [database],)\n\n  const characterDispatch = useCharacterReducer(characterKey)\n  const onClickTeammate = useCharSelectionCallback()\n\n  // Clear state when changing characters\n  useEffect(() => {\n    setBuildStatus({ type: \"inactive\", tested: 0, failed: 0, skipped: 0, total: 0 })\n  }, [characterKey])\n\n  const noArtifact = useMemo(() => !database.arts.values.length, [database])\n\n  const { buildSetting, buildSettingDispatch } = useBuildSetting(characterKey)\n  const { plotBase, optimizationTarget, mainStatAssumptionLevel, allowPartial, maxBuildsToShow, levelLow, levelHigh } = buildSetting\n  const { buildResult: { builds, buildDate }, buildResultDispatch } = useBuildResult(characterKey)\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\n  const { characterSheet, target: data } = teamData?.[characterKey as CharacterKey] ?? {}\n  const optimizationTargetNode = optimizationTarget && objPathValue(data?.getDisplay(), optimizationTarget)\n  const isSM = [\"xs\", \"sm\"].includes(useMediaQueryUp())\n\n  //register changes in artifact database\n  useEffect(() =>\n    database.arts.followAny(setArtsDirty),\n    [setArtsDirty, database])\n\n  const deferredArtsDirty = useDeferredValue(artsDirty)\n  const deferredBuildSetting = useDeferredValue(buildSetting)\n  const filteredArts = useMemo(() => {\n    const { mainStatKeys, useExcludedArts, useEquippedArts, levelLow, levelHigh } = deferredArtsDirty && deferredBuildSetting\n    const cantTakeList: Set<LocationCharacterKey> = new Set()\n    if (useEquippedArts) {\n      const index = equipmentPriority.indexOf(characterKey)\n      if (index < 0) equipmentPriority.forEach(ek => cantTakeList.add(charKeyToLocCharKey(ek)))\n      else equipmentPriority.slice(0, index).forEach(ek => cantTakeList.add(charKeyToLocCharKey(ek)))\n    }\n    return database.arts.values.filter(art => {\n      if (art.level < levelLow) return false\n      if (art.level > levelHigh) return false\n      const mainStats = mainStatKeys[art.slotKey]\n      if (mainStats?.length && !mainStats.includes(art.mainStatKey)) return false\n\n      if (art.exclude && !useExcludedArts) return false\n\n      // If its equipped on the selected character, bypass the check\n      if (art.location === charKeyToLocCharKey(characterKey)) return true\n      if (art.location && !useEquippedArts) return false\n      if (art.location && useEquippedArts && cantTakeList.has(art.location)) return false\n      return true\n    })\n  }, [database, characterKey, equipmentPriority, deferredArtsDirty, deferredBuildSetting])\n\n  const filteredArtIds = useMemo(() => filteredArts.map(a => a.id), [filteredArts])\n  const levelTotal = useMemo(() => {\n    const { levelLow, levelHigh } = deferredBuildSetting\n    let total = 0, current = 0\n    Object.entries(database.arts.data).forEach(([id, art]) => {\n      if (art.level >= levelLow && art.level <= levelHigh) {\n        total++\n        if (filteredArtIds.includes(id)) current++\n      }\n    })\n    return `${current}/${total}`\n  }, [deferredBuildSetting, filteredArtIds, database])\n\n  const tabFocused = useRef(true)\n  useEffect(() => {\n    const onFocus = () => tabFocused.current = true\n    const onBlur = () => tabFocused.current = false\n    window.addEventListener('focus', onFocus)\n    window.addEventListener('blur', onBlur)\n    return () => {\n      window.removeEventListener('focus', onFocus)\n      window.removeEventListener('blur', onBlur)\n    }\n  }, [tabFocused])\n\n  // Provides a function to cancel the work\n  const cancelToken = useRef(() => { })\n  //terminate worker when component unmounts\n  useEffect(() => () => cancelToken.current(), [])\n  const [workerErr, setWorkerErr] = useState(false)\n  const generateBuilds = useCallback(async () => {\n    const { artSetExclusion, plotBase, statFilters, optimizationTarget, mainStatAssumptionLevel, allowPartial, maxBuildsToShow } = buildSetting\n    if (!characterKey || !optimizationTarget) return\n\n    const split = compactArtifacts(filteredArts, mainStatAssumptionLevel, allowPartial)\n\n    const teamData = getTeamData(database, characterKey, mainStatAssumptionLevel, [])\n    if (!teamData) return\n    const workerData = uiDataForTeam(teamData.teamData, gender, characterKey)[characterKey]?.target.data![0]\n    if (!workerData) return\n    Object.assign(workerData, mergeData([workerData, dynamicData])) // Mark art fields as dynamic\n    const unoptimizedOptimizationTargetNode = objPathValue(workerData.display ?? {}, optimizationTarget) as NumNode | undefined\n    if (!unoptimizedOptimizationTargetNode) return\n    const targetNode = unoptimizedOptimizationTargetNode\n    const valueFilter: { value: NumNode, minimum: number }[] = Object.entries(statFilters)\n      .flatMap(([pathStr, settings]) =>\n        settings\n          .filter(setting => !setting.disabled)\n          .map(setting => {\n            const filterNode: NumNode = objPathValue(workerData.display ?? {}, JSON.parse(pathStr))\n            const minimum = filterNode.info?.unit === \"%\" ? setting.value / 100 : setting.value // TODO: Conversion\n            return { value: filterNode, minimum: minimum }\n          })\n      )\n      .filter(x => x.value && x.minimum > -Infinity)\n\n    setChartData(undefined)\n\n    const cancelled = new Promise<void>(r => cancelToken.current = r)\n\n    const unoptimizedNodes = [...valueFilter.map(x => x.value), unoptimizedOptimizationTargetNode]\n    let arts = split!\n    const setPerms = filterFeasiblePerm(artSetPerm(artSetExclusion, Object.values(split.values).flatMap(x => x.map(x => x.set!))), split)\n\n    const minimum = [...valueFilter.map(x => x.minimum), -Infinity]\n    const status: Omit<BuildStatus, \"type\"> = { tested: 0, failed: 0, skipped: 0, total: NaN, startTime: performance.now() }\n    const plotBaseNumNode: NumNode = plotBase && objPathValue(workerData.display ?? {}, plotBase)\n    if (plotBaseNumNode) {\n      unoptimizedNodes.push(plotBaseNumNode)\n      minimum.push(-Infinity)\n    }\n\n    const prepruneArts = arts\n    let nodes = optimize(unoptimizedNodes, workerData, ({ path: [p] }) => p !== \"dyn\")\n    nodes = pruneExclusion(nodes, artSetExclusion);\n    ({ nodes, arts } = pruneAll(nodes, minimum, arts, maxBuildsToShow, artSetExclusion, {\n      reaffine: true, pruneArtRange: true, pruneNodeRange: true, pruneOrder: true\n    }))\n    nodes = optimize(nodes, {}, _ => false)\n\n    const plotBaseNode = plotBaseNumNode ? nodes.pop() : undefined\n    const optimizationTargetNode = nodes.pop()!\n\n    const wrap = { buildValues: Array(maxBuildsToShow).fill(0).map(_ => ({ src: \"\", val: -Infinity })) }\n\n    const minFilterCount = 16_000_000, maxRequestFilterInFlight = maxWorkers * 16\n    const unprunedFilters = setPerms[Symbol.iterator](), requestFilters: RequestFilter[] = []\n    const idleWorkers: number[] = [], splittingWorkers = new Set<number>()\n    const workers: Worker[] = []\n\n    function getThreshold(): number {\n      return wrap.buildValues[maxBuildsToShow - 1].val\n    }\n    function fetchContinueWork(): WorkerCommand {\n      return { command: \"split\", filter: undefined, minCount: minFilterCount, threshold: getThreshold() }\n    }\n    function fetchPruningWork(): WorkerCommand | undefined {\n      const { done, value } = unprunedFilters.next()\n      return done ? undefined : {\n        command: \"split\", minCount: minFilterCount,\n        threshold: getThreshold(), filter: value,\n      }\n    }\n    function fetchRequestWork(): WorkerCommand | undefined {\n      const filter = requestFilters.pop()\n      return !filter ? undefined : {\n        command: \"iterate\",\n        threshold: getThreshold(), filter\n      }\n    }\n\n    const filters = nodes\n      .map((value, i) => ({ value, min: minimum[i] }))\n      .filter(x => x.min > -Infinity)\n\n    const finalizedList: Promise<FinalizeResult>[] = []\n    for (let i = 0; i < maxWorkers; i++) {\n      const worker = new Worker(new URL('./BackgroundWorker.ts', import.meta.url))\n      worker.addEventListener(\"error\", _ => {\n        console.error(\"Failed to load worker\")\n        setWorkerErr(true)\n        cancelToken.current()\n      });\n\n      const setup: Setup = {\n        command: \"setup\",\n        id: i, arts,\n        optimizationTarget: optimizationTargetNode,\n        plotBase: plotBaseNode,\n        maxBuilds: maxBuildsToShow,\n        filters\n      }\n      worker.postMessage(setup, undefined)\n      if (i === 0) {\n        const countCommand: WorkerCommand = { command: \"count\", exclusion: artSetExclusion, arts: [arts, prepruneArts] }\n        worker.postMessage(countCommand, undefined)\n      }\n      let finalize: (_: FinalizeResult) => void\n      const finalized = new Promise<FinalizeResult>(r => finalize = r)\n      worker.onmessage = async ({ data }: { data: { id: number } & WorkerResult }) => {\n        setWorkerErr(false)\n        switch (data.command) {\n          case \"interim\":\n            status.tested += data.tested\n            status.failed += data.failed\n            status.skipped += data.skipped\n            if (data.buildValues) {\n              wrap.buildValues = wrap.buildValues.filter(({ src }) => src !== data.source)\n              wrap.buildValues.push(...data.buildValues.map(val => ({ src: data.source, val })))\n              wrap.buildValues.sort((a, b) => b.val - a.val).splice(maxBuildsToShow)\n            }\n            break\n          case \"split\":\n            if (data.filter) {\n              requestFilters.push(data.filter)\n              splittingWorkers.add(data.id)\n            } else splittingWorkers.delete(data.id)\n            idleWorkers.push(data.id)\n            break\n          case \"iterate\":\n            idleWorkers.push(data.id)\n            break\n          case \"finalize\":\n            worker.terminate()\n            finalize(data);\n\n            // Using a timeout because when an alert is displayed, the UI doesnt update, showing an incomplete loading bar\n            setTimeout(() => {\n              // Using a ref because a user can cancel the notification while the build is going.\n              if (notificationRef.current) {\n                audio.play()\n                if (!tabFocused.current)\n                  window.alert(t`buildCompleted`)\n              }\n            }, 100);\n            return\n          case \"count\":\n            const [pruned, prepruned] = data.counts\n            status.total = prepruned\n            status.skipped += prepruned - pruned\n            return\n          default: console.log(\"DEBUG\", data)\n        }\n        while (idleWorkers.length) {\n          const id = idleWorkers.pop()!, worker = workers[id]\n          let work: WorkerCommand | undefined\n          if (requestFilters.length < maxRequestFilterInFlight) {\n            work = fetchPruningWork()\n            if (!work && splittingWorkers.has(id)) work = fetchContinueWork()\n          }\n          if (!work) work = fetchRequestWork()\n          if (work) worker.postMessage(work)\n          else {\n            idleWorkers.push(id)\n            if (idleWorkers.length === 4 * maxWorkers) {\n              const command: WorkerCommand = { command: \"finalize\" }\n              workers.forEach(worker => worker.postMessage(command))\n            }\n            break\n          }\n        }\n      }\n\n      workers.push(worker)\n      cancelled.then(() => worker.terminate())\n      finalizedList.push(finalized)\n    }\n    for (let i = 0; i < 3; i++)\n      idleWorkers.push(...range(0, maxWorkers - 1))\n\n    const buildTimer = setInterval(() => setBuildStatus({ type: \"active\", ...status }), 100)\n    const results = await Promise.any([Promise.all(finalizedList), cancelled])\n    clearInterval(buildTimer)\n    cancelToken.current = () => { }\n\n    if (!results) {\n      status.tested = 0\n      status.failed = 0\n      status.skipped = 0\n      status.total = 0\n    } else {\n      if (plotBaseNumNode) {\n        const plotData = mergePlot(results.map(x => x.plotData!))\n        let data = Object.values(plotData)\n        if (targetNode.info?.unit === \"%\")\n          data = data.map(({ value, plot, artifactIds }) => ({ value: value * 100, plot, artifactIds })) as Build[]\n        if (plotBaseNumNode.info?.unit === \"%\")\n          data = data.map(({ value, plot, artifactIds }) => ({ value, plot: (plot ?? 0) * 100, artifactIds })) as Build[]\n        setChartData({\n          valueNode: targetNode,\n          plotNode: plotBaseNumNode,\n          data\n        })\n      }\n      const builds = mergeBuilds(results.map(x => x.builds), maxBuildsToShow)\n      if (process.env.NODE_ENV === \"development\") console.log(\"Build Result\", builds)\n      buildResultDispatch({ builds: builds.map(build => build.artifactIds), buildDate: Date.now() })\n    }\n    setBuildStatus({ ...status, type: \"inactive\", finishTime: performance.now() })\n  }, [t, characterKey, filteredArts, database, buildResultDispatch, maxWorkers, buildSetting, notificationRef, setChartData, gender])\n\n  const characterName = characterSheet?.name ?? \"Character Name\"\n\n  const setPlotBase = useCallback(plotBase => {\n    buildSettingDispatch({ plotBase })\n    setChartData(undefined)\n  }, [buildSettingDispatch, setChartData])\n  const dataContext: dataContextObj | undefined = useMemo(() => {\n    return data && teamData && { data, teamData }\n  }, [data, teamData])\n\n  const targetSelector = <OptimizationTargetSelector\n    optimizationTarget={optimizationTarget}\n    setTarget={target => buildSettingDispatch({ optimizationTarget: target })}\n    disabled={!!generatingBuilds}\n  />\n\n  const getLabel0 = useCallback((index) => <Trans t={t} i18nKey=\"graphBuildLabel\" count={index + 1}>Graph #{{ count: index + 1 }}</Trans>, [t])\n  const getLabel1 = useCallback((index) => `#${index + 1}`, [])\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n    {noArtifact && <Alert severity=\"warning\" variant=\"filled\"><Trans t={t} i18nKey=\"noArtis\">Oops! It looks like you haven't added any artifacts to GO yet! You should go to the <Link component={RouterLink} to=\"/artifacts\">Artifacts</Link> page and add some!</Trans></Alert>}\n    {/* Build Generator Editor */}\n    {dataContext && <DataContext.Provider value={dataContext}>\n\n      <Grid container spacing={1} >\n        {/* 1*/}\n        <Grid item xs={12} sm={6} lg={3} display=\"flex\" flexDirection=\"column\" gap={1}>\n          {/* character card */}\n          <Box><CharacterCard characterKey={characterKey} onClickTeammate={onClickTeammate} /></Box>\n        </Grid>\n\n        {/* 2 */}\n        <Grid item xs={12} sm={6} lg={4} display=\"flex\" flexDirection=\"column\" gap={1}>\n          <CardLight>\n            <CardContent  >\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                <AssumeFullLevelToggle mainStatAssumptionLevel={mainStatAssumptionLevel} setmainStatAssumptionLevel={mainStatAssumptionLevel => buildSettingDispatch({ mainStatAssumptionLevel })} disabled={generatingBuilds} />\n                <InfoTooltip title={<Box>\n                  <Typography variant=\"h6\">{t`mainStat.levelAssTooltip.title`}</Typography>\n                  <Typography>{t`mainStat.levelAssTooltip.desc`}</Typography>\n                </Box>} />\n              </Box>\n            </CardContent>\n            {/* main stat selector */}\n            <MainStatSelectionCard disabled={generatingBuilds} filteredArtIds={filteredArtIds} />\n          </CardLight>\n          <BonusStatsCard />\n        </Grid>\n\n        {/* 3 */}\n        <Grid item xs={12} sm={6} lg={5} display=\"flex\" flexDirection=\"column\" gap={1}>\n          <ArtifactSetConfig disabled={generatingBuilds} />\n\n          {/* use excluded */}\n          <UseExcluded disabled={generatingBuilds} artsDirty={artsDirty} />\n\n          {/* use equipped */}\n          <UseEquipped disabled={generatingBuilds} filteredArts={filteredArts} />\n\n          <Button\n            fullWidth\n            startIcon={allowPartial ? <CheckBox /> : <CheckBoxOutlineBlank />}\n            color={allowPartial ? \"success\" : \"secondary\"}\n            onClick={() => buildSettingDispatch({ allowPartial: !allowPartial })}\n            disabled={generatingBuilds}\n          >\n            {t`allowPartial`}\n          </Button>\n          { /* Level Filter */}\n          <CardLight>\n            <CardContent>{t`levelFilter`} <SqBadge color=\"info\">{levelTotal}</SqBadge></CardContent>\n            <ArtifactLevelSlider levelLow={levelLow} levelHigh={levelHigh}\n              setLow={levelLow => buildSettingDispatch({ levelLow })}\n              setHigh={levelHigh => buildSettingDispatch({ levelHigh })}\n              setBoth={(levelLow, levelHigh) => buildSettingDispatch({ levelLow, levelHigh })}\n              disabled={generatingBuilds}\n            />\n          </CardLight>\n\n          {/*Minimum Final Stat Filter */}\n          <StatFilterCard disabled={generatingBuilds} />\n\n        </Grid>\n      </Grid>\n      {/* Footer */}\n      {isSM && targetSelector}\n      <ButtonGroup>\n        {!isSM && targetSelector}\n        <DropdownButton disabled={generatingBuilds || !characterKey}\n          title={<Trans t={t} i18nKey=\"build\" count={maxBuildsToShow}>\n            {{ count: maxBuildsToShow }} Builds\n          </Trans>}>\n          <MenuItem>\n            <Typography variant=\"caption\" color=\"info.main\">\n              {t(\"buildDropdownDesc\")}\n            </Typography>\n          </MenuItem>\n          <Divider />\n          {maxBuildsToShowList.map(v => <MenuItem key={v}\n            onClick={() => buildSettingDispatch({ maxBuildsToShow: v })}>\n            <Trans t={t} i18nKey=\"build\" count={v}>\n              {{ count: v }} Builds\n            </Trans>\n          </MenuItem>)}\n        </DropdownButton>\n        <DropdownButton disabled={generatingBuilds || !characterKey}\n          sx={{ borderRadius: \"4px 0px 0px 4px\" }}\n          title={<Trans t={t} i18nKey=\"thread\" count={maxWorkers}>\n            {{ count: maxWorkers }} Threads\n          </Trans>}>\n          <MenuItem>\n            <Typography variant=\"caption\" color=\"info.main\">\n              {t(\"threadDropdownDesc\")}\n            </Typography>\n          </MenuItem>\n          <Divider />\n          {range(1, defThreads).reverse().map(v => <MenuItem key={v}\n            onClick={() => setMaxWorkers(v)}>\n            <Trans t={t} i18nKey=\"thread\" count={v}>\n              {{ count: v }} Threads\n            </Trans>\n          </MenuItem>)}\n        </DropdownButton>\n        <BootstrapTooltip placement=\"top\" title={t`notifyTooltip`}>\n          <Button sx={{ borderRadius: 0 }} color='warning' onClick={() => setnotification(n => !n)} >\n            {notification ? <NotificationsActiveIcon /> : <NotificationsOffIcon />}\n          </Button>\n        </BootstrapTooltip>\n        <BootstrapTooltip placement=\"top\" title={!optimizationTarget ? t(\"selectTargetFirst\") : \"\"}>\n          <span>\n            <Button\n              disabled={!characterKey || !optimizationTarget || !optimizationTargetNode || optimizationTargetNode.isEmpty}\n              color={generatingBuilds ? \"error\" : \"success\"}\n              onClick={generatingBuilds ? () => cancelToken.current() : generateBuilds}\n              startIcon={generatingBuilds ? <Close /> : <TrendingUp />}\n              sx={{ borderRadius: \"0px 4px 4px 0px\" }}\n            >{generatingBuilds ? t(\"generateButton.cancel\") : t(\"generateButton.generateBuilds\")}</Button>\n          </span>\n        </BootstrapTooltip>\n      </ButtonGroup>\n      {workerErr && <WorkerErr />}\n      {!!characterKey && <BuildAlert {...{ status: buildStatus, characterName, maxBuildsToShow }} />}\n      <Box >\n        <ChartCard disabled={generatingBuilds || !optimizationTarget} plotBase={plotBase} setPlotBase={setPlotBase} showTooltip={!optimizationTarget} />\n      </Box>\n      <CardLight>\n        <CardContent>\n          <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1} >\n            <Typography sx={{ flexGrow: 1 }}>\n              {builds ? <span>Showing <strong>{builds.length + (graphBuilds ? graphBuilds.length : 0)}</strong> build generated for {characterName}. {!!buildDate && <span>Build generated on: <strong>{(new Date(buildDate)).toLocaleString()}</strong></span>}</span>\n                : <span>Select a character to generate builds.</span>}\n            </Typography>\n            <Button disabled={!builds.length} color=\"error\" onClick={() => { setGraphBuilds(undefined); buildResultDispatch({ builds: [], buildDate: 0 }) }} >Clear Builds</Button>\n          </Box>\n          <Grid container display=\"flex\" spacing={1}>\n            <Grid item><HitModeToggle size=\"small\" /></Grid>\n            <Grid item><ReactionToggle size=\"small\" /></Grid>\n            <Grid item flexGrow={1} />\n            <Grid item><SolidToggleButtonGroup exclusive value={compareData} onChange={(_e, v) => characterDispatch({ compareData: v })} size=\"small\">\n              <ToggleButton value={false} disabled={!compareData}>Show new builds</ToggleButton>\n              <ToggleButton value={true} disabled={compareData}>Compare vs. equipped</ToggleButton>\n            </SolidToggleButtonGroup></Grid>\n          </Grid>\n        </CardContent>\n      </CardLight>\n      <OptimizationTargetContext.Provider value={optimizationTarget}>\n        {graphBuilds && <BuildList builds={graphBuilds} characterKey={characterKey} data={data} compareData={compareData} disabled={!!generatingBuilds} getLabel={getLabel0} setBuilds={setGraphBuilds} />}\n        <BuildList builds={builds} characterKey={characterKey} data={data} compareData={compareData} disabled={!!generatingBuilds} getLabel={getLabel1} />\n      </OptimizationTargetContext.Provider>\n    </DataContext.Provider>}\n  </Box>\n}\nfunction BuildList({ builds, setBuilds, characterKey, data, compareData, disabled, getLabel }: {\n  builds: string[][]\n  setBuilds?: (builds: string[][] | undefined) => void\n  characterKey?: \"\" | CharacterKey\n  data?: UIData\n  compareData: boolean\n  disabled: boolean\n  getLabel: (index: number) => Displayable\n}) {\n  const deleteBuild = useCallback((index: number) => {\n    if (setBuilds) {\n      const builds_ = [...builds]\n      builds_.splice(index, 1)\n      setBuilds(builds_)\n    }\n  },\n    [builds, setBuilds])\n  // Memoize the build list because calculating/rendering the build list is actually very expensive, which will cause longer optimization times.\n  const list = useMemo(() => <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\n    {builds?.map((build, index) => characterKey && data && <DataContextWrapper\n      key={index + build.join()}\n      characterKey={characterKey}\n      build={build}\n      oldData={data}\n    >\n      <BuildItemWrapper index={index} label={getLabel(index)} build={build} compareData={compareData} disabled={disabled} deleteBuild={setBuilds ? deleteBuild : undefined} />\n    </DataContextWrapper>\n    )}\n  </Suspense>, [builds, characterKey, data, compareData, disabled, getLabel, deleteBuild, setBuilds])\n  return list\n}\nfunction BuildItemWrapper({ index, label, build, compareData, disabled, deleteBuild }: {\n  index: number\n  label: Displayable\n  build: string[]\n  compareData: boolean\n  disabled: boolean\n  deleteBuild?: (index: number) => void\n}) {\n  const { t } = useTranslation(\"page_character_optimize\")\n  const location = useLocation()\n  const navigate = useNavigate()\n  const toTC = useCallback(() => {\n    const paths = location.pathname.split(\"/\")\n    paths.pop()\n    navigate(`${paths.join(\"/\")}/theorycraft`, { state: { build } })\n  }, [navigate, build, location.pathname])\n\n  return <BuildDisplayItem label={label} compareBuild={compareData} disabled={disabled}\n    extraButtonsLeft={<>\n      <Button color=\"info\" size=\"small\" startIcon={<Science />} onClick={toTC}>{t(\"theorycraftButton\")}</Button>\n      {deleteBuild && <Button color=\"error\" size=\"small\" startIcon={<DeleteForever />} onClick={() => deleteBuild(index)}>{t(\"removeBuildButton\")}</Button>}\n    </>}\n  />\n}\n\ntype Prop = {\n  children: React.ReactNode\n  characterKey: CharacterKey,\n  build: string[],\n  oldData: UIData,\n}\nfunction DataContextWrapper({ children, characterKey, build, oldData }: Prop) {\n  const { database } = useContext(DatabaseContext)\n  const { buildSetting: { mainStatAssumptionLevel } } = useBuildSetting(characterKey)\n  // Update the build when the build artifacts are changed.\n  const [dirty, setDirty] = useForceUpdate()\n  useEffect(() => database.arts.followAny((id) => build.includes(id) && setDirty()), [database, build, setDirty])\n  const buildsArts = useMemo(() => dirty && build.map(i => database.arts.get(i)!), [dirty, build, database])\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel, buildsArts)\n  const providerValue = useMemo(() => teamData && ({ data: teamData[characterKey]!.target, teamData, oldData }), [teamData, oldData, characterKey])\n  if (!providerValue) return null\n  return <DataContext.Provider value={providerValue}>\n    {children}\n  </DataContext.Provider>\n}\n","import { CharacterKey, Gender } from \"@genshin-optimizer/consts\"\r\nimport Albedo from \"./Character_Albedo_Card.png\"\r\nimport Alhaitham from \"./Character_Alhaitham_Card.jpg\"\r\nimport Aloy from \"./Character_Aloy_Card.png\"\r\nimport Amber from \"./Character_Amber_Card.jpg\"\r\nimport AratakiItto from \"./Character_Arataki_Itto_Card.jpg\"\r\nimport Barbara from \"./Character_Barbara_Card.jpg\"\r\nimport Beidou from \"./Character_Beidou_Card.jpg\"\r\nimport Bennett from \"./Character_Bennett_Card.jpg\"\r\nimport Candace from \"./Character_Candace_Card.jpg\"\r\nimport Chongyun from \"./Character_Chongyun_Card.jpg\"\r\nimport Collei from \"./Character_Collei_Card.jpg\"\r\nimport Cyno from \"./Character_Cyno_Card.jpg\"\r\nimport Diluc from \"./Character_Diluc_Card.jpg\"\r\nimport Diona from \"./Character_Diona_Card.png\"\r\nimport Dori from \"./Character_Dori_Card.jpg\"\r\nimport Eula from \"./Character_Eula_Card.png\"\r\nimport Faruzan from \"./Character_Faruzan_Card.jpg\"\r\nimport Fischl from \"./Character_Fischl_Card.jpg\"\r\nimport Ganyu from \"./Character_Ganyu_Card.png\"\r\nimport Gorou from \"./Character_Gorou_Card.jpg\"\r\nimport HuTao from \"./Character_Hu_Tao_Card.jpg\"\r\nimport Jean from \"./Character_Jean_Card.jpg\"\r\nimport Kaeya from \"./Character_Kaeya_Card.jpg\"\r\nimport KamisatoAyaka from \"./Character_Kamisato_Ayaka_Card.png\"\r\nimport KamisatoAyato from \"./Character_Kamisato_Ayato_Card.png\"\r\nimport KaedeharaKazuha from \"./Character_Kazuha_Card.png\"\r\nimport Keqing from \"./Character_Keqing_Card.jpg\"\r\nimport Klee from \"./Character_Klee_Card.jpg\"\r\nimport KujouSara from \"./Character_Kujou_Sara_Card.jpg\"\r\nimport KukiShinobu from \"./Character_Kuki_Shinobu_Card.jpg\"\r\nimport Layla from \"./Character_Layla_Card.jpeg\"\r\nimport Lisa from \"./Character_Lisa_Card.jpg\"\r\nimport Mona from \"./Character_Mona_Card.jpg\"\r\nimport Nahida from \"./Character_Nahida_Card.jpeg\"\r\nimport Nilou from \"./Character_Nilou_Card.jpg\"\r\nimport Ningguang from \"./Character_Ningguang_Card.jpg\"\r\nimport Noelle from \"./Character_Noelle_Card.jpg\"\r\nimport Qiqi from \"./Character_Qiqi_Card.jpg\"\r\nimport RaidenShogun from \"./Character_Raiden_Shogun_Card.png\"\r\nimport Razor from \"./Character_Razor_Card.jpg\"\r\nimport Rosaria from \"./Character_Rosaria_Card.png\"\r\nimport SangonomiyaKokomi from \"./Character_Sangonomiya_Kokomi_Card.jpg\"\r\nimport Sayu from \"./Character_Sayu_Card.png\"\r\nimport Shenhe from \"./Character_Shenhe_Card.jpg\"\r\nimport ShikanoinHeizou from \"./Character_Shikanoin_Heizou_Card.png\"\r\nimport Sucrose from \"./Character_Sucrose_Card.jpg\"\r\nimport Tartaglia from \"./Character_Tartaglia_Card.png\"\r\nimport Thoma from \"./Character_Thoma_Card.jpg\"\r\nimport Tighnari from \"./Character_Tighnari_Card.jpg\"\r\nimport Venti from \"./Character_Venti_Card.jpg\"\r\nimport Wanderer from \"./Character_Wanderer_Card.jpg\"\r\nimport Xiangling from \"./Character_Xiangling_Card.jpg\"\r\nimport Xiao from \"./Character_Xiao_Card.jpg\"\r\nimport Xingqiu from \"./Character_Xingqiu_Card.jpg\"\r\nimport Xinyan from \"./Character_Xinyan_Card.jpg\"\r\nimport YaeMiko from \"./Character_Yae_Miko_Card.png\"\r\nimport Yanfei from \"./Character_Yanfei_Card.png\"\r\nimport Yaoyao from \"./Character_Yaoyao_Card.jpg\"\r\nimport Yelan from \"./Character_Yelan_Card.jpg\"\r\nimport Yoimiya from \"./Character_Yoimiya_Card.png\"\r\nimport YunJin from \"./Character_Yun_Jin_Card.jpg\"\r\nimport Zhongli from \"./Character_Zhongli_Card.png\"\r\nimport TravelerF from \"./Traveler_Female_Card.jpg\"\r\nimport TravelerM from \"./Traveler_Male_Card.jpg\"\r\n\r\nconst charCards = {\r\n  Albedo,\r\n  Alhaitham,\r\n  Aloy,\r\n  Amber,\r\n  AratakiItto,\r\n  Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  Candace,\r\n  Chongyun,\r\n  Collei,\r\n  Cyno,\r\n  Diluc,\r\n  Diona,\r\n  Dori,\r\n  Eula,\r\n  Faruzan,\r\n  Fischl,\r\n  Ganyu,\r\n  Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  Kaeya,\r\n  KamisatoAyaka,\r\n  KamisatoAyato,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  KukiShinobu,\r\n  Layla,\r\n  Lisa,\r\n  Mona,\r\n  Nahida,\r\n  Nilou,\r\n  Ningguang,\r\n  Noelle,\r\n  Qiqi,\r\n  RaidenShogun,\r\n  Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  Sayu,\r\n  Shenhe,\r\n  ShikanoinHeizou,\r\n  Sucrose,\r\n  Tartaglia,\r\n  Thoma,\r\n  Tighnari,\r\n  TravelerF,\r\n  TravelerM,\r\n  Venti,\r\n  Wanderer,\r\n  Xiangling,\r\n  Xiao,\r\n  Xingqiu,\r\n  Xinyan,\r\n  YaeMiko,\r\n  Yanfei,\r\n  Yaoyao,\r\n  Yelan,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\n\r\nexport function charCard(charKey: CharacterKey, gender: Gender): string {\r\n  switch (charKey) {\r\n    case \"TravelerAnemo\":\r\n    case \"TravelerDendro\":\r\n    case \"TravelerElectro\":\r\n    case \"TravelerGeo\":\r\n      return charCards[`Traveler${gender}`] ?? \"\"\r\n    default:\r\n      return charCards[charKey] ?? \"\"\r\n  }\r\n}\r\n","import { Close, Difference } from \"@mui/icons-material\"\r\nimport { Button, Skeleton, Tooltip, Typography } from \"@mui/material\"\r\nimport { Suspense, useContext, useMemo } from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { CharacterContext } from \"../../../../Context/CharacterContext\"\r\nimport { HitModeToggle, ReactionToggle } from \"../../../../Components/HitModeEditor\"\r\nimport ModalWrapper from \"../../../../Components/ModalWrapper\"\r\nimport { DatabaseContext } from \"../../../../Database/Database\"\r\nimport { DataContext } from \"../../../../Context/DataContext\"\r\nimport useBoolState from \"../../../../ReactHooks/useBoolState\"\r\nimport useTeamData from \"../../../../ReactHooks/useTeamData\"\r\nimport { objectMap } from \"../../../../Util/Util\"\r\nimport useBuildSetting from \"../TabOptimize/useBuildSetting\"\r\nimport BuildDisplayItem from \"../TabOptimize/Components/BuildDisplayItem\"\r\n\r\nexport default function CompareBuildButton({ artId, weaponId }: { artId?: string, weaponId?: string }) {\r\n  const { t } = useTranslation(\"page_character\")\r\n  const [show, onShow, onHide] = useBoolState(false)\r\n\r\n  return <>\r\n    <ModalWrapper open={show} onClose={onHide} containerProps={{ maxWidth: \"xl\" }}>\r\n      <CompareContent artId={artId} weaponId={weaponId} onHide={onHide} />\r\n    </ModalWrapper>\r\n    <Tooltip title={<Typography>{t`tabEquip.compare`}</Typography>} placement=\"top\" arrow>\r\n      <Button color=\"info\" size=\"small\" onClick={onShow} ><Difference /></Button>\r\n    </Tooltip>\r\n  </>\r\n}\r\nfunction CompareContent({ artId, weaponId, onHide }: { artId?: string, weaponId?: string, onHide: () => void }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { character: { key: characterKey, equippedArtifacts } } = useContext(CharacterContext)\r\n  const { buildSetting: { mainStatAssumptionLevel } } = useBuildSetting(characterKey)\r\n  const { data: oldData } = useContext(DataContext)\r\n  const build = useMemo(() => {\r\n    const newArt = database.arts.get(artId ?? \"\")\r\n    const artmap = objectMap(equippedArtifacts, (id, slot) => slot === newArt?.slotKey ? newArt : database.arts.get(id))\r\n    return Object.values(artmap).filter(a => a)\r\n  }, [database, equippedArtifacts, artId])\r\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel, build, weaponId ? database.weapons.get(weaponId) : undefined)\r\n  const dataProviderValue = useMemo(() => teamData && ({ data: teamData[characterKey]!.target, teamData, oldData }), [characterKey, teamData, oldData])\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\r\n    {dataProviderValue && <DataContext.Provider value={dataProviderValue}>\r\n      <BuildDisplayItem compareBuild={true} extraButtonsLeft={<><HitModeToggle size=\"small\" /><ReactionToggle size=\"small\" /></>} extraButtonsRight={<Button size='small' color=\"error\" onClick={onHide} ><Close /></Button>} />\r\n    </DataContext.Provider>}\r\n  </Suspense>\r\n}\r\n","import { Box, CardContent, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\r\nimport { lazy, Suspense, useCallback, useContext, useEffect, useMemo, useReducer } from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Assets from \"../../../../Assets/Assets\"\r\nimport CardDark from \"../../../../Components/Card/CardDark\"\r\nimport CloseButton from \"../../../../Components/CloseButton\"\r\nimport ImgIcon from \"../../../../Components/Image/ImgIcon\"\r\nimport ModalWrapper from \"../../../../Components/ModalWrapper\"\r\nimport { DatabaseContext } from \"../../../../Database/Database\"\r\nimport ArtifactCard from \"../../../../PageArtifact/ArtifactCard\"\r\nimport { artifactFilterConfigs, FilterOption, initialFilterOption } from \"../../../../PageArtifact/ArtifactSort\"\r\nimport useForceUpdate from \"../../../../ReactHooks/useForceUpdate\"\r\nimport useMediaQueryUp from \"../../../../ReactHooks/useMediaQueryUp\"\r\nimport { SlotKey } from \"../../../../Types/consts\"\r\nimport { filterFunction } from \"../../../../Util/SortByFilters\"\r\nimport CompareBuildButton from \"./CompareBuildButton\"\r\nconst numToShowMap = { xs: 6, sm: 6, md: 9, lg: 12, xl: 12 }\r\n\r\nconst ArtifactFilterDisplay = lazy(() => import('../../../../Components/Artifact/ArtifactFilterDisplay'))\r\n\r\nexport default function ArtifactSwapModal({ onChangeId, slotKey, show, onClose }:\r\n  { onChangeId: (id: string) => void, slotKey: SlotKey, show: boolean, onClose: () => void }) {\r\n  const { t } = useTranslation(\"page_character\")\r\n  const { database } = useContext(DatabaseContext)\r\n  const clickHandler = useCallback((id) => {\r\n    onChangeId(id)\r\n    onClose()\r\n  }, [onChangeId, onClose])\r\n  const filterOptionReducer = useCallback((state, action) => ({ ...state, ...action, slotKeys: [slotKey] }), [slotKey],)\r\n\r\n  const [filterOption, filterOptionDispatch]: [FilterOption, (action: any) => void] = useReducer(filterOptionReducer, { ...initialFilterOption(), slotKeys: [slotKey] })\r\n\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  useEffect(() => { return database.arts.followAny(forceUpdate) }, [database, forceUpdate])\r\n\r\n  const brPt = useMediaQueryUp()\r\n\r\n  const filterConfigs = useMemo(() => artifactFilterConfigs(), [])\r\n  const artIdList = useMemo(() => {\r\n    const filterFunc = filterFunction(filterOption, filterConfigs)\r\n    return dbDirty && database.arts.values.filter(filterFunc).map(art => art.id).slice(0, numToShowMap[brPt])\r\n  }, [dbDirty, database, filterConfigs, filterOption, brPt])\r\n\r\n  return <ModalWrapper open={show} onClose={onClose} containerProps={{ maxWidth: \"xl\" }} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1, display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n        <Typography variant=\"h6\">{slotKey ? <ImgIcon src={Assets.slot[slotKey]} /> : null} {t`tabEquip.swapArt`}</Typography>\r\n        <CloseButton onClick={onClose} />\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={200} />}>\r\n          <ArtifactFilterDisplay filterOption={filterOption} filterOptionDispatch={filterOptionDispatch} filteredIds={artIdList} disableSlotFilter />\r\n        </Suspense>\r\n        <Box mt={1}>\r\n          <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={300} />}>\r\n            <Grid container spacing={1} columns={{ xs: 2, md: 3, lg: 4 }}>\r\n              {artIdList.map(id =>\r\n                <Grid item key={id} xs={1} >\r\n                  <ArtifactCard\r\n                    artifactId={id}\r\n                    extraButtons={<CompareBuildButton artId={id} />}\r\n                    onClick={clickHandler}\r\n                  />\r\n                </Grid>)}\r\n            </Grid>\r\n          </Suspense>\r\n        </Box>\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n","import { allRarities, Rarity, WeaponKey, WeaponTypeKey } from \"@genshin-optimizer/consts\"\r\nimport { Add } from \"@mui/icons-material\"\r\nimport StarRoundedIcon from '@mui/icons-material/StarRounded'\r\nimport { Box, Button, CardContent, Divider, Grid, TextField, ToggleButton, Typography } from \"@mui/material\"\r\nimport { ChangeEvent, Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useState } from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Assets from \"../../../../Assets/Assets\"\r\nimport CardDark from \"../../../../Components/Card/CardDark\"\r\nimport CloseButton from \"../../../../Components/CloseButton\"\r\nimport ImgIcon from \"../../../../Components/Image/ImgIcon\"\r\nimport ModalWrapper from \"../../../../Components/ModalWrapper\"\r\nimport SolidToggleButtonGroup from \"../../../../Components/SolidToggleButtonGroup\"\r\nimport WeaponSelectionModal from \"../../../../Components/Weapon/WeaponSelectionModal\"\r\nimport { DatabaseContext } from \"../../../../Database/Database\"\r\nimport WeaponCard from \"../../../../PageWeapon/WeaponCard\"\r\nimport WeaponEditor from \"../../../../PageWeapon/WeaponEditor\"\r\nimport useForceUpdate from '../../../../ReactHooks/useForceUpdate'\r\nimport { handleMultiSelect } from \"../../../../Util/MultiSelect\"\r\nimport { filterFunction, sortFunction } from '../../../../Util/SortByFilters'\r\nimport { weaponFilterConfigs, weaponSortConfigs, weaponSortMap } from '../../../../Util/WeaponSort'\r\nimport { initialWeapon } from \"../../../../Util/WeaponUtil\"\r\nimport CompareBuildButton from \"./CompareBuildButton\"\r\n\r\nconst rarityHandler = handleMultiSelect([...allRarities])\r\n\r\nexport default function WeaponSwapModal({ onChangeId, weaponTypeKey, show, onClose }: { onChangeId: (id: string) => void, weaponTypeKey: WeaponTypeKey, show: boolean, onClose: () => void }) {\r\n  const { t } = useTranslation([\"page_character\", \"page_weapon\", \"weaponNames_gen\"])\r\n  const { database } = useContext(DatabaseContext)\r\n  const [newWeaponModalShow, setnewWeaponModalShow] = useState(false)\r\n  const clickHandler = useCallback((id: string) => {\r\n    onChangeId(id)\r\n    onClose()\r\n  }, [onChangeId, onClose])\r\n\r\n  const [editWeaponId, setEditWeaponId] = useState(\"\")\r\n  const newWeapon = useCallback((weaponKey: WeaponKey) => {\r\n    setEditWeaponId(database.weapons.new(initialWeapon(weaponKey)))\r\n  }, [database, setEditWeaponId])\r\n  const resetEditWeapon = useCallback(() => setEditWeaponId(\"\"), [])\r\n\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  useEffect(() => database.weapons.followAny(forceUpdate), [forceUpdate, database])\r\n\r\n  const [rarity, setRarity] = useState<Rarity[]>([5, 4, 3])\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const deferredSearchTerm = useDeferredValue(searchTerm)\r\n\r\n  const weaponIdList = useMemo(() => (dbDirty && database.weapons.values\r\n    .filter(filterFunction({ weaponType: weaponTypeKey, rarity, name: deferredSearchTerm }, weaponFilterConfigs()))\r\n    .sort(sortFunction(weaponSortMap[\"level\"] ?? [], false, weaponSortConfigs()))\r\n    .map(weapon => weapon.id)) ?? []\r\n    , [dbDirty, database, rarity, weaponTypeKey, deferredSearchTerm])\r\n\r\n  return <ModalWrapper open={show} onClose={onClose} >\r\n    <CardDark>\r\n      <Suspense fallback={false}>\r\n        <WeaponSelectionModal show={newWeaponModalShow} onHide={() => setnewWeaponModalShow(false)} onSelect={newWeapon} weaponTypeFilter={weaponTypeKey} />\r\n      </Suspense>\r\n      {/* Editor/character detail display */}\r\n      <Suspense fallback={false}>\r\n        <WeaponEditor\r\n          weaponId={editWeaponId}\r\n          footer\r\n          onClose={resetEditWeapon}\r\n        />\r\n      </Suspense>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} {t`page_character:tabEquip.swapWeapon`}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={onClose} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n        <Grid container spacing={1} >\r\n          <Grid item>\r\n            <SolidToggleButtonGroup sx={{ height: \"100%\" }} value={rarity} size=\"small\">\r\n              {allRarities.map(star => <ToggleButton key={star} value={star} onClick={() => setRarity(rarityHandler(rarity, star))}>\r\n                <Box display=\"flex\"><strong>{star}</strong><StarRoundedIcon /></Box>\r\n              </ToggleButton>)}\r\n            </SolidToggleButtonGroup>\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            <TextField\r\n              autoFocus\r\n              size=\"small\"\r\n              value={searchTerm}\r\n              onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setSearchTerm(e.target.value)}\r\n              label={t(\"page_weapon:weaponName\")}\r\n              sx={{ height: \"100%\" }}\r\n              InputProps={{\r\n                sx: { height: \"100%\" }\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Button fullWidth onClick={() => setnewWeaponModalShow(true)} color=\"info\" startIcon={<Add />} >{t(\"page_weapon:addWeapon\")}</Button>\r\n        <Grid container spacing={1}>\r\n          {weaponIdList.map(weaponId =>\r\n            <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\r\n              <WeaponCard\r\n                weaponId={weaponId}\r\n                onClick={clickHandler}\r\n                extraButtons={<CompareBuildButton weaponId={weaponId} />}\r\n              />\r\n            </Grid>)}\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n","import { allSlotKeys, SlotKey, WeaponTypeKey } from '@genshin-optimizer/consts';\nimport { Settings, SwapHoriz } from '@mui/icons-material';\nimport { Box, Button, CardContent, Divider, Grid, ListItem, Stack, Tooltip, Typography, useMediaQuery, useTheme } from '@mui/material';\nimport { lazy, Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport SetEffectDisplay from '../../../../Components/Artifact/SetEffectDisplay';\nimport SlotIcon from '../../../../Components/Artifact/SlotIcon';\nimport SubstatToggle from '../../../../Components/Artifact/SubstatToggle';\nimport CardDark from '../../../../Components/Card/CardDark';\nimport CardLight from '../../../../Components/Card/CardLight';\nimport DocumentDisplay from \"../../../../Components/DocumentDisplay\";\nimport { BasicFieldDisplay, FieldDisplayList } from '../../../../Components/FieldDisplay';\nimport ModalWrapper from '../../../../Components/ModalWrapper';\nimport PercentBadge from '../../../../Components/PercentBadge';\nimport { CharacterContext } from '../../../../Context/CharacterContext';\nimport { DataContext } from '../../../../Context/DataContext';\nimport { dataSetEffects } from '../../../../Data/Artifacts';\nimport Artifact from '../../../../Data/Artifacts/Artifact';\nimport { DatabaseContext } from '../../../../Database/Database';\nimport { uiInput as input } from '../../../../Formula';\nimport ArtifactCard from '../../../../PageArtifact/ArtifactCard';\nimport WeaponCard from '../../../../PageWeapon/WeaponCard';\nimport useBoolState from '../../../../ReactHooks/useBoolState';\nimport useCharMeta from '../../../../ReactHooks/useCharMeta';\nimport { iconInlineProps } from '../../../../SVGIcons';\nimport { allSubstatKeys } from '../../../../Types/artifact';\nimport { charKeyToLocCharKey } from '../../../../Types/consts';\nimport { IFieldDisplay } from '../../../../Types/fieldDisplay';\nimport ArtifactSwapModal from './ArtifactSwapModal';\nimport WeaponSwapModal from './WeaponSwapModal';\n\nconst WeaponEditor = lazy(() => import('../../../../PageWeapon/WeaponEditor'))\n\nexport default function EquipmentSection() {\n  const { character: { equippedWeapon, key: characterKey }, characterSheet } = useContext(CharacterContext)\n  const { teamData, data } = useContext(DataContext)\n  const weaponSheet = teamData[characterKey]?.weaponSheet\n  const [weaponId, setweaponId] = useState(\"\")\n  const showWeapon = useCallback(() => setweaponId(equippedWeapon), [equippedWeapon],)\n  const hideWeapon = useCallback(() => setweaponId(\"\"), [])\n\n  //triggers when character swap weapons\n  useEffect(() => {\n    if (weaponId && weaponId !== equippedWeapon)\n      setweaponId(equippedWeapon)\n  }, [weaponId, equippedWeapon])\n\n  const theme = useTheme();\n  const breakpoint = useMediaQuery(theme.breakpoints.up('lg'));\n\n  const weaponDoc = useMemo(() => weaponSheet && weaponSheet.document.length > 0 && <CardLight><CardContent><DocumentDisplay sections={weaponSheet.document} /></CardContent></CardLight>, [weaponSheet])\n  const { rvFilter } = useCharMeta(characterKey)\n  const deferredRvFilter = useDeferredValue(rvFilter)\n  const deferredRvSet = useMemo(() => new Set(deferredRvFilter), [deferredRvFilter])\n  return <Box >\n    <Suspense fallback={false}>\n      <WeaponEditor\n        weaponId={weaponId}\n        footer\n        onClose={hideWeapon}\n        extraButtons={<LargeWeaponSwapButton weaponTypeKey={characterSheet.weaponTypeKey} />}\n      />\n    </Suspense>\n    <Grid container spacing={1}>\n      {breakpoint && <Grid item xs={12} md={12} lg={3} xl={3} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }} >\n        {weaponDoc && weaponDoc}\n        <ArtifactSectionCard />\n      </Grid>}\n      <Grid item xs={12} md={12} lg={9} xl={9} container spacing={1}>\n        <Grid item xs={12} sm={6} md={4} display=\"flex\" flexDirection=\"column\" gap={1}>\n          <WeaponCard weaponId={equippedWeapon} onEdit={showWeapon} canEquip extraButtons={<WeaponSwapButton weaponTypeKey={characterSheet.weaponTypeKey} />} />\n        </Grid>\n        {allSlotKeys.map(slotKey => <Grid item xs={12} sm={6} md={4} key={slotKey} >\n          {data.get(input.art[slotKey].id).value ?\n            <ArtifactCard artifactId={data.get(input.art[slotKey].id).value} effFilter={deferredRvSet}\n              extraButtons={<ArtifactSwapButton slotKey={slotKey} />} editorProps={{}} canExclude canEquip /> :\n            <ArtSwapCard slotKey={slotKey} />}\n        </Grid>)}\n      </Grid>\n      {!breakpoint && <Grid item xs={12} md={12} xl={3} container spacing={1} >\n        {weaponDoc && <Grid item xs={12} md={6} lg={4}>{weaponDoc}</Grid>}\n        <Grid item xs={12} md={6} lg={4} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n          <ArtifactSectionCard />\n        </Grid>\n      </Grid>}\n    </Grid>\n  </Box>\n}\nfunction ArtSwapCard({ slotKey }: { slotKey: SlotKey }) {\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  const { t } = useTranslation(\"artifact\")\n  return <CardLight sx={{ height: \"100%\", width: \"100%\", minHeight: 300, display: \"flex\", flexDirection: \"column\" }}>\n    <CardContent>\n      <Typography><SlotIcon iconProps={iconInlineProps} slotKey={slotKey} /> {t(`slotName.${slotKey}`)}</Typography>\n    </CardContent>\n    <Divider />\n    <Box sx={{\n      flexGrow: 1,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }}\n    >\n      <ArtifactSwapModal slotKey={slotKey} show={show} onClose={onClose} onChangeId={id => database.arts.set(id, { location: charKeyToLocCharKey(characterKey) })} />\n      <Button onClick={onOpen} color=\"info\" sx={{ borderRadius: \"1em\", }}>\n        <SwapHoriz sx={{ height: 100, width: 100 }} />\n      </Button>\n    </Box>\n  </CardLight>\n}\nfunction WeaponSwapButton({ weaponTypeKey }: { weaponTypeKey: WeaponTypeKey }) {\n  const { t } = useTranslation(\"page_character\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return <>\n    <Tooltip title={<Typography>{t`tabEquip.swapWeapon`}</Typography>} placement=\"top\" arrow>\n      <Button color=\"info\" size=\"small\" onClick={onOpen} ><SwapHoriz /></Button>\n    </Tooltip>\n    <WeaponSwapModal weaponTypeKey={weaponTypeKey} onChangeId={id => database.weapons.set(id, { location: charKeyToLocCharKey(characterKey) })} show={show} onClose={onClose} />\n  </>\n}\nfunction LargeWeaponSwapButton({ weaponTypeKey }: { weaponTypeKey: WeaponTypeKey }) {\n  const { t } = useTranslation(\"page_character\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return <>\n    <Button color=\"info\" onClick={onOpen} startIcon={<SwapHoriz />} >{t`tabEquip.swapWeapon`}</Button>\n    <WeaponSwapModal weaponTypeKey={weaponTypeKey} onChangeId={id => database.weapons.set(id, { location: charKeyToLocCharKey(characterKey) })} show={show} onClose={onClose} />\n  </>\n}\nfunction ArtifactSwapButton({ slotKey }: { slotKey: SlotKey }) {\n  const { t } = useTranslation(\"page_character\")\n  const { character: { key: characterKey } } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return <>\n    <Tooltip title={<Typography>{t`tabEquip.swapArt`}</Typography>} placement=\"top\" arrow>\n      <Button color=\"info\" size=\"small\" onClick={onOpen} ><SwapHoriz /></Button>\n    </Tooltip>\n    <ArtifactSwapModal slotKey={slotKey} show={show} onClose={onClose} onChangeId={id => database.arts.set(id, { location: charKeyToLocCharKey(characterKey) })} />\n  </>\n}\nfunction ArtifactSectionCard() {\n  const { t } = useTranslation([\"page_character\", \"artifact\"])\n  const { database } = useContext(DatabaseContext)\n  const { character, character: { key: characterKey, equippedArtifacts } } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const hasEquipped = useMemo(() => !!Object.values(equippedArtifacts).filter(i => i).length, [equippedArtifacts])\n  const unequipArts = useCallback(() => {\n    if (!character) return\n    if (!window.confirm(\"Do you want to move all currently equipped artifacts to inventory?\")) return\n    Object.values(equippedArtifacts).forEach(aid => database.arts.set(aid, { location: \"\" }))\n  }, [character, database, equippedArtifacts])\n\n  const setEffects = useMemo(() => dataSetEffects(data), [data])\n  const { rvFilter } = useCharMeta(characterKey)\n  const setRVFilter = useCallback(rvFilter => database.charMeta.set(characterKey, { rvFilter }), [database, characterKey],)\n\n  const [show, onShow, onHide] = useBoolState()\n  const deferredrvFilter = useDeferredValue(rvFilter)\n  const { rvField, rvmField } = useMemo(() => {\n    const { currentEfficiency, currentEfficiency_, maxEfficiency, maxEfficiency_ } = Object.values(equippedArtifacts).reduce((a, artid) => {\n      const art = database.arts.get(artid)\n      if (art) {\n        const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, new Set(deferredrvFilter))\n        const { currentEfficiency: currentEfficiency_, maxEfficiency: maxEfficiency_ } = Artifact.getArtifactEfficiency(art, new Set(allSubstatKeys))\n        a.currentEfficiency = a.currentEfficiency + currentEfficiency\n        a.maxEfficiency = a.maxEfficiency + maxEfficiency\n\n        a.currentEfficiency_ = a.currentEfficiency_ + currentEfficiency_\n        a.maxEfficiency_ = a.maxEfficiency_ + maxEfficiency_\n      }\n      return a\n    }, { currentEfficiency: 0, currentEfficiency_: 0, maxEfficiency: 0, maxEfficiency_: 0 })\n    const rvField: IFieldDisplay = {\n      text: t`artifact:editor.curSubEff`,\n      value: !(currentEfficiency - currentEfficiency_) ? <PercentBadge value={currentEfficiency} max={4500} valid /> :\n        <span><PercentBadge value={currentEfficiency} max={4500} valid /> / <PercentBadge value={currentEfficiency_} max={4500} valid /></span>\n    }\n    const rvmField: IFieldDisplay = {\n      text: t`artifact:editor.maxSubEff`,\n      canShow: () => !!(currentEfficiency_ - maxEfficiency_),\n      value: !(maxEfficiency - maxEfficiency_) ? <PercentBadge value={maxEfficiency} max={4500} valid /> :\n        <span><PercentBadge value={maxEfficiency} max={4500} valid /> / <PercentBadge value={maxEfficiency_} max={4500} valid /></span>\n    }\n    return { rvField, rvmField }\n  }, [t, deferredrvFilter, equippedArtifacts, database])\n\n  return <CardLight>\n    {hasEquipped && <Button color=\"error\" onClick={unequipArts} fullWidth sx={{ borderBottomRightRadius: 0, borderBottomLeftRadius: 0 }}>{t`tabEquip.unequipArts`}</Button>}\n    <CardContent >\n      <Stack spacing={1}>\n        <CardDark >\n          <Button fullWidth color=\"info\" startIcon={<Settings />} sx={{ borderBottomLeftRadius: 0, borderBottomRightRadius: 0 }} onClick={onShow}>RV Filter</Button>\n          <ModalWrapper open={show} onClose={onHide}>\n            <CardDark>\n              <CardContent>\n                <Typography textAlign=\"center\" gutterBottom variant='h6'>{t`artifact:efficiencyFilter.title`}</Typography>\n                <SubstatToggle selectedKeys={rvFilter} onChange={setRVFilter} />\n              </CardContent>\n            </CardDark>\n          </ModalWrapper>\n          <FieldDisplayList >\n            <BasicFieldDisplay field={rvField} component={ListItem} />\n            {rvmField?.canShow?.(data) && <BasicFieldDisplay field={rvmField} component={ListItem} />}\n          </FieldDisplayList>\n        </CardDark>\n        {setEffects && Object.entries(setEffects).flatMap(([setKey, setNumKeyArr]) =>\n          setNumKeyArr.map(setNumKey => <CardDark key={setKey + setNumKey} sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n            <SetEffectDisplay key={setKey + setNumKey} setKey={setKey} setNumKey={setNumKey} />\n          </CardDark>)\n        )}\n      </Stack>\n    </CardContent>\n  </CardLight>\n}\n","import { charCard } from \"@genshin-optimizer/char-cards\";\r\nimport { Favorite, FavoriteBorder } from \"@mui/icons-material\";\r\nimport { Badge, Box, CardActionArea, Chip, Grid, IconButton, Stack, Typography } from \"@mui/material\";\r\nimport { useCallback, useContext, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Assets from \"../../../../Assets/Assets\";\r\nimport ArtifactCardNano from \"../../../../Components/Artifact/ArtifactCardNano\";\r\nimport CardLight from \"../../../../Components/Card/CardLight\";\r\nimport CharacterCardPico from \"../../../../Components/Character/CharacterCardPico\";\r\nimport StatDisplayComponent from \"../../../../Components/Character/StatDisplayComponent\";\r\nimport ImgIcon from \"../../../../Components/Image/ImgIcon\";\r\nimport SqBadge from \"../../../../Components/SqBadge\";\r\nimport { StarsDisplay } from \"../../../../Components/StarDisplay\";\r\nimport WeaponCardNano from \"../../../../Components/Weapon/WeaponCardNano\";\r\nimport { CharacterContext } from \"../../../../Context/CharacterContext\";\r\nimport { DataContext } from \"../../../../Context/DataContext\";\r\nimport { TalentSheetElementKey } from \"../../../../Data/Characters/ICharacterSheet\";\r\nimport { getLevelString } from \"../../../../Data/LevelData\";\r\nimport { DatabaseContext } from \"../../../../Database/Database\";\r\nimport { uiInput as input } from \"../../../../Formula\";\r\nimport { ElementIcon } from \"../../../../KeyMap/StatIcon\";\r\nimport useCharacterReducer from \"../../../../ReactHooks/useCharacterReducer\";\r\nimport useCharMeta from \"../../../../ReactHooks/useCharMeta\";\r\nimport useDBMeta from \"../../../../ReactHooks/useDBMeta\";\r\nimport { allSlotKeys, Ascension, ElementKey } from \"@genshin-optimizer/consts\";\r\nimport { range } from \"../../../../Util/Util\";\r\nimport EquipmentSection from \"./EquipmentSection\";\r\n\r\nexport default function TabOverview() {\r\n  const scrollRef = useRef<HTMLDivElement>()\r\n  const onScroll = useCallback(() => scrollRef?.current?.scrollIntoView?.({ behavior: \"smooth\" }), [scrollRef])\r\n\r\n  return <Stack spacing={1}>\r\n    <Grid container spacing={1} sx={{ justifyContent: \"center\" }}>\r\n      <Grid item xs={8} sm={5} md={4} lg={2.3}  >\r\n        <CharacterProfileCard />\r\n      </Grid>\r\n      <Grid item xs={12} sm={7} md={8} lg={9.7} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }} >\r\n        <EquipmentRow onClick={onScroll} />\r\n        <CardLight sx={{ flexGrow: 1, p: 1 }}>\r\n          <StatDisplayComponent />\r\n        </CardLight>\r\n      </Grid>\r\n    </Grid >\r\n    <Box ref={scrollRef}>\r\n      <EquipmentSection />\r\n    </Box>\r\n  </Stack>\r\n}\r\nfunction EquipmentRow({ onClick }: { onClick: () => void }) {\r\n  const { character: { equippedWeapon } } = useContext(CharacterContext)\r\n  const { data, } = useContext(DataContext)\r\n\r\n  return <Grid container spacing={1} columns={{ xs: 2, sm: 2, md: 3, lg: 6, xl: 6 }}>\r\n    <Grid item xs={1}>\r\n      <WeaponCardNano weaponId={equippedWeapon} BGComponent={CardLight} onClick={onClick} />\r\n    </Grid>\r\n    {allSlotKeys.map(slotKey =>\r\n      <Grid item key={slotKey} xs={1} >\r\n        <ArtifactCardNano artifactId={data.get(input.art[slotKey].id).value} slotKey={slotKey} BGComponent={CardLight} onClick={onClick} />\r\n      </Grid>)}\r\n  </Grid>\r\n}\r\n/* Image card with star and name and level */\r\nfunction CharacterProfileCard() {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { characterSheet, character: { key: characterKey, team } } = useContext(CharacterContext)\r\n  const { gender } = useDBMeta()\r\n  const { data, } = useContext(DataContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const navigate = useNavigate()\r\n  const charEle = data.get(input.charEle).value as ElementKey\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const level = data.get(input.lvl).value\r\n  const ascension = data.get(input.asc).value as Ascension\r\n  const constellation = data.get(input.constellation).value\r\n  const tlvl = {\r\n    auto: data.get(input.total.auto).value,\r\n    skill: data.get(input.total.skill).value,\r\n    burst: data.get(input.total.burst).value,\r\n  }\r\n  const tBoost = {\r\n    auto: data.get(input.bonus.auto).value,\r\n    skill: data.get(input.bonus.skill).value,\r\n    burst: data.get(input.bonus.burst).value,\r\n  }\r\n  const { favorite } = useCharMeta(characterKey)\r\n  return <CardLight sx={{ height: \"100%\" }} >\r\n    <Box sx={{ position: \"relative\" }}>\r\n      <Box sx={{ position: \"absolute\", width: \"100%\", height: \"100%\" }}>\r\n        <Typography variant=\"h6\" sx={{ position: \"absolute\", width: \"100%\", left: \"50%\", bottom: 0, transform: \"translate(-50%, -50%)\", opacity: 0.75, textAlign: \"center\" }}>\r\n          <StarsDisplay stars={characterSheet.rarity} colored />\r\n        </Typography>\r\n        <Box sx={{ position: \"absolute\", left: \"50%\", bottom: \"7%\", transform: \"translate(-50%, -50%)\", opacity: 0.85, width: \"100%\", display: \"flex\", justifyContent: \"center\", px: 1 }}>\r\n          <Chip color={charEle} sx={{ height: \"auto\" }}\r\n            label={<Typography variant=\"h6\" sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }} >\r\n              <ElementIcon ele={charEle} />\r\n              <Box sx={{ whiteSpace: \"normal\", textAlign: \"center\" }}>{characterSheet.name}</Box>\r\n              <ImgIcon src={Assets.weaponTypes?.[weaponTypeKey]} />\r\n            </Typography>} />\r\n        </Box>\r\n        <Box sx={{ position: \"absolute\", left: 0, top: 0 }}>\r\n          <IconButton sx={{ p: 1 }} color=\"error\" onClick={() => database.charMeta.set(characterKey, { favorite: !favorite })}>\r\n            {favorite ? <Favorite /> : <FavoriteBorder />}\r\n          </IconButton>\r\n        </Box>\r\n        <Typography sx={{ p: 1, position: \"absolute\", right: 0, top: 0, opacity: 0.8 }}>\r\n          <SqBadge>{getLevelString(level, ascension)}</SqBadge>\r\n        </Typography>\r\n      </Box>\r\n      <Box src={charCard(characterKey, gender)} component=\"img\" width=\"100%\" height=\"auto\" />\r\n    </Box>\r\n    <Box>\r\n      <CardActionArea sx={{ p: 1 }} onClick={() => navigate(\"talent\")}>\r\n        <Grid container spacing={1} mt={-1}>\r\n          {([\"auto\", \"skill\", \"burst\"] as TalentSheetElementKey[]).map(tKey =>\r\n            <Grid item xs={4} key={tKey}>\r\n              <Badge badgeContent={tlvl[tKey]} color={tBoost[tKey] ? \"info\" : \"secondary\"}\r\n                overlap=\"circular\"\r\n                anchorOrigin={{\r\n                  vertical: 'bottom',\r\n                  horizontal: 'right',\r\n                }}\r\n                sx={{\r\n                  width: \"100%\",\r\n                  height: \"100%\",\r\n                  \"& > .MuiBadge-badge\": {\r\n                    fontSize: \"1.25em\",\r\n                    padding: \".25em .4em\",\r\n                    borderRadius: \".5em\",\r\n                    lineHeight: 1,\r\n                    height: \"1.25em\"\r\n                  }\r\n                }}>\r\n                <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey)?.img} width=\"100%\" height=\"auto\" />\r\n              </Badge>\r\n            </Grid>)}\r\n        </Grid>\r\n      </CardActionArea>\r\n      <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\r\n      <Grid container spacing={1}>\r\n        {range(1, 6).map(i =>\r\n          <Grid item xs={4} key={i}>\r\n            <CardActionArea onClick={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })}>\r\n              <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i}` as TalentSheetElementKey)?.img}\r\n                sx={{\r\n                  ...(constellation >= i ? {} : { filter: \"brightness(50%)\" })\r\n                }}\r\n                width=\"100%\" height=\"auto\" />\r\n            </CardActionArea>\r\n          </Grid>)}\r\n      </Grid>\r\n      <CardActionArea sx={{ p: 1 }} onClick={() => navigate(\"teambuffs\")}>\r\n        <Grid container columns={3} spacing={1}>\r\n          {range(0, 2).map(i => <Grid key={i} item xs={1} height=\"100%\"><CharacterCardPico characterKey={team[i]} index={i} /></Grid>)}\r\n        </Grid>\r\n      </CardActionArea>\r\n    </Box>\r\n  </CardLight >\r\n}\r\n","import { Box, CardActionArea, CardContent, Grid, MenuItem, Typography, useMediaQuery, useTheme } from \"@mui/material\";\nimport { useCallback, useContext, useMemo } from 'react';\nimport CardDark from \"../../../Components/Card/CardDark\";\nimport CardLight from \"../../../Components/Card/CardLight\";\nimport ConditionalWrapper from \"../../../Components/ConditionalWrapper\";\nimport DocumentDisplay from \"../../../Components/DocumentDisplay\";\nimport DropdownButton from \"../../../Components/DropdownMenu/DropdownButton\";\nimport { NodeFieldDisplay } from \"../../../Components/FieldDisplay\";\nimport { CharacterContext } from \"../../../Context/CharacterContext\";\nimport { DataContext } from '../../../Context/DataContext';\nimport { TalentSheetElementKey } from \"../../../Data/Characters/ICharacterSheet\";\nimport { uiInput as input } from \"../../../Formula\";\nimport { NumNode } from \"../../../Formula/type\";\nimport { NodeDisplay } from '../../../Formula/uiData';\nimport useCharacterReducer from \"../../../ReactHooks/useCharacterReducer\";\nimport { DocumentSection } from \"../../../Types/sheet\";\nimport { range } from \"../../../Util/Util\";\n\nconst talentSpacing = {\n  xs: 12,\n  sm: 6,\n  md: 4\n}\n\nexport default function CharacterTalentPane() {\n  const { character, characterSheet } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(character.key)\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]] as [TalentSheetElementKey, string][]\n  const passivesList: [tKey: TalentSheetElementKey, tText: string, asc: number][] = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n\n  const theme = useTheme();\n  const grlg = useMediaQuery(theme.breakpoints.up('lg'));\n  const constellationCards = useMemo(() => range(1, 6).map(i =>\n    <SkillDisplayCard\n      talentKey={`constellation${i}` as TalentSheetElementKey}\n      subtitle={`Constellation Lv. ${i}`}\n      onClickTitle={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })}\n    />), [constellation, characterDispatch])\n  return <>\n    <ReactionDisplay />\n    <Grid container spacing={1}>\n      {/* constellations for 4column */}\n      {grlg && <Grid item xs={12} md={12} lg={3} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }} >\n        <CardLight><CardContent><Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography></CardContent></CardLight>\n        {constellationCards.map((c, i) => <Box key={i} sx={{ opacity: constellation >= (i + 1) ? 1 : 0.5 }} >{c}</Box>)}\n      </Grid>}\n      <Grid item xs={12} md={12} lg={9} container spacing={1} >\n        {/* auto, skill, burst */}\n        {skillBurstList.map(([tKey, tText]) =>\n          <Grid item key={tKey} {...talentSpacing} >\n            <SkillDisplayCard\n              talentKey={tKey}\n              subtitle={tText}\n            />\n          </Grid>)}\n        {!!characterSheet.getTalentOfKey(\"sprint\",) && <Grid item {...talentSpacing} >\n          <SkillDisplayCard\n            talentKey=\"sprint\"\n            subtitle=\"Alternative Sprint\"\n          />\n        </Grid>}\n        {!!characterSheet.getTalentOfKey(\"passive\") && <Grid item {...talentSpacing} >\n          <SkillDisplayCard\n            talentKey=\"passive\"\n            subtitle=\"Passive\"\n          />\n        </Grid>}\n        {/* passives */}\n        {passivesList.map(([tKey, tText, asc]) => {\n          const enabled = ascension >= asc\n          if (!characterSheet.getTalentOfKey(tKey)) return null\n          return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} {...talentSpacing} >\n            <SkillDisplayCard\n              talentKey={tKey}\n              subtitle={tText}\n            />\n          </Grid>\n        })}\n      </Grid>\n      {/* constellations for < 4 columns */}\n      {!grlg && <Grid item xs={12} md={12} lg={3} container spacing={1} >\n        <Grid item xs={12}>\n          <CardLight><CardContent><Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography></CardContent></CardLight>\n        </Grid>\n        {constellationCards.map((c, i) => <Grid item key={i} sx={{ opacity: constellation >= (i + 1) ? 1 : 0.5 }} {...talentSpacing} >{c}</Grid>)}\n      </Grid>}\n    </Grid>\n  </>\n}\nfunction ReactionDisplay() {\n  const { data } = useContext(DataContext)\n  const reaction = data.getDisplay().reaction as { [key: string]: NodeDisplay }\n  return <CardLight>\n    <CardContent>\n      <Grid container spacing={1}>\n        {Object.entries(reaction).filter(([_, node]) => !node.isEmpty).map(([key, node]) => {\n          return <Grid item key={key}>\n            <CardDark><CardContent sx={{ p: 1, \"&:last-child\": { pb: 1 } }}>\n              <NodeFieldDisplay node={node} />\n            </CardContent></CardDark>\n          </Grid>\n        })}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\n\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\ntype SkillDisplayCardProps = {\n  talentKey: TalentSheetElementKey,\n  subtitle: string,\n  onClickTitle?: (any) => any\n}\nfunction SkillDisplayCard({ talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\n  const { character: { talent }, characterSheet, characterDispatch } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n\n  const actionWrapeprFunc = useCallback(\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\n    [onClickTitle],\n  )\n\n  const setTalentLevel = useCallback((tKey: TalentSheetElementKey, newTalentLevelKey: number) =>\n    characterDispatch({ talent: { ...talent, [tKey]: newTalentLevelKey } }), [talent, characterDispatch])\n\n  let header: Displayable | null = null\n\n  if (talentKey in talent) {\n    const levelBoost = data.get(input.bonus[talentKey] as NumNode).value\n    const level = data.get(input.total[talentKey]).value\n    const asc = data.get(input.asc).value\n\n    header = <DropdownButton fullWidth title={`Talent Lv. ${level}`} color={levelBoost ? \"info\" : \"primary\"} sx={{ borderRadius: 0 }}>\n      {range(1, talentLimits[asc]).map(i =>\n        <MenuItem key={i} selected={talent[talentKey] === (i)} disabled={talent[talentKey] === (i)} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost}</MenuItem>)}\n    </DropdownButton>\n  }\n  const talentSheet = characterSheet.getTalentOfKey(talentKey)\n\n  // Hide header if the header matches the current talent\n  const hideHeader = (section: DocumentSection): boolean => {\n    const headerAction = section.header?.action\n    if (headerAction && (typeof headerAction !== \"string\")) {\n      const key: string = headerAction.props.children.props.key18\n      return key.includes(talentKey)\n    }\n    return false\n  }\n\n  return <CardLight sx={{ height: \"100%\" }}>\n    {header}\n    <CardContent>\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item>\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\n          </Grid>\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\n          </Grid>\n        </Grid>\n      </ConditionalWrapper>\n      {/* Display document sections */}\n      {talentSheet?.sections ? <DocumentDisplay sections={talentSheet.sections} hideDesc hideHeader={hideHeader} /> : null}\n    </CardContent>\n  </CardLight>\n}\n","import { CharacterKey } from \"@genshin-optimizer/consts\";\nimport { characterAsset } from \"@genshin-optimizer/g-assets\";\nimport { PersonAdd } from \"@mui/icons-material\";\nimport { AutocompleteProps, Box, CardContent, CardHeader, Divider, Grid, Skeleton, Typography } from \"@mui/material\";\nimport { Suspense, useCallback, useContext, useMemo } from 'react';\nimport { useTranslation } from \"react-i18next\";\nimport CardLight from \"../../../Components/Card/CardLight\";\nimport CharacterCard from \"../../../Components/Character/CharacterCard\";\nimport ThumbSide from \"../../../Components/Character/ThumbSide\";\nimport ColorText from \"../../../Components/ColoredText\";\nimport DocumentDisplay from \"../../../Components/DocumentDisplay\";\nimport { NodeFieldDisplay } from \"../../../Components/FieldDisplay\";\nimport { GeneralAutocomplete, GeneralAutocompleteOption } from \"../../../Components/GeneralAutocomplete\";\nimport { InfoTooltipInline } from \"../../../Components/InfoTooltip\";\nimport { CharacterContext, CharacterContextObj } from \"../../../Context/CharacterContext\";\nimport { DataContext, dataContextObj } from \"../../../Context/DataContext\";\nimport { dataSetEffects, getArtSheet } from \"../../../Data/Artifacts\";\nimport { getCharSheet } from \"../../../Data/Characters\";\nimport { resonanceSheets } from \"../../../Data/Resonance\";\nimport { DatabaseContext } from \"../../../Database/Database\";\nimport { NodeDisplay } from \"../../../Formula/uiData\";\nimport useCharSelectionCallback from \"../../../ReactHooks/useCharSelectionCallback\";\nimport useDBMeta from \"../../../ReactHooks/useDBMeta\";\nimport { charKeyToCharName } from \"../../../Types/consts\";\nimport { objPathValue, range } from \"../../../Util/Util\";\n\nexport default function TabTeambuffs() {\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\n    <Grid container spacing={1}>\n      <Grid item xs={12} md={6} lg={3} sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n        <TeamBuffDisplay />\n        <ResonanceDisplay />\n      </Grid>\n      {range(0, 2).map(i => <Grid item xs={12} md={6} lg={3} key={i}>\n        <TeammateDisplay index={i} />\n      </Grid>)}\n    </Grid>\n  </Box>\n}\nexport function TeamBuffDisplay() {\n  const { data, oldData } = useContext(DataContext)\n  const teamBuffs = data.getTeamBuff()\n  const nodes: Array<[string[], NodeDisplay<number>]> = []\n  Object.entries(teamBuffs.total ?? {}).forEach(([key, node]) =>\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"total\", key], node]))\n  Object.entries(teamBuffs.premod ?? {}).forEach(([key, node]) =>\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"premod\", key], node]))\n  Object.entries(teamBuffs.enemy ?? {}).forEach(([key, node]) =>\n    !node.isEmpty && typeof node.value === \"number\" && node.value !== 0 && nodes.push([[\"enemy\", key], node as NodeDisplay<number>]))\n  if (!nodes.length) return null\n  return <CardLight>\n    <CardContent>\n      <Typography>Team Buffs</Typography>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container>\n        {nodes.map(([path, n]) => n && <Grid item xs={12} key={JSON.stringify(n.info)} >\n          <NodeFieldDisplay node={n} oldValue={objPathValue(oldData?.getTeamBuff(), path)?.value} />\n        </Grid>)}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction ResonanceDisplay() {\n  const { t } = useTranslation(\"page_character\")\n  const { data } = useContext(DataContext)\n  const { character: { team } } = useContext(CharacterContext)\n  const teamCount = team.reduce((a, t) => a + (t ? 1 : 0), 1)\n  return <>\n    <CardLight>\n      <CardHeader title={<span>{t(\"tabTeambuff.team_reso\")} <strong><ColorText color={teamCount >= 4 ? \"success\" : \"warning\"}>({teamCount}/4)</ColorText></strong> <InfoTooltipInline title={<Typography>{t`tabTeambuff.resonance_tip`}</Typography>} /></span>}\n        titleTypographyProps={{ variant: \"subtitle2\" }} />\n    </CardLight>\n    {resonanceSheets.map((res, i) => <CardLight key={i} sx={{ opacity: res.canShow(data) ? 1 : 0.5, }}>\n      <CardHeader\n        title={<span>{res.name} <InfoTooltipInline title={<Typography>{res.desc}</Typography>} /></span>}\n        action={res.icon} titleTypographyProps={{ variant: \"subtitle2\" }} />\n      {res.canShow(data) && <Divider />}\n      {res.canShow(data) && <CardContent>\n        <DocumentDisplay sections={res.sections} teamBuffOnly hideDesc />\n      </CardContent>}\n    </CardLight>)}\n  </>\n}\nfunction TeammateDisplay({ index }: { index: number }) {\n  const { teamData } = useContext(DataContext)\n  const { t } = useTranslation(\"page_character\")\n  const { character: active, character: { key: activeCharacterKey }, characterDispatch } = useContext(CharacterContext)\n  const teamMateKey = active.team[index]\n  const team = useMemo(() => [activeCharacterKey, ...active.team].filter((t, i) => (i - 1) !== index), [active.team, activeCharacterKey, index])\n  const onClickHandler = useCharSelectionCallback()\n  const setTeammate = useCallback((charKey: CharacterKey | \"\") => characterDispatch({ type: \"team\", index, charKey }), [index, characterDispatch])\n\n  const dataBundle = teamData[teamMateKey]\n  const teammateCharacterContext: CharacterContextObj | undefined = useMemo(() => dataBundle && {\n    character: { ...dataBundle.character, conditional: active.teamConditional[teamMateKey] ?? {} },\n    characterSheet: dataBundle.characterSheet,\n    characterDispatch: (state) => {\n      if (!teamMateKey) return\n      if (!(\"conditional\" in state)) return\n      const { conditional } = state\n      if (!conditional) return\n      characterDispatch({ type: \"teamConditional\", teamMateKey: teamMateKey, conditional })\n    }\n  }, [active, teamMateKey, dataBundle, characterDispatch])\n  const teamMateDataContext: dataContextObj | undefined = useMemo(() => dataBundle && {\n    data: dataBundle.target,\n    teamData: teamData,\n  }, [dataBundle, teamData])\n  return <CardLight sx={{ overflow: \"visible\" }}>\n    <TeammateAutocomplete characterKey={teamMateKey} team={team}\n      setChar={setTeammate}\n      label={t(\"teammate\", { count: index + 1 })}\n    />\n    {teamMateKey && teammateCharacterContext && <CharacterContext.Provider value={teammateCharacterContext}>\n      {teamMateDataContext && <DataContext.Provider value={teamMateDataContext}>\n        <CharacterCard characterKey={teamMateKey}\n          onClickHeader={onClickHandler}\n          // Need to wrap these elements with the providers for them to use the correct functions.\n          artifactChildren={<CharacterContext.Provider value={teammateCharacterContext}>\n            <DataContext.Provider value={teamMateDataContext}>\n              <CharArtifactCondDisplay />\n            </DataContext.Provider>\n          </CharacterContext.Provider>}\n          weaponChildren={<CharacterContext.Provider value={teammateCharacterContext}>\n            <DataContext.Provider value={teamMateDataContext}>\n              <CharWeaponCondDisplay />\n            </DataContext.Provider>\n          </CharacterContext.Provider>}\n          characterChildren={<CharacterContext.Provider value={teammateCharacterContext}>\n            <DataContext.Provider value={teamMateDataContext}>\n              <CharTalentCondDisplay />\n            </DataContext.Provider>\n          </CharacterContext.Provider>}\n          isTeammateCard\n        />\n      </DataContext.Provider>}\n    </CharacterContext.Provider>}\n  </CardLight>\n}\nfunction CharArtifactCondDisplay() {\n  const { data, } = useContext(DataContext)\n  const sections = useMemo(() =>\n    Object.entries(dataSetEffects(data))\n      .flatMap(([setKey, setNums]) =>\n        setNums.flatMap(sn => getArtSheet(setKey).setEffectDocument(sn) ?? []))\n    , [data])\n  if (!sections) return null\n  return <DocumentDisplay sections={sections} teamBuffOnly={true} />\n}\nfunction CharWeaponCondDisplay() {\n  const { character: { key: charKey } } = useContext(CharacterContext)\n  const { teamData } = useContext(DataContext)\n  const weaponSheet = teamData[charKey]!.weaponSheet\n  if (!weaponSheet.document) return null\n  return <DocumentDisplay sections={weaponSheet.document} teamBuffOnly={true} />\n}\nfunction CharTalentCondDisplay() {\n  const { character: { key: charKey } } = useContext(CharacterContext)\n  const { teamData } = useContext(DataContext)\n  const characterSheet = teamData[charKey]!.characterSheet\n  const sections = Object.values(characterSheet.talent).flatMap(sts => sts.sections)\n  if (!sections) return null\n  return <DocumentDisplay sections={sections} teamBuffOnly={true} />\n}\n\nfunction TeammateAutocomplete({ characterKey, team, label, setChar, autoCompleteProps = {} }:\n  { characterKey: CharacterKey | \"\", team: Array<CharacterKey | \"\">, label: string, setChar: (k: CharacterKey | \"\") => void, autoCompleteProps?: Omit<AutocompleteProps<GeneralAutocompleteOption<CharacterKey | \"\">, false, false, false>, \"renderInput\" | \"onChange\" | \"options\"> }) {\n  const { t } = useTranslation([\"charNames_gen\", \"page_character\", \"sheet_gen\"])\n  const { database } = useContext(DatabaseContext)\n  const { gender } = useDBMeta()\n  const toText = useCallback((key: CharacterKey): string => key.startsWith(\"Traveler\") ? `${t(`charNames_gen:${charKeyToCharName(key, gender)}`)} (${t(`sheet_gen:element.${getCharSheet(key, gender)?.elementKey}`)})` : t(`charNames_gen:${key}`), [t, gender])\n  const toImg = useCallback((key: CharacterKey | \"\") => key ? <ThumbSide src={characterAsset(key, \"iconSide\", gender)} sx={{ pr: 1 }} /> : <PersonAdd />, [gender])//\n  const isFavorite = useCallback((key: CharacterKey) => database.charMeta.get(key).favorite, [database])\n  const onDisable = useCallback(({ key }: { key: CharacterKey | \"\" }) => team.filter(t => t && t !== characterKey).includes(key) || (key.startsWith(\"Traveler\") && team.some((t, i) => t.startsWith(\"Traveler\"))), [team, characterKey])\n  const values: GeneralAutocompleteOption<CharacterKey>[] = useMemo(() => database.chars.keys\n    .map(v => ({ key: v, label: toText(v), favorite: isFavorite(v) }))\n    .sort((a, b) => {\n      if (a.favorite && !b.favorite) return -1\n      if (!a.favorite && b.favorite) return 1\n      return a.label.localeCompare(b.label)\n    }), [toText, isFavorite, database])\n  return <Suspense fallback={<Skeleton variant=\"text\" width={100} />}><GeneralAutocomplete size=\"small\" label={label} options={values} valueKey={characterKey} onChange={k => setChar(k ?? \"\")} getOptionDisabled={onDisable} toImg={toImg} {...autoCompleteProps} /></Suspense>\n}\n","import { allArtifactSets, allSlotKeys, ArtifactSetKey, SlotKey, WeaponTypeKey } from \"@genshin-optimizer/consts\";\r\nimport { weaponAsset } from \"@genshin-optimizer/g-assets\";\r\nimport { CopyAll, DeleteForever, Info, Refresh } from \"@mui/icons-material\";\r\nimport StarRoundedIcon from '@mui/icons-material/StarRounded';\r\nimport { Box, Button, ButtonGroup, CardHeader, Divider, Grid, ListItem, MenuItem, Skeleton, Slider, Stack, ToggleButton, Typography } from \"@mui/material\";\r\nimport React, { Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport ArtifactSetAutocomplete from \"../../../../Components/Artifact/ArtifactSetAutocomplete\";\r\nimport ArtifactSetTooltip from \"../../../../Components/Artifact/ArtifactSetTooltip\";\r\nimport SetEffectDisplay from \"../../../../Components/Artifact/SetEffectDisplay\";\r\nimport SlotIcon from \"../../../../Components/Artifact/SlotIcon\";\r\nimport BootstrapTooltip from \"../../../../Components/BootstrapTooltip\";\r\nimport CardDark from \"../../../../Components/Card/CardDark\";\r\nimport CardLight from \"../../../../Components/Card/CardLight\";\r\nimport StatDisplayComponent from \"../../../../Components/Character/StatDisplayComponent\";\r\nimport ColorText from \"../../../../Components/ColoredText\";\r\nimport CustomNumberInput from \"../../../../Components/CustomNumberInput\";\r\nimport DocumentDisplay from \"../../../../Components/DocumentDisplay\";\r\nimport DropdownButton from \"../../../../Components/DropdownMenu/DropdownButton\";\r\nimport { FieldDisplayList, NodeFieldDisplay } from \"../../../../Components/FieldDisplay\";\r\nimport ImgIcon from \"../../../../Components/Image/ImgIcon\";\r\nimport LevelSelect from \"../../../../Components/LevelSelect\";\r\nimport RefinementDropdown from \"../../../../Components/RefinementDropdown\";\r\nimport SolidToggleButtonGroup from \"../../../../Components/SolidToggleButtonGroup\";\r\nimport { StatColoredWithUnit, StatWithUnit } from \"../../../../Components/StatDisplay\";\r\nimport { CharacterContext } from \"../../../../Context/CharacterContext\";\r\nimport { DataContext, dataContextObj } from \"../../../../Context/DataContext\";\r\nimport { getArtSheet } from \"../../../../Data/Artifacts\";\r\nimport Artifact, { maxArtifactLevel } from \"../../../../Data/Artifacts/Artifact\";\r\nimport { artifactDefIcon } from \"../../../../Data/Artifacts/ArtifactSheet\";\r\nimport { getWeaponSheet } from \"../../../../Data/Weapons\";\r\nimport { DatabaseContext } from \"../../../../Database/Database\";\r\nimport { initCharTC } from \"../../../../Database/DataManagers/CharacterTCData\";\r\nimport { uiInput as input } from \"../../../../Formula\";\r\nimport { computeUIData, dataObjForWeapon, mergeData } from \"../../../../Formula/api\";\r\nimport { constant, percent } from \"../../../../Formula/utils\";\r\nimport KeyMap, { cacheValueString } from \"../../../../KeyMap\";\r\nimport StatIcon from \"../../../../KeyMap/StatIcon\";\r\nimport useBoolState from \"../../../../ReactHooks/useBoolState\";\r\nimport useTeamData from \"../../../../ReactHooks/useTeamData\";\r\nimport { iconInlineProps } from \"../../../../SVGIcons\";\r\nimport { allSubstatKeys, ICachedArtifact, MainStatKey, SubstatKey } from \"../../../../Types/artifact\";\r\nimport { ICharTC, ICharTCArtifactSlot } from \"../../../../Types/character\";\r\nimport { ArtifactRarity, SetNum, SubstatType, substatType } from \"../../../../Types/consts\";\r\nimport { ICachedWeapon } from \"../../../../Types/weapon\";\r\nimport { deepClone, objectKeyMap, objectMap, objPathValue } from \"../../../../Util/Util\";\r\nimport { defaultInitialWeaponKey } from \"../../../../Util/WeaponUtil\";\r\nimport useCharTC from \"./useCharTC\";\r\nimport { mapFormulas } from \"../../../../Formula/internal\";\r\nimport { optimize, precompute } from \"../../../../Formula/optimization\";\r\nimport { NumNode } from \"../../../../Formula/type\";\r\nimport OptimizationTargetSelector from \"../TabOptimize/Components/OptimizationTargetSelector\";\r\nimport { dynamicData } from \"../TabOptimize/foreground\";\r\nconst WeaponSelectionModal = React.lazy(() => import('../../../../Components/Weapon/WeaponSelectionModal'))\r\n\r\ntype ISet = Partial<Record<ArtifactSetKey, 1 | 2 | 4>>\r\nexport default function TabTheorycraft() {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { data: oldData } = useContext(DataContext)\r\n  const { character, character: { key: characterKey, compareData }, characterSheet, characterDispatch } = useContext(CharacterContext)\r\n  const data = useCharTC(characterKey, defaultInitialWeaponKey(characterSheet.weaponTypeKey))\r\n  const setData = useCallback((data: ICharTC) => database.charTCs.set(characterKey, data), [characterKey, database])\r\n  const resetData = useCallback(() => {\r\n    setData(initCharTC(defaultInitialWeaponKey(characterSheet.weaponTypeKey)))\r\n  }, [setData, characterSheet])\r\n  const setWeapon = useCallback(\r\n    (action: Partial<ICharTC[\"weapon\"]>) => {\r\n      setData({ ...data, weapon: { ...data.weapon, ...action } })\r\n    },\r\n    [setData, data],\r\n  )\r\n\r\n  const copyFrom = useCallback(\r\n    (eWeapon: ICachedWeapon, build: ICachedArtifact[]) => {\r\n      const newData = initCharTC(eWeapon.key)\r\n      newData.artifact.substats.type = data.artifact.substats.type\r\n\r\n      newData.weapon.level = eWeapon.level\r\n      newData.weapon.ascension = eWeapon.ascension\r\n      newData.weapon.refinement = eWeapon.refinement\r\n\r\n      const sets = {}\r\n      build.forEach(art => {\r\n        if (!art) return\r\n        const { slotKey, setKey, substats, mainStatKey, level, rarity } = art\r\n        newData.artifact.slots[slotKey].level = level\r\n        newData.artifact.slots[slotKey].statKey = mainStatKey\r\n        newData.artifact.slots[slotKey].rarity = rarity\r\n        sets[setKey] = (sets[setKey] ?? 0) + 1\r\n        substats.forEach(substat => {\r\n          if (substat.key) newData.artifact.substats.stats[substat.key] = (newData.artifact.substats.stats[substat.key] ?? 0) + substat.accurateValue\r\n        })\r\n      })\r\n      newData.artifact.sets = Object.fromEntries(Object.entries(sets).map(([key, value]) => [key,\r\n        value === 3 ? 2 :\r\n          value === 5 ? 4 :\r\n            value === 1 && !(key as string).startsWith(\"PrayersFor\") ? 0 : value\r\n      ]).filter(([, value]) => value))\r\n      setData(newData)\r\n    },\r\n    [data, setData],\r\n  )\r\n  const location = useLocation()\r\n  const { build: locBuild } = (location.state as { build: string[] } | undefined) ?? { build: undefined }\r\n  useEffect(() => {\r\n    if (!locBuild) return\r\n    const eWeapon = database.weapons.get(character.equippedWeapon)!\r\n    copyFrom(eWeapon, locBuild.map(i => database.arts.get(i)!))\r\n    // WARNING: if copyFrom is included, it will cause a render loop due to its setData <---> data\r\n    // eslint-disable-next-line\r\n  }, [locBuild, database])\r\n\r\n  const copyFromEquipped = useCallback(\r\n    () => {\r\n      const eWeapon = database.weapons.get(character.equippedWeapon)!\r\n      copyFrom(eWeapon, Object.values(character.equippedArtifacts).map(a => database.arts.get(a)!).filter(a => a))\r\n    },\r\n    [database, character.equippedArtifacts, character.equippedWeapon, copyFrom],\r\n  )\r\n\r\n  const weapon: ICachedWeapon = useMemo(() => {\r\n    return {\r\n      ...data.weapon,\r\n      location: \"\",\r\n      lock: false,\r\n      id: \"\"\r\n    }\r\n  }, [data])\r\n  const setArtifact = useCallback((artifact: ICharTC[\"artifact\"]) => {\r\n    const data_ = deepClone(data)\r\n    data_.artifact = artifact\r\n    setData(data_)\r\n  }, [data, setData])\r\n\r\n  const setSubstatsType = useCallback((t: SubstatType) => {\r\n    const data_ = deepClone(data)\r\n    data_.artifact.substats.type = t\r\n    setData(data_)\r\n  }, [data, setData])\r\n\r\n  const setSubstats = useCallback((setSubstats: Record<SubstatKey, number>) => {\r\n    const data_ = deepClone(data)\r\n    data_.artifact.substats.stats = setSubstats\r\n    setData(data_)\r\n  }, [data, setData])\r\n\r\n  const deferredData = useDeferredValue(data)\r\n  const overriderArtData = useMemo(() => {\r\n    const stats = { ...deferredData.artifact.substats.stats }\r\n    Object.values(deferredData.artifact.slots).forEach(({ statKey, rarity, level }) =>\r\n      stats[statKey] = (stats[statKey] ?? 0) + Artifact.mainStatValue(statKey, rarity, level))\r\n    return {\r\n      art: objectMap(stats, (v, k) => k.endsWith(\"_\") ? percent(v / 100) : constant(v)),\r\n      artSet: objectMap(deferredData.artifact.sets, v => constant(v)),\r\n    }\r\n  }, [deferredData])\r\n\r\n  const overrideWeapon: ICachedWeapon = useMemo(() => ({\r\n    id: \"\",\r\n    location: \"\",\r\n    key: data.weapon.key,\r\n    level: data.weapon.level,\r\n    ascension: data.weapon.ascension,\r\n    refinement: data.weapon.refinement,\r\n    lock: false\r\n  }), [data])\r\n  const teamData = useTeamData(characterKey, 0, overriderArtData, overrideWeapon)\r\n\r\n  const { target: charUIData } = teamData?.[characterKey] ?? {}\r\n\r\n  const dataContextValue: dataContextObj | undefined = useMemo(() => {\r\n    if (!teamData || !charUIData) return undefined\r\n    return {\r\n      data: charUIData,\r\n      teamData,\r\n    }\r\n  }, [charUIData, teamData])\r\n  const dataContextValueWithOld: dataContextObj | undefined = useMemo(() => {\r\n    if (!dataContextValue) return undefined\r\n    return {\r\n      ...dataContextValue,\r\n      oldData: compareData ? oldData : undefined,\r\n    }\r\n  }, [dataContextValue, compareData, oldData])\r\n\r\n  const optimizationTarget = data.optimization.target\r\n  const setOptimizationTarget = useCallback((optimizationTarget: ICharTC[\"optimization\"][\"target\"]) => {\r\n    const data_ = deepClone(data)\r\n    data_.optimization.target = optimizationTarget\r\n    setData(data_)\r\n  }, [data, setData])\r\n\r\n  const distributedSubstats = data.optimization.distributedSubstats\r\n  const setDistributedSubstats = (distributedSubstats: ICharTC[\"optimization\"][\"distributedSubstats\"]) => {\r\n    const data_ = deepClone(data)\r\n    data_.optimization.distributedSubstats = distributedSubstats\r\n    setData(data_)\r\n  }\r\n  const maxSubstats = useMemo(() => {\r\n    let result: Record<SubstatKey, number>\r\n    let maxSubstats = data.optimization.maxSubstats;\r\n    if (maxSubstats.useMaxOff) {\r\n      const { max, offset } = maxSubstats;\r\n      result = objectKeyMap(allSubstatKeys, (k) => max - offset * Object.values(data.artifact.slots).reduce((p, s) => p + +(s.statKey === k), 0));\r\n    } else {\r\n      result = maxSubstats\r\n    }\r\n    return result;\r\n  }, [data.artifact.slots, data.optimization.maxSubstats])\r\n\r\n  // This solves\r\n  // $\\argmax_{x\\in N^k, \\sum x <= n, x <= x_max} f(x)$ without assumptions on the properties of $f$\r\n  // We brute force iterate over all substats in the graph and compute the maximum\r\n  // n.b. some substat combinations may not be materializable into real artifacts\r\n  const optimizeSubstats = useCallback((apply: boolean) => () => {\r\n    if (!characterKey || !optimizationTarget) return\r\n    if (!teamData) return\r\n    const workerData = teamData[characterKey]?.target.data[0]\r\n    if (!workerData) return\r\n    Object.assign(workerData, mergeData([workerData, dynamicData])) // Mark art fields as dynamic\r\n    const unoptimizedOptimizationTargetNode = objPathValue(workerData.display ?? {}, optimizationTarget) as NumNode | undefined\r\n    if (!unoptimizedOptimizationTargetNode) return\r\n    let unoptimizedNodes = [unoptimizedOptimizationTargetNode]\r\n    let nodes = optimize(unoptimizedNodes, workerData, ({ path: [p] }) => p !== \"dyn\")\r\n    // Const fold the artifact set\r\n    nodes = mapFormulas(nodes, f => {\r\n      if (f.operation === \"read\" && f.path[0] === \"dyn\") {\r\n        const a = data.artifact.sets[f.path[1]];\r\n        if (a) {\r\n          return constant(a)\r\n        } else if (allArtifactSets.includes(f.path[1] as any)) {\r\n          return constant(0)\r\n        }\r\n      }\r\n      return f\r\n    }, f => f)\r\n    nodes = optimize(nodes, {}, _ => false)\r\n\r\n    const subs = new Set<string>()\r\n    let compute = precompute(nodes, {}, f => {\r\n      subs.add(f.path[1])\r\n      return f.path[1]\r\n    }, 3)\r\n    let realSubs = [...subs].filter(x => allSubstatKeys.includes(x as any))\r\n    if (realSubs.reduce((p, x) => p + maxSubstats[x], 0) < distributedSubstats)\r\n      realSubs.push(\"__unused__\")\r\n    const comp = (statKey: string) => statKey.endsWith(\"_\") ? 100 : 1\r\n\r\n    let max = -Infinity\r\n    const buffer = Object.fromEntries([...subs].map(x => [x, 0]))\r\n    let maxBuffer: typeof buffer | undefined;\r\n    const bufferMain = objectMap(data.artifact.slots, ({ statKey, rarity, level }) => Artifact.mainStatValue(statKey, rarity, level) / comp(statKey))\r\n    const bufferSubs = objectMap(data.artifact.substats.stats, (v, k) => v / comp(k))\r\n    const permute = (distributedSubstats: number, [x, ...xs]: string[]) => {\r\n      if (xs.length === 0) {\r\n        if (distributedSubstats > maxSubstats[x])\r\n          return\r\n        if (x !== \"__unused__\")\r\n          buffer[x] = Artifact.substatValue(x as SubstatKey, 5, data.artifact.substats.type) / comp(x) * distributedSubstats;\r\n        const [result] = compute([{ values: bufferMain }, { values: bufferSubs }, { values: buffer }]);\r\n        if (result > max) {\r\n          max = result\r\n          maxBuffer = structuredClone(buffer)\r\n        }\r\n        return\r\n      }\r\n      for (let i = 0; i <= Math.min(maxSubstats[x], distributedSubstats); i++) {\r\n        buffer[x] = Artifact.substatValue(x as SubstatKey, 5, data.artifact.substats.type) / comp(x) * i;\r\n        permute(distributedSubstats - i, xs)\r\n      }\r\n    }\r\n    permute(distributedSubstats, realSubs)\r\n    console.log(maxBuffer)\r\n    console.log(objectMap(maxBuffer!, (v, x) =>\r\n      allSubstatKeys.includes(x as any) ?\r\n        v / (Artifact.substatValue(x as SubstatKey, 5, data.artifact.substats.type) / comp(x)) :\r\n        v\r\n    ))\r\n\r\n    if (apply) {\r\n      const data_ = deepClone(data)\r\n      data_.artifact.substats.stats = objectMap(data.artifact.substats.stats, (v, k) => v + (maxBuffer![k] ?? 0) * comp(k))\r\n      setData(data_)\r\n    }\r\n  }, [characterKey, data, distributedSubstats, maxSubstats, optimizationTarget, setData, teamData])\r\n\r\n  return <Stack spacing={1}>\r\n    <CardLight>\r\n      <Box sx={{ display: \"flex\", gap: 1, p: 1 }}>\r\n        <Box sx={{ flexGrow: 1, display: \"flex\", gap: 1 }}>\r\n          <Button color=\"info\" onClick={copyFromEquipped} startIcon={<CopyAll />}>Copy from equipped</Button>\r\n          <Button color=\"error\" onClick={resetData} startIcon={<Refresh />}>Reset</Button>\r\n        </Box>\r\n        <SolidToggleButtonGroup exclusive value={compareData} onChange={(e, v) => characterDispatch({ compareData: v })} size=\"small\">\r\n          <ToggleButton value={false} disabled={!compareData}>Show TC stats</ToggleButton>\r\n          <ToggleButton value={true} disabled={compareData}>Compare vs. equipped</ToggleButton>\r\n        </SolidToggleButtonGroup>\r\n      </Box>\r\n    </CardLight>\r\n    {dataContextValue ? <DataContext.Provider value={dataContextValue}>\r\n      <Grid container spacing={1} sx={{ justifyContent: \"center\" }}>\r\n        <Grid item sx={{ flexGrow: -1 }}  >\r\n          <WeaponEditorCard weapon={weapon} setWeapon={setWeapon} weaponTypeKey={characterSheet.weaponTypeKey} />\r\n          <ArtifactMainLevelCard artifactData={data.artifact} setArtifactData={setArtifact} />\r\n        </Grid>\r\n        <Grid item sx={{ flexGrow: 1 }}>\r\n          <ArtifactSubCard\r\n            substats={data.artifact.substats.stats} setSubstats={setSubstats}\r\n            substatsType={data.artifact.substats.type} setSubstatsType={setSubstatsType}\r\n            mainStatKeys={Object.values(data.artifact.slots).map(s => s.statKey)}\r\n            distributedSubstats={distributedSubstats} setDistributedSubstats={setDistributedSubstats}\r\n            maxSubstats={maxSubstats} setMaxSubstats={(k: SubstatKey) => (v: number) => {\r\n              if (data.optimization.maxSubstats[k] === v) return\r\n              const data_ = deepClone(data)\r\n              data_.optimization.maxSubstats.useMaxOff = false\r\n              data_.optimization.maxSubstats[k] = v\r\n              setData(data_)\r\n            }}\r\n            max={data.optimization.maxSubstats.max}\r\n            setMax={(v) => {\r\n              if (data.optimization.maxSubstats.max === v) return\r\n              const data_ = deepClone(data)\r\n              data_.optimization.maxSubstats.useMaxOff = true\r\n              data_.optimization.maxSubstats.max = v\r\n              setData(data_)\r\n            }}\r\n            offset={data.optimization.maxSubstats.offset}\r\n            setOffset={(v) => {\r\n              if (data.optimization.maxSubstats.offset === v) return\r\n              const data_ = deepClone(data)\r\n              data_.optimization.maxSubstats.useMaxOff = true\r\n              data_.optimization.maxSubstats.offset = v\r\n              setData(data_)\r\n            }}\r\n            disableMaxSubstats={data.optimization.maxSubstats.useMaxOff} />\r\n        </Grid>\r\n      </Grid >\r\n      <OptimizationTargetSelector\r\n        optimizationTarget={optimizationTarget}\r\n        setTarget={target => setOptimizationTarget(target)}\r\n      />\r\n      <Button\r\n        onClick={optimizeSubstats(false)}\r\n        disabled={!optimizationTarget}\r\n      >\r\n        Optimize Substats\r\n      </Button>\r\n      <Button\r\n        onClick={optimizeSubstats(true)}\r\n        disabled={!optimizationTarget}\r\n      >\r\n        Optimize & Apply Substats\r\n      </Button>\r\n    </DataContext.Provider> : <Skeleton variant='rectangular' width='100%' height={500} />}\r\n    <CardLight sx={{ flexGrow: 1, p: 1 }}>\r\n      {dataContextValueWithOld ? <DataContext.Provider value={dataContextValueWithOld}>\r\n        <StatDisplayComponent />\r\n      </DataContext.Provider> : <Skeleton variant='rectangular' width='100%' height={500} />}\r\n    </CardLight>\r\n  </Stack>\r\n}\r\n\r\nfunction WeaponEditorCard({ weapon, setWeapon, weaponTypeKey }: { weapon: ICachedWeapon, weaponTypeKey: WeaponTypeKey, setWeapon: (action: Partial<ICharTC[\"weapon\"]>) => void }) {\r\n  const { key, level = 0, refinement = 1, ascension = 0 } = weapon\r\n  const weaponSheet = getWeaponSheet(key)\r\n  const [show, onShow, onHide] = useBoolState()\r\n  const { data } = useContext(DataContext)\r\n  const weaponUIData = useMemo(() => weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\r\n  return <CardLight sx={{ p: 1, mb: 1 }} >\r\n    <WeaponSelectionModal ascension={ascension} show={show} onHide={onHide} onSelect={k => setWeapon({ key: k })} weaponTypeFilter={weaponTypeKey} />\r\n    <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      <Box display=\"flex\" gap={1}>\r\n        <Box\r\n          className={`grad-${weaponSheet.rarity}star`}\r\n          component=\"img\"\r\n          src={weaponAsset(weapon.key, ascension >= 2)}\r\n          sx={{ flexshrink: 1, flexBasis: 0, maxWidth: \"30%\", borderRadius: 1 }}\r\n        />\r\n        <Stack spacing={1} flexGrow={1}>\r\n          <Button fullWidth color=\"info\" sx={{ flexGrow: 1 }} onClick={onShow}><Box sx={{ maxWidth: \"10em\" }}>{weaponSheet?.name}</Box></Button>\r\n          {weaponSheet.hasRefinement && <RefinementDropdown refinement={refinement} setRefinement={r => setWeapon({ refinement: r })} />}\r\n        </Stack>\r\n      </Box>\r\n      <LevelSelect level={level} ascension={ascension} setBoth={setWeapon} useLow={!weaponSheet.hasRefinement} />\r\n      <CardDark >\r\n        <CardHeader title={\"Main Stats\"} titleTypographyProps={{ variant: \"subtitle2\" }} />\r\n        <Divider />\r\n        {weaponUIData && <FieldDisplayList>\r\n          {[input.weapon.main, input.weapon.sub, input.weapon.sub2].map((node, i) => {\r\n            const n = weaponUIData.get(node)\r\n            if (n.isEmpty || !n.value) return null\r\n            return <NodeFieldDisplay key={JSON.stringify(n.info)} node={n} component={ListItem} />\r\n          })}\r\n        </FieldDisplayList>}\r\n      </CardDark>\r\n      {data && weaponSheet?.document && <DocumentDisplay sections={weaponSheet.document} />}\r\n    </Box>\r\n  </CardLight >\r\n}\r\n\r\nfunction ArtifactMainLevelCard({ artifactData, setArtifactData }:\r\n  { artifactData: ICharTC[\"artifact\"], setArtifactData: (a: ICharTC[\"artifact\"]) => void }) {\r\n  const setSlot = useCallback((slotKey: SlotKey) => (slot: ICharTCArtifactSlot) => {\r\n    const artifactData_ = deepClone(artifactData)\r\n    artifactData_.slots[slotKey] = slot\r\n    setArtifactData(artifactData_)\r\n  }, [artifactData, setArtifactData])\r\n\r\n  const setArtSet = useCallback((artSet: ISet) => {\r\n    const artifactData_ = deepClone(artifactData)\r\n    artifactData_.sets = artSet\r\n    setArtifactData(artifactData_)\r\n  }, [artifactData, setArtifactData])\r\n\r\n  return <Stack spacing={1} >\r\n    <CardLight sx={{ p: 1 }}>\r\n      <Stack spacing={1}>\r\n        {allSlotKeys.map(s => <ArtifactMainLevelSlot key={s} slotKey={s} slot={artifactData.slots[s]} setSlot={setSlot(s)} />)}\r\n      </Stack>\r\n    </CardLight>\r\n    <Suspense fallback={<Skeleton variant='rectangular' width='100%' height={200} />}>\r\n      <ArtifactSetsEditor artSet={artifactData.sets} setArtSet={setArtSet} />\r\n    </Suspense>\r\n  </Stack>\r\n}\r\nfunction ArtifactMainLevelSlot({ slotKey, slot, setSlot: setSlotProp }: { slotKey: SlotKey, slot: ICharTCArtifactSlot, setSlot: (s: ICharTCArtifactSlot) => void }) {\r\n  const { level, statKey, rarity } = slot\r\n  const keys = Artifact.slotMainStats(slotKey)\r\n  const setSlot = useCallback((action: Partial<ICharTCArtifactSlot>) => {\r\n    setSlotProp({ ...slot, ...action })\r\n  }, [slot, setSlotProp])\r\n  const setRarity = useCallback(\r\n    (r: ArtifactRarity) => {\r\n      const mLvl = maxArtifactLevel[r] ?? 0\r\n      if (level > mLvl) setSlot({ rarity: r, level: mLvl })\r\n      else setSlot({ rarity: r })\r\n    }, [level, setSlot])\r\n\r\n  return <Box display=\"flex\" gap={1} justifyContent=\"space-between\" alignItems=\"center\">\r\n    <SlotIcon slotKey={slotKey} />\r\n    <CardDark sx={{ height: \"100%\", minWidth: \"5em\", flexGrow: 1, display: \"flex\" }}>\r\n      {keys.length === 1 ?\r\n        <Box p={1} justifyContent=\"center\" alignItems=\"center\" width=\"100%\" display=\"flex\" gap={1}><StatIcon statKey={keys[0]} iconProps={iconInlineProps} /> {KeyMap.getStr(keys[0])}</Box> :\r\n        <DropdownButton sx={{ px: 0 }} fullWidth title={<StatWithUnit statKey={statKey} />} color={KeyMap.getVariant(statKey) ?? \"success\"}>\r\n          {keys.map(msk =>\r\n            <MenuItem key={msk} disabled={statKey === msk} onClick={() => setSlot({ statKey: msk })}>\r\n              <StatColoredWithUnit statKey={msk} />\r\n            </MenuItem>)}\r\n        </DropdownButton>}\r\n    </CardDark>\r\n    <DropdownButton sx={{ px: 0 }} title={<Box sx={{ display: \"flex\", alignItems: \"center\" }}>{rarity} <StarRoundedIcon fontSize=\"inherit\" /></Box>} >\r\n      {[5, 4, 3].map(r =>\r\n        <MenuItem key={r} disabled={rarity === r} onClick={() => setRarity(r as ArtifactRarity)}>\r\n          <Box sx={{ display: \"flex\", alignItems: \"center\" }}>{r} <StarRoundedIcon fontSize=\"inherit\" /></Box>\r\n        </MenuItem>)}\r\n    </DropdownButton>\r\n    <CustomNumberInput startAdornment=\"+\" value={level} color={Artifact.levelVariant(level)} onChange={l => l !== undefined && setSlot({ level: l })} sx={{ borderRadius: 1, pl: 1, my: 0, height: \"100%\" }} inputProps={{ sx: { pl: 0.5, width: \"2em\" }, max: 20, min: 0 }} />\r\n    <CardDark sx={{ height: \"100%\", minWidth: \"4em\" }}>\r\n      <Box p={1} textAlign=\"center\">{`${cacheValueString(Artifact.mainStatValue(statKey, rarity, level), KeyMap.unit(statKey))}${KeyMap.unit(statKey)}`}</Box>\r\n    </CardDark>\r\n  </Box>\r\n}\r\n\r\nfunction ArtifactSetsEditor({ artSet, setArtSet }: { artSet: ISet, setArtSet(artSet: ISet) }) {\r\n  const setSet = useCallback((setKey: ArtifactSetKey | \"\") => {\r\n    if (!setKey) return\r\n    setArtSet({ ...artSet, [setKey]: parseInt(Object.keys(getArtSheet(setKey).setEffects)[0]) })\r\n  }, [artSet, setArtSet,])\r\n\r\n  const setValue = useCallback((setKey: ArtifactSetKey) => (value: 1 | 2 | 4) => setArtSet({ ...artSet, [setKey]: value }), [artSet, setArtSet])\r\n  const deleteValue = useCallback((setKey: ArtifactSetKey) => () => {\r\n    const { [setKey]: _, ...rest } = artSet\r\n    setArtSet({ ...rest })\r\n  }, [artSet, setArtSet])\r\n\r\n  const remaining = 5 - Object.values(artSet).reduce((a, b) => a + b, 0)\r\n\r\n  return <Stack spacing={1} sx={{ flexGrow: 1 }}>\r\n    {Object.entries(artSet).map(([setKey, value]) => <ArtifactSetEditor key={setKey} setKey={setKey} value={value} setValue={setValue(setKey)} deleteValue={deleteValue(setKey)} remaining={remaining} />)}\r\n    <CardLight sx={{ flexGrow: 1, overflow: \"visible\" }}>\r\n      <ArtifactSetAutocomplete\r\n        artSetKey={\"\"}\r\n        setArtSetKey={setSet}\r\n        label={\"New Artifact Set\"}\r\n        getOptionDisabled={({ key }) => Object.keys(artSet).includes(key as ArtifactSetKey) || !key || Object.keys(getArtSheet(key).setEffects).every(n => parseInt(n) > remaining)}\r\n      />\r\n    </CardLight>\r\n\r\n  </Stack>\r\n}\r\nfunction ArtifactSetEditor({ setKey, value, setValue, deleteValue, remaining }: { setKey: ArtifactSetKey, value: 1 | 2 | 4, setValue: (v: 1 | 2 | 4) => void, deleteValue: () => void, remaining: number }) {\r\n  const artifactSheet = getArtSheet(setKey)\r\n\r\n  /* Assumes that all conditionals are from 4-Set. needs to change if there are 2-Set conditionals */\r\n  const set4CondNums = useMemo(() => {\r\n    if (value < 4) return []\r\n    return Object.keys(artifactSheet.setEffects).filter(setNumKey => artifactSheet.setEffects[setNumKey]?.document.some(doc => \"states\" in doc))\r\n  }, [artifactSheet, value])\r\n\r\n  return <CardLight>\r\n    <Box display=\"flex\">\r\n      <ArtifactSetTooltip artifactSheet={artifactSheet} numInSet={value}>\r\n        <Box flexGrow={1} p={1} display=\"flex\" gap={1} alignItems=\"center\">\r\n          <ImgIcon size={2} src={artifactDefIcon(setKey)} />\r\n          <Box >{artifactSheet.setName}</Box>\r\n          <Info />\r\n        </Box>\r\n      </ArtifactSetTooltip>\r\n      <ButtonGroup>\r\n        <DropdownButton size=\"small\" title={<Box whiteSpace=\"nowrap\">{value}-set</Box>}>\r\n          {Object.keys(artifactSheet.setEffects).map(setKey => parseInt(setKey)).map(setKey =>\r\n            <MenuItem key={setKey} disabled={value === setKey || setKey > (remaining + value)} onClick={() => setValue(setKey as 1 | 2 | 4)}>{setKey}-set</MenuItem>\r\n          )}\r\n        </DropdownButton>\r\n        <Button color=\"error\" size=\"small\" onClick={deleteValue}>\r\n          <DeleteForever />\r\n        </Button>\r\n      </ButtonGroup>\r\n    </Box>\r\n    {!!set4CondNums.length && <Stack spacing={1} sx={{ p: 1 }}>\r\n      {set4CondNums.map(setNumKey =>\r\n        <SetEffectDisplay key={setNumKey} setKey={setKey} setNumKey={parseInt(setNumKey) as SetNum} hideHeader conditionalsOnly />\r\n      )}\r\n    </Stack>}\r\n  </CardLight>\r\n}\r\nfunction ArtifactSubCard({ substats, setSubstats, substatsType, setSubstatsType, mainStatKeys, distributedSubstats, setDistributedSubstats, maxSubstats, setMaxSubstats, disableMaxSubstats, max, setMax, offset, setOffset }: {\r\n  substats: Record<SubstatKey, number>, setSubstats: (substats: Record<SubstatKey, number>) => void,\r\n  substatsType: SubstatType, setSubstatsType: (t: SubstatType) => void,\r\n  mainStatKeys: MainStatKey[],\r\n  distributedSubstats: number, setDistributedSubstats: (f: number) => void,\r\n  maxSubstats: Record<SubstatKey, number>, setMaxSubstats: (k: SubstatKey) => (v: number) => void,\r\n  max: number, setMax: (v: number) => void,\r\n  offset: number, setOffset: (v: number) => void,\r\n  disableMaxSubstats: boolean\r\n}) {\r\n  const setValue = useCallback((key: SubstatKey) => (v: number) => setSubstats({ ...substats, [key]: v }), [substats, setSubstats])\r\n  const { t } = useTranslation(\"page_character\")\r\n  const rv = Object.entries(substats).reduce((t, [k, v]) => t + (v / Artifact.substatValue(k)), 0) * 100\r\n  const rolls = Object.entries(substats).reduce((t, [k, v]) => t + (v / Artifact.substatValue(k, undefined, substatsType)), 0)\r\n  return <CardLight sx={{ p: 1, height: \"100%\" }}>\r\n    <Box sx={{ mb: 1, display: \"flex\", gap: 1 }}>\r\n      <DropdownButton fullWidth title={t(`tabTheorycraft.substatType.${substatsType}`)}>\r\n        {substatType.map(st => <MenuItem key={st} disabled={substatsType === st} onClick={() => setSubstatsType(st)}>{t(`tabTheorycraft.substatType.${st}`)}</MenuItem>)}\r\n      </DropdownButton>\r\n      <BootstrapTooltip title={<Typography>{t`tabTheorycraft.maxTotalRolls`}</Typography>} placement=\"top\">\r\n        <CardDark sx={{ textAlign: \"center\", py: 0.5, px: 1, minWidth: \"15em\", whiteSpace: \"nowrap\", display: \"flex\", gap: 2, justifyContent: \"flex-end\", alignItems: \"center\" }}>\r\n          <ColorText color={rolls > 45 ? \"warning\" : undefined} >Rolls: <strong>{rolls.toFixed(0)}</strong></ColorText>\r\n          <ColorText color={rolls > 45 ? \"warning\" : undefined} >RV: <strong>{rv.toFixed(1)}%</strong></ColorText>\r\n        </CardDark>\r\n      </BootstrapTooltip>\r\n      <CustomNumberInput\r\n        value={distributedSubstats}\r\n        onChange={v => v !== undefined && setDistributedSubstats(v)}\r\n        endAdornment={\"Distributed Substats\"}\r\n        sx={{ borderRadius: 1, px: 1, width: \"50%\" }}\r\n        inputProps={{ sx: { textAlign: \"right\", px: 1, width: \"20%\" }, min: 0 }}\r\n      />\r\n      <CustomNumberInput\r\n        value={max}\r\n        onChange={v => v !== undefined && setMax(v)}\r\n        endAdornment={\"Max\"}\r\n        color={!disableMaxSubstats ? \"error\" : \"success\"}\r\n        sx={{ borderRadius: 1, px: 1 }}\r\n        inputProps={{ sx: { textAlign: \"right\", px: 1 }, min: 0 }}\r\n      />\r\n      <CustomNumberInput\r\n        value={offset}\r\n        onChange={v => v !== undefined && setOffset(v)}\r\n        endAdornment={\"Offset\"}\r\n        color={!disableMaxSubstats ? \"error\" : \"success\"}\r\n        sx={{ borderRadius: 1, px: 1 }}\r\n        inputProps={{ sx: { textAlign: \"right\", px: 1 }, min: 0 }}\r\n      />\r\n    </Box>\r\n    <Stack spacing={1}>\r\n      {Object.entries(substats).map(([k, v]) =>\r\n        <ArtifactSubstatEditor\r\n          key={k}\r\n          statKey={k}\r\n          value={v} setValue={setValue(k)}\r\n          substatsType={substatsType}\r\n          mainStatKeys={mainStatKeys}\r\n          maxSubstat={maxSubstats[k]}\r\n          disableMaxSubstats={disableMaxSubstats}\r\n          setMaxSubstat={setMaxSubstats(k)}\r\n        />)}\r\n    </Stack>\r\n  </CardLight>\r\n}\r\nfunction ArtifactSubstatEditor({ statKey, value, setValue, substatsType, mainStatKeys, maxSubstat, setMaxSubstat, disableMaxSubstats }: {\r\n  statKey: SubstatKey,\r\n  value: number, setValue: (v: number) => void,\r\n  substatsType: SubstatType,\r\n  mainStatKeys: MainStatKey[],\r\n  maxSubstat: number, setMaxSubstat: (v: number) => void,\r\n  disableMaxSubstats: boolean,\r\n}) {\r\n  const { t } = useTranslation(\"page_character\")\r\n  const substatValue = Artifact.substatValue(statKey, 5, substatsType)\r\n  const [rolls, setRolls] = useState(() => value / substatValue)\r\n  useEffect(() => setRolls(value / substatValue), [value, substatValue])\r\n\r\n  const unit = KeyMap.unit(statKey)\r\n  const displayValue = rolls * substatValue\r\n\r\n  const rv = (rolls * substatValue) / Artifact.substatValue(statKey) * 100\r\n  const numMains = mainStatKeys.reduce((t, ms) => t + (ms === statKey ? 1 : 0), 0)\r\n  const maxRolls = (5 - numMains) * 6\r\n  // 0.0001 to nudge float comparasion\r\n  const invalid = (rolls - 0.0001) > maxRolls\r\n  const setRValue = useCallback((r: number) => setValue(r * substatValue), [setValue, substatValue])\r\n\r\n  return <Stack spacing={0.5}>\r\n    <Box display=\"flex\" gap={1} justifyContent=\"space-between\" alignItems=\"center\">\r\n      <CardDark sx={{ p: 0.5, minWidth: \"11em\", flexGrow: 1, display: \"flex\", gap: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n        <StatIcon statKey={statKey} iconProps={{ fontSize: \"inherit\" }} />{KeyMap.getStr(statKey)}{KeyMap.unit(statKey)}\r\n      </CardDark>\r\n      <BootstrapTooltip title={<Typography>{t(numMains ? `tabTheorycraft.maxRollsMain` : `tabTheorycraft.maxRolls`, { value: maxRolls })}</Typography>} placement=\"top\">\r\n        <CardDark sx={{ textAlign: \"center\", p: 0.5, minWidth: \"8em\" }}>\r\n          <ColorText color={invalid ? \"warning\" : undefined}>RV: <strong>{rv.toFixed(1)}%</strong></ColorText>\r\n        </CardDark>\r\n      </BootstrapTooltip>\r\n    </Box>\r\n    <Box display=\"flex\" gap={1} justifyContent=\"space-between\" alignItems=\"center\">\r\n      <CustomNumberInput\r\n        color={displayValue ? \"success\" : \"primary\"}\r\n        float={KeyMap.unit(statKey) === \"%\"}\r\n        endAdornment={KeyMap.unit(statKey) || <Box width=\"1em\" component=\"span\" />}\r\n        value={parseFloat(displayValue.toFixed(2))}\r\n        onChange={v => v !== undefined && setValue(v)}\r\n        sx={{ borderRadius: 1, px: 1, height: \"100%\", width: \"6em\" }}\r\n        inputProps={{ sx: { textAlign: \"right\" }, min: 0 }} />\r\n      <CardDark sx={{ px: 2, flexGrow: 1, display: \"flex\", gap: 1, alignItems: \"center\", justifyContent: \"center\", overflow: \"visible\" }}>\r\n        <Slider\r\n          size=\"small\"\r\n          value={rolls}\r\n          max={maxRolls}\r\n          min={0}\r\n          step={1}\r\n          marks\r\n          valueLabelDisplay=\"auto\"\r\n          onChange={(e, v) => setRolls(v as number)}\r\n          onChangeCommitted={(e, v) => setRValue(v as number)}\r\n        />\r\n      </CardDark>\r\n      <CustomNumberInput\r\n        color={value ? (invalid ? \"warning\" : \"success\") : \"primary\"}\r\n        float\r\n        startAdornment={<Box sx={{ whiteSpace: \"nowrap\", width: \"7em\", display: \"flex\", justifyContent: \"space-between\" }}><span>{cacheValueString(substatValue, unit)}{unit}</span><span>x</span></Box>}\r\n        value={parseFloat(rolls.toFixed(2))}\r\n        onChange={v => v !== undefined && setValue(v * substatValue)}\r\n        sx={{ borderRadius: 1, px: 1, my: 0, height: \"100%\", width: \"7em\" }}\r\n        inputProps={{ sx: { textAlign: \"right\", pr: 0.5, }, min: 0, step: 1 }} />\r\n      <CustomNumberInput\r\n        value={maxSubstat}\r\n        onChange={v => v !== undefined && setMaxSubstat(v)}\r\n        color={disableMaxSubstats ? \"error\" : \"success\"}\r\n        sx={{ borderRadius: 1, px: 1, my: 0, height: \"100%\", width: \"7em\" }}\r\n        inputProps={{ sx: { textAlign: \"right\", pr: 0.5, }, min: 0, step: 1 }} />\r\n    </Box>\r\n  </Stack>\r\n}\r\n","import { useContext, useEffect, useState } from \"react\"\r\nimport { DatabaseContext } from \"../../../../Database/Database\"\r\nimport { CharacterKey, WeaponKey } from \"../../../../Types/consts\"\r\n\r\nexport default function useCharTC(characterKey: CharacterKey, defWeapon: WeaponKey) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [charTC, setCharTC] = useState(() => database.charTCs.getWithInit(characterKey, defWeapon))\r\n  useEffect(() => setCharTC(database.charTCs.getWithInit(characterKey, defWeapon)), [database, characterKey, defWeapon])\r\n  useEffect(() =>\r\n    characterKey ? database.charTCs.follow(characterKey, (k, r, v) => r === \"update\" && setCharTC(v)) : undefined,\r\n    [characterKey, setCharTC, database])\r\n  return charTC\r\n}\r\n","import { allElements, TravelerKey } from '@genshin-optimizer/consts';\r\nimport { MenuItem } from '@mui/material';\r\nimport { useContext } from 'react';\r\nimport ColorText from '../../Components/ColoredText';\r\nimport DropdownButton from '../../Components/DropdownMenu/DropdownButton';\r\nimport { CharacterContext } from '../../Context/CharacterContext';\r\nimport { stg } from '../../Data/SheetUtil';\r\nimport useCharSelectionCallback from '../../ReactHooks/useCharSelectionCallback';\r\nimport { travelerElements, TravelerToElement } from '../../Types/consts';\r\n\r\nexport default function TravelerElementSelect() {\r\n  const { character } = useContext(CharacterContext)\r\n  const { key } = character\r\n  const setCharacter = useCharSelectionCallback()\r\n  if (!(key.startsWith(\"Traveler\"))) return null\r\n\r\n  const elementKey = allElements.find(e => key.toLowerCase().includes(e))\r\n  if (!elementKey) return null\r\n\r\n  return <DropdownButton color={elementKey} title={<strong>{stg(`element.${elementKey}`)}</strong>}>\r\n    {travelerElements.map(eleKey =>\r\n      <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => setCharacter(TravelerToElement(key as TravelerKey, eleKey))}>\r\n        <strong><ColorText color={eleKey}>{stg(`element.${eleKey}`)}</ColorText></strong></MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { Female, Male } from '@mui/icons-material';\r\nimport { Button } from '@mui/material';\r\nimport { useCallback, useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { CharacterContext } from '../../Context/CharacterContext';\r\nimport { DatabaseContext } from '../../Database/Database';\r\nimport useDBMeta from '../../ReactHooks/useDBMeta';\r\n\r\nexport default function TravelerGenderSelect() {\r\n  const { t } = useTranslation(\"ui\")\r\n  const { database } = useContext(DatabaseContext)\r\n  const { character } = useContext(CharacterContext)\r\n  const { key } = character\r\n  const { gender } = useDBMeta()\r\n  const toggleGender = useCallback(() => database.dbMeta.set({ gender: gender === \"F\" ? \"M\" : \"F\" }), [gender, database])\r\n  if (!(key.startsWith(\"Traveler\"))) return null\r\n  return <Button onClick={toggleGender} startIcon={gender === \"F\" ? <Female /> : <Male />}><strong>{t(`gender.${gender}`)}</strong>  </Button>\r\n}\r\n","import { BarChart, Calculate, FactCheck, Groups, Person, Science, TrendingUp } from '@mui/icons-material';\nimport { Box, Button, CardContent, Skeleton, Tab, Tabs } from '@mui/material';\nimport { Suspense, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link as RouterLink, Navigate, Route, Routes, useMatch, useNavigate, useParams } from 'react-router-dom';\nimport CardDark from '../../Components/Card/CardDark';\nimport CardLight from '../../Components/Card/CardLight';\nimport CloseButton from '../../Components/CloseButton';\nimport { HitModeToggle, InfusionAuraDropdown, ReactionToggle } from '../../Components/HitModeEditor';\nimport LevelSelect from '../../Components/LevelSelect';\nimport SqBadge from '../../Components/SqBadge';\nimport { CharacterContext, CharacterContextObj } from '../../Context/CharacterContext';\nimport { DataContext, dataContextObj } from '../../Context/DataContext';\nimport { FormulaDataContext, FormulaDataWrapper } from '../../Context/FormulaDataContext';\nimport { ChartData, GraphContext, GraphContextObj } from '../../Context/GraphContext';\nimport { getCharSheet } from '../../Data/Characters';\nimport { DatabaseContext } from '../../Database/Database';\nimport useBoolState from '../../ReactHooks/useBoolState';\nimport useCharacter from '../../ReactHooks/useCharacter';\nimport useCharacterReducer from '../../ReactHooks/useCharacterReducer';\nimport useDBMeta from '../../ReactHooks/useDBMeta';\nimport useTeamData from '../../ReactHooks/useTeamData';\nimport useTitle from '../../ReactHooks/useTitle';\nimport { CharacterKey, charKeyToCharName } from '../../Types/consts';\nimport { CustomMultiTargetButton } from '../CustomMultiTarget';\nimport CharSelectButton from './CharSelectButton';\nimport FormulaModal from './FormulaModal';\nimport StatModal from './StatModal';\nimport TabBuild from './Tabs/TabOptimize';\nimport TabOverview from './Tabs/TabOverview';\nimport TabTalent from './Tabs/TabTalent';\nimport TabTeambuffs from './Tabs/TabTeambuffs';\nimport TabTheorycraft from './Tabs/TabTheorycraft';\nimport TravelerElementSelect from './TravelerElementSelect';\nimport TravelerGenderSelect from './TravelerGenderSelect';\n\nexport default function CharacterDisplay() {\n  const navigate = useNavigate();\n  const { database } = useContext(DatabaseContext)\n  const onClose = useCallback(() => navigate(\"/characters\"), [navigate])\n  const { characterKey } = useParams<{ characterKey?: CharacterKey }>();\n  const invalidKey = !database.chars.keys.includes(characterKey as CharacterKey)\n  if (invalidKey)\n    return <Navigate to=\"/characters\" />\n\n  return <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n    <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\n      {characterKey && <CharacterDisplayCard characterKey={characterKey} onClose={onClose} />}\n    </Suspense>\n  </Box>\n}\n\ntype CharacterDisplayCardProps = {\n  characterKey: CharacterKey,\n  onClose?: () => void,\n}\nfunction CharacterDisplayCard({ characterKey, onClose }: CharacterDisplayCardProps) {\n  const character = useCharacter(characterKey)\n  const { gender } = useDBMeta()\n  const characterSheet = getCharSheet(characterKey, gender)\n  const teamData = useTeamData(characterKey)\n  const { target: charUIData } = teamData?.[characterKey] ?? {}\n  const { params: { tab = \"overview\" } } = useMatch({ path: \"/characters/:charKey/:tab\", end: false }) ?? { params: { tab: \"overview\" } }\n  const { t } = useTranslation([\"charNames_gen\", \"page_character\"])\n\n  useTitle(useMemo(() => `${t(`charNames_gen:${charKeyToCharName(characterKey, gender)}`)} - ${t(`page_character:tabs.${tab}`)}`, [t, characterKey, gender, tab]))\n\n  const characterDispatch = useCharacterReducer(character?.key ?? \"\")\n\n  const dataContextValue: dataContextObj | undefined = useMemo(() => {\n    if (!teamData || !charUIData) return undefined\n    return {\n      data: charUIData,\n      teamData,\n      oldData: undefined,\n    }\n  }, [charUIData, teamData])\n\n  const characterContextValue: CharacterContextObj | undefined = useMemo(() => {\n    if (!character || !characterSheet) return undefined\n    return {\n      character,\n      characterSheet,\n      characterDispatch\n    }\n  }, [character, characterSheet, characterDispatch])\n\n  const [chartData, setChartData] = useState(undefined as ChartData | undefined)\n  const [graphBuilds, setGraphBuilds] = useState<string[][]>()\n  const graphContextValue: GraphContextObj | undefined = useMemo(() => {\n    return {\n      chartData,\n      setChartData,\n      graphBuilds,\n      setGraphBuilds\n    }\n  }, [chartData, graphBuilds])\n\n  // Clear state when switching characters\n  useEffect(() => {\n    setChartData(undefined)\n    setGraphBuilds(undefined)\n  }, [characterKey])\n\n  return <CardDark >\n    {dataContextValue && characterContextValue && graphContextValue\n      ? <CharacterContext.Provider value={characterContextValue}><DataContext.Provider value={dataContextValue}><GraphContext.Provider value={graphContextValue}>\n        <FormulaDataWrapper><CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n          <Box display=\"flex\" >\n            <Box display=\"flex\" gap={1} flexWrap=\"wrap\" flexGrow={1}>\n              <CharSelectButton />\n              <TravelerElementSelect />\n              <TravelerGenderSelect />\n              <DetailStatButton />\n              <CustomMultiTargetButton />\n              <FormulasButton />\n            </Box>\n            {!!onClose && <CloseButton onClick={onClose} />}\n          </Box>\n          <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n            {character && <LevelSelect level={character.level} ascension={character.ascension} setBoth={characterDispatch} />}\n            <HitModeToggle size=\"small\" />\n            <InfusionAuraDropdown />\n            <ReactionToggle size=\"small\" />\n          </Box>\n          <CardLight>\n            <TabNav tab={tab} />\n          </CardLight>\n          <CharacterPanel />\n          <CardLight>\n            <TabNav tab={tab} />\n          </CardLight>\n        </CardContent></FormulaDataWrapper>\n      </GraphContext.Provider></DataContext.Provider></CharacterContext.Provider>\n      : <Skeleton variant='rectangular' width='100%' height={1000} />\n    }\n  </CardDark >\n}\nfunction CharacterPanel() {\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={500} />}>\n    <Routes>\n      {/* Character Panel */}\n      <Route index element={<TabOverview />} />\n      <Route path=\"/talent\" element={<TabTalent />} />\n      <Route path=\"/teambuffs\" element={<TabTeambuffs />} />\n      <Route path=\"/optimize\" element={<TabBuild />} />\n      <Route path=\"/theorycraft\" element={<TabTheorycraft />} />\n    </Routes>\n  </Suspense>\n}\nfunction TabNav({ tab }: { tab: string }) {\n  const { t } = useTranslation(\"page_character\")\n  return <Tabs\n    value={tab}\n    variant=\"scrollable\"\n    allowScrollButtonsMobile\n    sx={{\n      \"& .MuiTab-root:hover\": {\n        transition: \"background-color 0.25s ease\",\n        backgroundColor: \"rgba(255,255,255,0.1)\"\n      },\n    }}\n  >\n    <Tab sx={{ minWidth: \"20%\" }} value=\"overview\" label={t(\"tabs.overview\")} icon={<Person />} component={RouterLink} to=\"\" />\n    <Tab sx={{ minWidth: \"20%\" }} value=\"talent\" label={t(\"tabs.talent\")} icon={<FactCheck />} component={RouterLink} to=\"talent\" />\n    <Tab sx={{ minWidth: \"20%\" }} value=\"teambuffs\" label={t(\"tabs.teambuffs\")} icon={<Groups />} component={RouterLink} to=\"teambuffs\" />\n    <Tab sx={{ minWidth: \"20%\" }} value=\"optimize\" label={t(\"tabs.optimize\")} icon={<TrendingUp />} component={RouterLink} to=\"optimize\" />\n    <Tab sx={{ minWidth: \"20%\" }} value=\"theorycraft\" label={t(\"tabs.theorycraft\")} icon={<Science />} component={RouterLink} to=\"theorycraft\" />\n  </Tabs>\n}\n\n\nfunction DetailStatButton() {\n  const { t } = useTranslation(\"page_character\")\n  const [open, onOpen, onClose] = useBoolState()\n  const { character: { bonusStats } } = useContext(CharacterContext)\n  const bStatsNum = Object.keys(bonusStats).length\n  return <>\n    <Button color=\"info\" startIcon={<BarChart />} onClick={onOpen}>\n      {t`addStats.title`}{!!bStatsNum && <SqBadge sx={{ ml: 1 }} color=\"success\" >{bStatsNum}</SqBadge>}\n    </Button>\n    <StatModal open={open} onClose={onClose} />\n  </>\n}\nfunction FormulasButton() {\n  const { onModalOpen } = useContext(FormulaDataContext)\n  return <>\n    <Button color=\"info\" startIcon={<Calculate />} onClick={onModalOpen}>Formulas {\"&\"} Calcs</Button>\n    <FormulaModal />\n  </>\n}\n"],"names":["GraphContext","createContext","CharacterSelectionModal","React","CharSelectButton","useTranslation","characterSheet","character","key","characterKey","useContext","CharacterContext","showModal","setshowModal","useState","gender","useDBMeta","setCharacter","useCharSelectionCallback","Suspense","fallback","show","onHide","onSelect","Button","color","onClick","startIcon","ThumbSide","src","characterAsset","name","t","FormulaModal","modalOpen","FormulaDataContext","setFormulaData","onCloseHandler","useCallback","undefined","ModalWrapper","open","onClose","CardDark","CardHeader","title","action","CloseButton","CardContent","sx","pt","CalculationDisplay","data","DataContext","contextData","sections","getDisplaySections","Skeleton","variant","width","height","Box","mr","mb","map","Nodes","FormulaCalc","displayNs","sectionKey","database","DatabaseContext","header","useMemo","getDisplayHeader","Object","entries","every","_","node","isEmpty","icon","CardLight","CardHeaderCustom","avatar","ImgIcon","size","SqBadge","Divider","FormulaAccordian","contextNode","expanded","setExpanded","handleChange","e","isExpanded","scrollRef","useRef","useEffect","setTimeout","current","scrollIntoView","behavior","Accordion","bgcolor","onChange","ref","AccordionSummary","expandIcon","ExpandMore","Typography","info","nodeVStr","allAmpReactions","display","ml","AmpReactionModeText","reaction","trigger","subVariant","AccordionDetails","formulas","subform","i","component","styled","props","other","IconButton","theme","expand","transform","marginLeft","transition","transitions","create","duration","shortest","FlexButtonGroup","ButtonGroup","StatInput","children","value","placeholder","defaultValue","onValueChange","percent","disabled","onReset","restProps","TextButton","px","CustomNumberInput","flexBasis","flexGrow","inputProps","textAlign","float","endAdornment","flexShrink","Replay","EnemyExpandCard","characterDispatch","setexpanded","toggle","eLvlNode","get","input","eDefRed","eDefIgn","enemyOverride","gap","alignItems","flexWrap","Chip","label","allElementsWithPhy","element","EnemyResText","justifyContent","Collapse","in","timeout","unmountOnExit","EnemyEditor","immune","isFinite","ele","iconProps","iconInlineProps","content","bsProps","xs","md","eLvl","enemyLevel","enemyDefIgn_","enemyDefRed_","Grid","container","spacing","item","fullWidth","href","target","rel","palette","contentLight","main","KeyMap","type","statKey","eleKey","val","elementImmunity","Number","MAX_VALUE","Infinity","CheckBox","CheckBoxOutlineBlank","cols","lg","StatModal","Stack","BonusStatsEditor","MainStatsCards","keys","allInputPremodKeys","wrapperFunc","bonusStats","setFilter","columns","StatEditorList","statKeys","statFilters","setStatFilters","mainSubKeys","mainReadNodes","k","mainEditKeys","otherStatKeys","allEleDmgKeys","allEleResKeys","miscStatkeys","includes","StatDisplayContent","nodes","extra","oldData","FieldDisplay","rn","ListItem","oldValue","JSON","stringify","specialNode","charEle","elementKey","isMelee","otherStatReadNodes","filter","n","miscStatReadNodes","StatDisplayCard","length","py","OptimizationTargetContext","reaffine","arts","forceRename","affineNodes","Set","topLevelAffine","visit","isAffine","add","operands","forEach","op","has","dynKeys","forEachNodes","f","operation","path","nonConst","assertUnreachable","base","nextDynKey","affine","affineMap","Map","customRead","accu","reaffineArt","stat","values","constantFold","dyn","objectMap","constant","fromEntries","v","result","mapFormulas","objectKeyMap","allSlotKeys","slot","id","set","offsets","baseValue","pruneOrder","numTop","exclusion","progress","allowRainbow","rainbow","noSwitchIn","noSwitchOut","list","newList","art","count","otherBetterEqual","otherMaybeBetter","some","otherBetter","canSwitch","pruneArtRange","minimum","baseRange","x","min","max","wrap","artRanges","computeArtRange","otherArtRanges","addArtRange","a","read","newRange","computeNodeRange","pruneNodeRange","nodeRange","operandRanges","threshold","pass","fail","newOperands","op1","op2","j","ranges","range","reads","Error","computeMinMax","allOperations","reduce","c","sum","NaN","minMaxes","Math","exclusionToAllowed","artSetPerm","_artSets","artSets","allowedRainbows","shapes","indexOfShape","shape","replacing","b","populateShapes","rainbows","push","required","slice","remaining","find","noFilter","kind","sets","counts","allowedCounts","check","used","groupped","sort","usableRainbows","check_free","isolated","missing","rejected","allowedSet","requiredRainbows","l","delete","SetEffectDisplay","setKey","setNumKey","hideHeader","conditionalsOnly","sheet","getArtSheet","document","setEffectDocument","section","flexDirection","DocumentDisplay","useBuildSetting","buildSetting","setBuildSetting","buildSettings","follow","r","buildSettingDispatch","ArtifactSetConfig","dataContext","conditional","artSetExclusion","setOpen","onOpen","dbDirty","forceUpdate","useForceUpdate","followAny","artKeysByRarity","setKeysByRarities","reverse","flatMap","artKeys","artSlotCount","slotKey","getNumSlots","allowRainbow2","allowRainbow4","allow2","allow4","exclude2","exclude4","artifactCondCount","allArtifactSets","fakeDataContextObj","UIData","artSet","resetArtConds","tconditional","setAllExclusion","setnum","exclude","artSetExclusion_","deepClone","ShowChart","Block","borderRadius","Settings","i18nKey","AllSetAllowExcludeCard","setNum","numAllow","numExclude","gutterBottom","handleArtSetExclusion","endIcon","ArtifactSetCard","slotCount","large","setExclusionSet","slots","set4CondNums","setEffects","doc","opacity","className","rarity","artifactDefIcon","mx","ns","StarRounded","fontSize","InfoTooltip","Translate","key18","paddingTop","SlotIcon","parseInt","tot","levels","AssumeFullLevelToggle","mainStatAssumptionLevel","setmainStatAssumptionLevel","DropdownButton","lvl","MenuItem","BonusStatsCard","bonusStatsKeys","Monospace","fontFamily","BorderLinearProgress","LinearProgress","BuildAlert","status","tested","failed","skipped","total","startTime","finishTime","characterName","hasTotal","generatingBuilds","unskipped","testedString","toLocaleString","unskippedString","skippedText","durationString","timeStringMs","round","performance","now","subtitle","Alert","severity","toFixed","ArtifactCardNano","artifactId","pSlotKey","showLocation","BGComponent","useArtifact","actionWrapperFunc","CardActionArea","useTheme","Assets","level","mainStatKey","substats","location","mainStatLevel","mainStatUnit","alpha","secondary","ConditionalWrapper","condition","wrapper","position","ArtifactTooltip","artifactAsset","m","maxHeight","maxWidth","p","pointerEvents","Artifact","LocationIcon","chars","LocationToCharacterKey","BusinessCenter","overflow","bottom","backgroundColor","zIndex","BootstrapTooltip","placement","disableInteractive","StatIcon","cacheValueString","SubstatDisplay","numRolls","rolls","rollColor","clamp","unit","alignContent","StatDisplayComponent","Masonry","sm","xl","Section","optimizationTarget","displayNsReads","nodeKey","emphasize","WeaponCardNano","weaponId","weapon","useWeapon","weaponSheet","getWeaponSheet","computeUIData","dataObjForWeapon","refinement","WeaponNameTooltip","weaponAsset","ascension","WeaponSheet","hasRefinement","WeaponStat","ArtifactSetBadges","artifacts","currentlyEquipped","setToSlots","arti","acc","curr","_k1","slotarr1","_k2","slotarr2","slotarr","ArtifactSetBadge","artifactSheet","numInSet","setActive","ArtifactSetTooltip","BuildDisplayItem","compareBuild","extraButtonsRight","extraButtonsLeft","equippedArtifacts","newOld","setNewOld","close","equipBuild","window","confirm","char","s","aid","charKeyToLocCharKey","oldAid","weapons","statProviderContext","dataContext_","artifactIdsBySlot","artiId","artNanos","oldId","newId","CompareArtifactModal","pb","Checkroom","onEquip","containerProps","minWidth","ArtifactCard","canExclude","canEquip","editorProps","disableSet","disableSlot","ChevronRight","useBuildResult","buildResult","setBuildResult","buildResultDispatch","CustomDot","cx","cy","payload","selectedPoint","radiusSelected","radiusUnselected","colorSelected","colorUnselected","isSelected","y","CustomShape","fill","stroke","points","CustomTooltip","xLabel","xUnit","yLabel","yUnit","setSelectedPoint","addBuildToList","tooltipProps","artifactsBySlot","artifactIds","artiObj","clickAwayHandler","highlightLabel","buildNumber","highlightedType","active","ClickAwayListener","onClickAway","stopPropagation","direction","highlighted","ArtifactCardPico","artifactObj","valueString","EnhancedPoint","constructor","trueY","this","ChartCard","plotBase","setPlotBase","showTooltip","chartData","showDownload","setshowDownload","showMin","setshowMin","graphBuilds","builds","generatedBuilds","sliderLow","setSliderLow","sliderHigh","setSliderHigh","setSlider","_e","TypeError","h","displayData","downloadData","sliderMin","sliderMax","currentBuild","plot","enhancedDatum","datumBuildMap","aId","generBuildIndex","findIndex","build","graphBuildIndex","minimumData","point","last","pop","allData","plotBaseNode","objPathValue","getDisplay","buttonText","OptimizationTargetSelector","setTarget","defaultText","Download","DataDisplay","Chart","plotNode","valueNode","Slider","marks","onChangeCommitted","step","valueLabelDisplay","valueLabelFormat","TextArea","resize","minHeight","readOnly","selectionStart","selectionEnd","optTargetColor","highlightedColor","currentColor","lineColor","setGraphBuilds","chartOnClick","chartX","chartY","clickedX","clickedY","nearestDomPtData","Array","from","querySelectorAll","domPtA","domPtB","aChartX","aChartY","dataset","aDistance","sqrt","bChartX","bChartY","d","xValue","yValue","getNearestPoint","xLabelValue","getLabelFromNode","yLabelValue","ResponsiveContainer","ComposedChart","style","cursor","CartesianGrid","strokeDasharray","XAxis","dataKey","scale","domain","tick","tickFormatter","Label","dy","YAxis","allowDecimals","angle","dx","Tooltip","wrapperStyle","Legend","Line","connectNulls","strokeWidth","isAnimationActive","dot","activeDot","Scatter","textSuffix","artifactsSlotsToSelectMainStats","MainStatSelectionCard","filteredArtIds","mainStatKeys","tots","catTotal","ct","msk","slotTots","sk","FlowerIcon","HpIcon","flower","hp","orientation","flexItem","PlumeIcon","AtkIcon","plume","atk","selectedMainKeys","mainKeys","mainKeysHandler","handleMultiSelect","OptimizationTargetEditorList","oldPath","oldIndex","statFilters_","oldPathStr","oldFilterArr","pathStr","filterArr","splice","delTarget","index","setTargetValue","setTargetDisabled","settings","setting","OptimizationTargetEditorItem","parse","setValue","setDisabled","buttonStyle","buildConstraintNode","isPercent","showEmptyTargets","DeleteForever","StatFilterCard","UseEquipped","filteredArts","useEquippedArts","useBoolState","equipmentPriority","tempEquipmentPriority","setTO","displayOptimize","to","ck","setPrio","setPrioRank","fromIndex","toIndex","arr","removePrio","addPrio","resetPrio","numAbove","indexOf","numUseEquippedChar","numUnlisted","totArts","SelectItem","rank","maxRank","setRank","num","onRemove","NewItem","onAdd","whiteSpace","itemSize","useCharacter","equippedWeapon","pl","KeyboardDoubleArrowUp","KeyboardArrowUp","KeyboardArrowDown","KeyboardDoubleArrowDown","Close","CharacterCardPico","WeaponCardPico","Add","UseExcluded","artsDirty","useExcludedArts","numExcludedArt","WorkerErr","reload","dynamic","setReadNodeKeys","dynamicData","allMainStatKeys","allSubstatKeys","audio","Audio","TabBuild","compareData","setChartData","notification","setnotification","notificationRef","buildStatus","setBuildStatus","setArtsDirty","threads","defThreads","setDisplayOptimize","maxWorkers","setMaxWorkers","useCharacterReducer","onClickTeammate","noArtifact","allowPartial","maxBuildsToShow","levelLow","levelHigh","buildDate","teamData","useTeamData","optimizationTargetNode","isSM","useMediaQueryUp","deferredArtsDirty","useDeferredValue","deferredBuildSetting","cantTakeList","ek","mainStats","levelTotal","tabFocused","onFocus","onBlur","addEventListener","removeEventListener","cancelToken","workerErr","setWorkerErr","generateBuilds","async","split","goblet","circlet","sands","mainStatVal","endsWith","substat","accurateValue","compactArtifacts","getTeamData","workerData","uiDataForTeam","assign","mergeData","unoptimizedOptimizationTargetNode","targetNode","valueFilter","filterNode","cancelled","Promise","unoptimizedNodes","setPerms","filters","filter_loop","available","filterFeasiblePerm","plotBaseNumNode","prepruneArts","optimize","maxValues","thres","pruneExclusion","forced","should","deps","newArts","newNodes","pruneAll","buildValues","minFilterCount","maxRequestFilterInFlight","unprunedFilters","Symbol","iterator","requestFilters","idleWorkers","splittingWorkers","workers","getThreshold","fetchPruningWork","done","next","command","minCount","fetchRequestWork","finalizedList","worker","Worker","URL","console","error","setup","maxBuilds","postMessage","countCommand","finalize","finalized","onmessage","source","terminate","play","alert","pruned","prepruned","log","work","then","buildTimer","setInterval","results","any","all","clearInterval","plotData","plots","mergePlot","maxNum","mergeBuilds","process","Date","targetSelector","getLabel0","getLabel1","Link","RouterLink","CharacterCard","ArtifactLevelSlider","setLow","setHigh","setBoth","maxBuildsToShowList","NotificationsActive","NotificationsOff","TrendingUp","SolidToggleButtonGroup","exclusive","ToggleButton","Provider","BuildList","getLabel","setBuilds","deleteBuild","builds_","DataContextWrapper","BuildItemWrapper","join","useLocation","navigate","useNavigate","toTC","paths","pathname","state","Science","dirty","setDirty","buildsArts","providerValue","charCards","Albedo","Alhaitham","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Candace","Chongyun","Collei","Cyno","Diluc","Diona","Dori","Eula","Faruzan","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","KamisatoAyato","Keqing","Klee","KujouSara","KukiShinobu","Layla","Lisa","Mona","Nahida","Nilou","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Shenhe","ShikanoinHeizou","Sucrose","Tartaglia","Thoma","Tighnari","TravelerF","TravelerM","Venti","Wanderer","Xiangling","Xiao","Xingqiu","Xinyan","YaeMiko","Yanfei","Yaoyao","Yelan","Yoimiya","YunJin","Zhongli","charCard","charKey","CompareBuildButton","artId","onShow","CompareContent","arrow","Difference","newArt","artmap","dataProviderValue","numToShowMap","ArtifactFilterDisplay","lazy","ArtifactSwapModal","onChangeId","clickHandler","filterOptionReducer","slotKeys","filterOption","filterOptionDispatch","useReducer","initialFilterOption","brPt","filterConfigs","artifactFilterConfigs","artIdList","filterFunc","filterFunction","filteredIds","disableSlotFilter","mt","extraButtons","rarityHandler","allRarities","WeaponSwapModal","weaponTypeKey","newWeaponModalShow","setnewWeaponModalShow","editWeaponId","setEditWeaponId","newWeapon","weaponKey","new","initialWeapon","resetEditWeapon","setRarity","searchTerm","setSearchTerm","deferredSearchTerm","weaponIdList","weaponType","weaponFilterConfigs","sortFunction","weaponSortMap","weaponSortConfigs","WeaponSelectionModal","weaponTypeFilter","WeaponEditor","footer","star","TextField","autoFocus","InputProps","WeaponCard","EquipmentSection","setweaponId","showWeapon","hideWeapon","breakpoint","useMediaQuery","breakpoints","up","weaponDoc","rvFilter","useCharMeta","deferredRvFilter","deferredRvSet","LargeWeaponSwapButton","ArtifactSectionCard","onEdit","WeaponSwapButton","effFilter","ArtifactSwapButton","ArtSwapCard","SwapHoriz","hasEquipped","unequipArts","dataSetEffects","setRVFilter","charMeta","deferredrvFilter","rvField","rvmField","currentEfficiency","currentEfficiency_","maxEfficiency","maxEfficiency_","artid","text","PercentBadge","valid","canShow","borderBottomRightRadius","borderBottomLeftRadius","SubstatToggle","selectedKeys","field","setNumKeyArr","TabOverview","onScroll","CharacterProfileCard","EquipmentRow","team","constellation","tlvl","auto","skill","burst","tBoost","favorite","left","stars","colored","top","Favorite","FavoriteBorder","right","getLevelString","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","padding","lineHeight","getTalentOfKey","img","constellationName","talentSpacing","CharacterTalentPane","grlg","constellationCards","SkillDisplayCard","talentKey","onClickTitle","ReactionDisplay","tText","asc","enabled","talentLimits","talent","actionWrapeprFunc","setTalentLevel","newTalentLevelKey","levelBoost","selected","talentSheet","hideDesc","headerAction","TabTeambuffs","TeamBuffDisplay","ResonanceDisplay","TeammateDisplay","teamBuffs","getTeamBuff","premod","enemy","teamCount","titleTypographyProps","resonanceSheets","res","desc","teamBuffOnly","activeCharacterKey","teamMateKey","onClickHandler","setTeammate","dataBundle","teammateCharacterContext","teamConditional","teamMateDataContext","TeammateAutocomplete","setChar","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","characterChildren","CharTalentCondDisplay","isTeammateCard","setNums","sn","sts","autoCompleteProps","toText","startsWith","charKeyToCharName","getCharSheet","toImg","pr","PersonAdd","isFavorite","onDisable","localeCompare","GeneralAutocomplete","options","valueKey","getOptionDisabled","TabTheorycraft","defWeapon","charTC","setCharTC","charTCs","getWithInit","useCharTC","defaultInitialWeaponKey","setData","resetData","initCharTC","setWeapon","copyFrom","eWeapon","newData","artifact","stats","locBuild","copyFromEquipped","lock","setArtifact","data_","setSubstatsType","setSubstats","deferredData","overriderArtData","overrideWeapon","charUIData","dataContextValue","dataContextValueWithOld","optimization","setOptimizationTarget","distributedSubstats","maxSubstats","useMaxOff","offset","optimizeSubstats","apply","subs","compute","precompute","realSubs","comp","buffer","maxBuffer","bufferMain","bufferSubs","permute","structuredClone","CopyAll","Refresh","WeaponEditorCard","ArtifactMainLevelCard","artifactData","setArtifactData","ArtifactSubCard","substatsType","setDistributedSubstats","setMaxSubstats","setMax","setOffset","disableMaxSubstats","weaponUIData","flexshrink","RefinementDropdown","setRefinement","LevelSelect","useLow","setSlot","artifactData_","setArtSet","ArtifactMainLevelSlot","ArtifactSetsEditor","setSlotProp","mLvl","maxArtifactLevel","startAdornment","my","setSet","deleteValue","rest","ArtifactSetEditor","ArtifactSetAutocomplete","artSetKey","setArtSetKey","setName","Info","rv","substatType","st","ArtifactSubstatEditor","maxSubstat","setMaxSubstat","substatValue","setRolls","displayValue","numMains","ms","maxRolls","invalid","setRValue","parseFloat","TravelerElementSelect","allElements","toLowerCase","stg","travelerElements","TravelerToElement","TravelerGenderSelect","toggleGender","dbMeta","Female","Male","CharacterDisplay","useParams","CharacterDisplayCard","params","tab","useMatch","end","useTitle","characterContextValue","graphContextValue","DetailStatButton","CustomMultiTarget","FormulasButton","TabNav","CharacterPanel","Tabs","allowScrollButtonsMobile","Tab","Person","FactCheck","Groups","bStatsNum","BarChart","onModalOpen","Calculate"],"sourceRoot":""}