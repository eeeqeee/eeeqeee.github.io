{"version":3,"file":"337.8e9f31a7979bfbbd.js","mappings":"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A,UACA,SACA,WAGWC,EAAe,CAC1B,gBACA,cACA,kBACA,kBClFK,MCGMC,EAAqB,CAChC,kBACA,gBACA,sBACA,kBACA,YACA,oBACA,gBACA,YACA,gBACA,kBACA,cACA,eACA,oBACA,kBACA,YACA,iBACA,wBACA,YACA,uBACA,uBACA,mBACA,iBACA,mBACA,eACA,cACA,gBACA,eACA,eACA,oBACA,gBACA,gBACA,WACA,kBACA,sBACA,mBAIWC,EAAwB,CACnC,YACA,oBACA,yBACA,aACA,qBACA,gBACA,gBACA,wBACA,cACA,mBACA,qBACA,cACA,mBACA,cACA,uBACA,kBACA,wBACA,eACA,qBACA,eACA,uBACA,oBACA,UACA,cACA,mBACA,aACA,sBACA,mBAIWC,EAAuB,CAClC,qBACA,iBACA,cACA,kBACA,eACA,aACA,cACA,mBACA,qBACA,gBACA,UACA,YACA,mBACA,cACA,mBACA,cACA,4BACA,uBACA,aACA,eACA,cACA,yBACA,WACA,mBACA,kBACA,eAIWC,EAAmB,CAC9B,cACA,UACA,gBACA,mBACA,cACA,iBACA,eACA,iBACA,iBACA,WACA,aACA,cACA,cACA,YACA,oBACA,aACA,YACA,WACA,oBACA,WACA,aACA,WACA,OACA,iBACA,qBACA,oBACA,cACA,YACA,gBACA,qBACA,kBACA,gBAIWC,EAAwB,CACnC,mBACA,0BACA,kBACA,cACA,aACA,sBACA,kBACA,gBACA,cACA,qBACA,eACA,gBACA,6BACA,aACA,YACA,eACA,eACA,oBACA,iBACA,iBACA,gBACA,uBACA,eACA,aACA,aACA,gCACA,0BACA,eACA,oBACA,eClKWC,EAAc,CAAC,SAAU,QAAS,QAAS,SAAU,WAiDrDN,EAAe,CAC1B,gBACA,cACA,kBACA,kBCtDK,SAASO,EAASC,EAAkBC,EAAmBC,EAAuBC,EAAgBC,EAA4BC,GAC/H,IAAIC,EAASD,EAEb,MAAME,EACQ,CAAEC,gBAAgB,GAD1BD,EAEW,CAAEC,gBAAgB,GAF7BD,EAGY,CAAEE,UAAU,GAHxBF,EAIM,CAAEG,Y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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///webpack/runtime/startup chunk dependencies","webpack:///./src/app/Util/Util.ts","webpack:///./src/app/Formula/utils.ts","webpack:///./src/app/Formula/internal.ts","webpack:///./src/app/Formula/optimization.ts","webpack:///../../libs/consts/src/character.ts","webpack:///../../libs/consts/src/artifact.ts","webpack:///../../libs/consts/src/weapon.ts","webpack:///./src/app/Types/consts.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/common.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/BNBSplitWorker.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/ComputeWorker.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/DefaultSplitWorker.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/BackgroundWorker.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/ensure chunk","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/get mini-css chunk filename","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/importScripts chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(531).then(next);\n};","export const getRandomElementFromArray = <T>(array: readonly T[]): T => array[Math.floor(Math.random() * array.length)];\r\nexport function getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nexport function getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\r\n}\r\nexport function getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\n/**\r\n * Assumes that the object entries are all primitives + objects\r\n * shallow copy the object,\r\n * deep copy the\r\n * @param obj\r\n * @returns\r\n */\r\nexport function deepClone<T>(obj: T): T {\r\n  if (!obj) return obj\r\n  if (!Object.keys(obj).length) return {} as T\r\n  const ret = { ...obj }\r\n  Object.entries(obj).forEach(([k, v]: any) => {\r\n    if (typeof v !== \"object\") return\r\n    ret[k] = JSON.parse(JSON.stringify(v))\r\n  })\r\n  return ret\r\n}\r\n\r\nexport const clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nexport const getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nexport const clamp01 = (val) => clamp(val, 0, 1)\r\nexport const clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nexport function strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nexport function hammingDistance(str1, str2) {\r\n  let dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (let i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\n\r\n//multiplies every numerical value in the obj by a multiplier.\r\nexport function objMultiplication(obj, multi) {\r\n  if (multi === 1) return obj\r\n  Object.keys(obj).forEach((prop: any) => {\r\n    if (typeof obj[prop] === \"object\") objMultiplication(obj[prop], multi)\r\n    if (typeof obj[prop] === \"number\") obj[prop] = obj[prop] * multi\r\n  })\r\n  return obj\r\n}\r\n\r\n//assign obj.[keys...] = value\r\nexport function layeredAssignment(obj, keys: readonly string[], value) {\r\n  keys.reduce((accu, key, i, arr) => {\r\n    if (i === arr.length - 1) return (accu[key] = value)\r\n    if (!accu[key]) accu[key] = {}\r\n    return accu[key]\r\n  }, obj)\r\n  return obj\r\n}\r\n//get the value in a nested object, giving array of path\r\nexport function objPathValue(obj: object | undefined, keys: readonly string[]): any {\r\n  if (!obj || !keys) return undefined;\r\n  !Array.isArray(keys) && console.error(keys)\r\n  return keys.reduce((a, k) => a?.[k], obj)\r\n}\r\n//delete the value denoted by the path. Will also delete empty objects as well.\r\nexport function deletePropPath(obj, path) {\r\n  const tempPath = [...path]\r\n  const lastKey = tempPath.pop()\r\n  const objPathed = objPathValue(obj, tempPath)\r\n  delete objPathed?.[lastKey];\r\n}\r\n\r\nexport function objClearEmpties(o) {\r\n  for (const k in o) {\r\n    if (typeof o[k] !== \"object\") continue\r\n    objClearEmpties(o[k])\r\n    if (!Object.keys(o[k]).length) delete o[k];\r\n  }\r\n}\r\nexport function crawlObject(obj: any, keys: string[] = [], validate: (o: any, keys: string[]) => boolean, cb: (o: any, keys: string[]) => void) {\r\n  if (validate(obj, keys)) cb(obj, keys)\r\n  else obj && typeof obj === \"object\" && Object.entries(obj).forEach(([key, val]) => crawlObject(val, [...keys, key], validate, cb))\r\n}\r\n// const getObjectKeysRecursive = (obj) => Object.values(obj).reduce((a, prop) => typeof prop === \"object\" ? [...a, ...getObjectKeysRecursive(prop)] : a, Object.keys(obj))\r\nexport const getObjectKeysRecursive = (obj) => typeof obj === \"object\" ? Object.values(obj).flatMap(getObjectKeysRecursive).concat(Object.keys(obj)) : (typeof obj === \"string\" ? [obj] : [])\r\n\r\nexport function evalIfFunc<T, X>(value: T | ((arg: X) => T), arg: X): T {\r\n  return typeof value === \"function\" ? (value as any)(arg) : value\r\n}\r\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\r\nexport function objectKeyMap<K extends string | number, V>(keys: readonly K[], map: (key: K, i: number) => V): StrictDict<`${K}`, V> {\r\n  return Object.fromEntries(keys.map((k, i) => [k, map(k, i)])) as any\r\n}\r\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\r\nexport function objectKeyValueMap<T, K extends string | number, V>(items: readonly T[], map: (item: T, i: number) => [K, V]): StrictDict<`${K}`, V> {\r\n  return Object.fromEntries(items.map((t, i) => map(t, i))) as any\r\n}\r\n\r\nexport function objectMap<K extends string, V, T>(obj: Record<K, Exclude<V, undefined>>, fn: (value: V, key: `${K}`, index: number) => T): Record<K, T>\r\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>>\r\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>> {\r\n  return Object.fromEntries(Object.entries(obj).map(\r\n    ([k, v], i) => [k, fn(v, k, i)]\r\n  )) as any\r\n}\r\n\r\nconst rangeGen = function* (from: number, to: number): Iterable<number> {\r\n  for (let i = from; i <= to; i++) yield i;\r\n};\r\n\r\n/** range of [from, to], inclusive */\r\nexport function range(from: number, to: number): number[] {\r\n  return [...rangeGen(from, to)]\r\n}\r\n\r\nexport function assertUnreachable(value: never): never {\r\n  throw new Error(`Should not reach this with value ${value}`)\r\n}\r\n\r\n/** Will change `arr` in-place */\r\nexport function toggleInArr<T>(arr: T[], value: T) {\r\n  const ind = arr.indexOf(value)\r\n  if (ind < 0) arr.push(value)\r\n  else arr.splice(ind, 1)\r\n}\r\n\r\nexport function toggleArr<T>(arr: T[], value: T) {\r\n  return arr.includes(value) ? arr.filter(a => a !== value) : [...arr, value]\r\n}\r\n\r\nexport function deepFreeze<T>(obj: T, layers = 5): T {\r\n  if (layers === 0) return obj\r\n  if (typeof obj === \"object\")\r\n    Object.values(Object.freeze(obj)).forEach(o => deepFreeze(o, layers--))\r\n  return obj\r\n}\r\n\r\nexport function arrayMove<T>(arr: T[], oldIndex: number, newIndex: number) {\r\n  if (newIndex < 0 || newIndex >= arr.length) return arr\r\n  if (oldIndex < 0 || oldIndex >= arr.length) return arr\r\n  arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\r\n  return arr\r\n}\r\n","\r\nimport { objectKeyMap } from \"../Util/Util\"\r\nimport type { OptNode } from \"./optimization\"\r\nimport type { ComputeNode, ConstantNode, Data, DataNode, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, StrPrioNode, SubscriptNode, ThresholdNode } from \"./type\"\r\n\r\ntype Opt = number | OptNode\r\ntype Num = number | NumNode\r\ntype Str = string | undefined | StrNode\r\ntype N_S = Num | Str\r\ntype AnyNode = NumNode | StrNode\r\n\r\nexport const todo: OptNode = constant(NaN, { name: \"TODO\" })\r\nexport const one = percent(1), naught = percent(0)\r\nexport const none = constant(\"none\")\r\n\r\nexport function constant(value: number, info?: Info): ConstantNode<number>\r\nexport function constant(value: string | undefined, info?: Info): ConstantNode<string | undefined>\r\nexport function constant(value: number | string | undefined, info?: Info): ConstantNode<number> | ConstantNode<string | undefined>\r\nexport function constant(value: number | string | undefined, info?: Info): ConstantNode<number | string | undefined> {\r\n  return typeof value === \"number\"\r\n    ? { operation: \"const\", operands: [], type: \"number\", value, info }\r\n    : { operation: \"const\", operands: [], type: \"string\", value, info }\r\n}\r\n/** `value` in percentage. The value is written as non-percentage, e.g., `percent(1)` for 100% */\r\nexport function percent(value: number, info?: Info): ConstantNode<number> {\r\n  if (value >= Number.MAX_VALUE / 100) value = Infinity\r\n  if (value <= -Number.MAX_VALUE / 100) value = -Infinity\r\n  return constant(value, { unit: \"%\", ...info })\r\n}\r\n/** Inject `info` to the node in-place */\r\nexport function infoMut(node: OptNode, info: Info): OptNode\r\nexport function infoMut(node: NumNode, info: Info): NumNode\r\nexport function infoMut(node: StrNode, info: Info): StrNode\r\nexport function infoMut(node: AnyNode, info: Info): AnyNode\r\nexport function infoMut(node: AnyNode, info: Info): AnyNode {\r\n  if (info) node.info = { ...node.info, ...info }\r\n  return node\r\n}\r\n\r\n/** `table[string] ?? defaultNode` */\r\nexport function lookup(index: StrNode, table: Dict<string, NumNode>, defaultV: Num | \"none\", info?: Info): LookupNode<NumNode>\r\nexport function lookup(index: StrNode, table: Dict<string, StrNode>, defaultV: Str | \"none\", info?: Info): LookupNode<StrNode>\r\nexport function lookup(index: StrNode, table: Dict<string, AnyNode>, defaultV: N_S | \"none\", info?: Info): LookupNode<AnyNode> {\r\n  return { operation: \"lookup\", operands: defaultV !== \"none\" ? [intoV(index), intoV(defaultV)] : [intoV(index)], table, info }\r\n}\r\n\r\n/** min( x1, x2, ... ) */\r\nexport function min(...values: Opt[]): ComputeNode<OptNode, OptNode>\r\nexport function min(...values: Num[]): ComputeNode\r\nexport function min(...values: Num[]): ComputeNode {\r\n  return { operation: \"min\", operands: intoOps(values) }\r\n}\r\n/** max( x1, x2, ... ) */\r\nexport function max(...values: Opt[]): ComputeNode<OptNode, OptNode>\r\nexport function max(...values: Num[]): ComputeNode\r\nexport function max(...values: Num[]): ComputeNode {\r\n  return { operation: \"max\", operands: intoOps(values) }\r\n}\r\n/** x1 + x2 + ... */\r\nexport function sum(...values: Opt[]): ComputeNode<OptNode, OptNode>\r\nexport function sum(...values: Num[]): ComputeNode\r\nexport function sum(...values: Num[]): ComputeNode {\r\n  return { operation: \"add\", operands: intoOps(values) }\r\n}\r\n/** x1 * x2 * ... */\r\nexport function prod(...values: Opt[]): ComputeNode<OptNode, OptNode>\r\nexport function prod(...values: Num[]): ComputeNode\r\nexport function prod(...values: Num[]): ComputeNode {\r\n  return { operation: \"mul\", operands: intoOps(values) }\r\n}\r\n/** x / (x + c) */\r\nexport function frac(x: Opt, c: Opt): ComputeNode<OptNode, OptNode>\r\nexport function frac(x: Num, c: Num): ComputeNode\r\nexport function frac(x: Num, c: Num): ComputeNode {\r\n  return { operation: \"sum_frac\", operands: intoOps([x, c]) }\r\n}\r\nexport function res(base: Opt): ComputeNode<OptNode, OptNode>\r\nexport function res(base: Num): ComputeNode\r\nexport function res(base: Num): ComputeNode {\r\n  return { operation: \"res\", operands: intoOps([base]) }\r\n}\r\n\r\n/** v1 == v2 ? eq : neq */\r\nexport function compareEq(v1: Num, v2: Num, eq: Num, neq: Num, info?: Info): MatchNode<NumNode>\r\nexport function compareEq(v1: Num, v2: Num, eq: Str, neq: Str, info?: Info): MatchNode<StrNode>\r\nexport function compareEq(v1: Str, v2: Str, eq: Num, neq: Num, info?: Info): MatchNode<NumNode>\r\nexport function compareEq(v1: Str, v2: Str, eq: Str, neq: Str, info?: Info): MatchNode<StrNode>\r\nexport function compareEq(v1: N_S, v2: N_S, eq: N_S, neq: N_S, info?: Info): MatchNode<AnyNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(eq), intoV(neq)], info }\r\n}\r\n/** v1 == v2 ? pass : 0 */\r\nexport function equal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode>\r\nexport function equal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode>\r\nexport function equal(v1: N_S, v2: N_S, pass: Num, info?: Info): MatchNode<NumNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoVInfo(pass, info), intoV(0)], emptyOn: \"unmatch\" }\r\n}\r\n/** v1 == v2 ? pass : `undefined` */\r\nexport function equalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode>\r\nexport function equalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode>\r\nexport function equalStr(v1: N_S, v2: N_S, pass: Str, info?: Info): MatchNode<StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoVInfo(pass, info), intoV(undefined)], emptyOn: \"unmatch\" }\r\n}\r\n/** v1 != v2 ? pass : 0 */\r\nexport function unequal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode>\r\nexport function unequal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode>\r\nexport function unequal(v1: N_S, v2: N_S, pass: Num, info?: Info): MatchNode<NumNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoVInfo(pass, info)], emptyOn: \"match\" }\r\n}\r\n/** v1 != v2 ? pass : `undefined` */\r\nexport function unequalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode>\r\nexport function unequalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode>\r\nexport function unequalStr(v1: N_S, v2: N_S, pass: Str, info?: Info): MatchNode<StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(undefined), intoVInfo(pass, info)], emptyOn: \"match\" }\r\n}\r\n/** v1 >= v2 ? pass : 0 */\r\nexport function greaterEq(v1: Opt, v2: Opt, pass: Opt, info?: Info): ThresholdNode<OptNode, OptNode, OptNode>\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): ThresholdNode<NumNode>\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): ThresholdNode<NumNode> {\r\n  return { operation: \"threshold\", operands: [intoV(v1), intoV(v2), intoVInfo(pass, info), intoV(0)], emptyOn: \"l\" }\r\n}\r\n/** v1 >= v2 ? pass : `undefined` */\r\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): ThresholdNode<StrNode> {\r\n  return { operation: \"threshold\", operands: [intoV(v1), intoV(v2), intoVInfo(pass, info), intoV(undefined)], emptyOn: \"l\" }\r\n}\r\n/** v1 < v2 ? pass : 0 */\r\nexport function lessThan(v1: Opt, v2: Opt, pass: Opt, info?: Info): ThresholdNode<OptNode, OptNode, OptNode>\r\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): ThresholdNode<NumNode>\r\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): ThresholdNode<NumNode> {\r\n  return { operation: \"threshold\", operands: [intoV(v1), intoV(v2), intoV(0), intoVInfo(pass, info)], emptyOn: \"ge\" }\r\n}\r\n/** v1 >= v2 ? ge : le */\r\nexport function threshold(v1: Opt, v2: Opt, ge: Opt, le: Opt, info?: Info): ThresholdNode<OptNode, OptNode, OptNode>\r\nexport function threshold(v1: Num, v2: Num, ge: Num, le: Num, info?: Info): ThresholdNode<NumNode>\r\nexport function threshold(v1: Num, v2: Num, ge: Num, le: Num, info?: Info): ThresholdNode<NumNode> {\r\n  return { operation: \"threshold\", operands: [intoV(v1), intoV(v2), intoV(ge), intoV(le)], info }\r\n}\r\n\r\nexport function setReadNodeKeys<T extends NodeList>(nodeList: T, prefix: string[] = []): T {\r\n  if (nodeList.operation) {\r\n    if (nodeList.operation !== \"read\")\r\n      throw new Error(`Found ${(nodeList as any).operation} node while making reader`)\r\n    return { ...nodeList, path: prefix }\r\n  } else {\r\n    return objectKeyMap(Object.keys(nodeList), key =>\r\n      setReadNodeKeys(nodeList[key], [...prefix, key])) as any\r\n  }\r\n}\r\nexport function data(base: NumNode, data: Data): DataNode<NumNode>\r\nexport function data(base: StrNode, data: Data): DataNode<StrNode>\r\nexport function data(base: AnyNode, data: Data): DataNode<NumNode> | DataNode<StrNode>\r\nexport function data(base: AnyNode, data: Data): DataNode<NumNode> | DataNode<StrNode> {\r\n  return { operation: \"data\", operands: [base as any], data }\r\n}\r\nexport function resetData(base: NumNode, data: Data, info?: Info): DataNode<NumNode>\r\nexport function resetData(base: StrNode, data: Data, info?: Info): DataNode<StrNode>\r\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<AnyNode>\r\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<AnyNode> {\r\n  return { operation: \"data\", operands: [base], data, reset: true, info }\r\n}\r\n\r\n\r\nexport function customRead(path: readonly string[], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path, info, type: \"number\" }\r\n}\r\nexport function customStringRead(path: readonly string[]): ReadNode<string> {\r\n  return { operation: \"read\", operands: [], path, type: \"string\" }\r\n}\r\nexport function read(accu?: ReadNode<number>[\"accu\"], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path: [], accu, info, type: \"number\" }\r\n}\r\n/**\r\n * CAUTION: Use `prio` accumulation sparingly. WR don't assume the reading order, so the result may be unstable\r\n */\r\nexport function stringRead(accu?: ReadNode<string | undefined>[\"accu\"]): ReadNode<string | undefined> {\r\n  return { operation: \"read\", operands: [], path: [], accu, type: \"string\" }\r\n}\r\nexport function stringPrio(...operands: Str[]): StrPrioNode {\r\n  return { operation: \"prio\", operands: intoOps(operands) }\r\n}\r\n/** list[index] */\r\nexport function subscript<V>(index: NumNode, list: V[], info?: Info): SubscriptNode<V> {\r\n  return { operation: \"subscript\", operands: [index], list, info }\r\n}\r\n\r\nfunction intoOps(values: Num[]): NumNode[]\r\nfunction intoOps(values: Str[]): StrNode[]\r\nfunction intoOps(values: N_S[]): AnyNode[] {\r\n  return values.map(value => typeof value === \"object\" ? value : constant(value))\r\n}\r\nfunction intoV(value: Num): NumNode\r\nfunction intoV(value: Str): StrNode\r\nfunction intoV(value: N_S): AnyNode\r\nfunction intoV(value: N_S): AnyNode {\r\n  return (typeof value !== \"object\") ? constant(value) : value\r\n}\r\nfunction intoVInfo(value: Num, info: Info | undefined): NumNode\r\nfunction intoVInfo(value: Str, info: Info | undefined): StrNode\r\nfunction intoVInfo(value: N_S, info: Info | undefined): AnyNode\r\nfunction intoVInfo(value: N_S, info: Info | undefined): AnyNode {\r\n  if (!info) return intoV(value)\r\n  return (typeof value !== \"object\") ? constant(value, info) : infoMut({ ...value }, info)\r\n}\r\n\r\ntype _NodeList = { [key: string]: NodeList } & { operation?: never }\r\ntype NodeList = _NodeList | ReadNode<number> | ReadNode<string>\r\n","import { AnyNode, Base, NodeData, NumNode, StrNode } from \"./type\"\r\nimport { constant } from \"./utils\"\r\n\r\nexport function deepNodeClone<T extends NodeData<NumNode | StrNode | undefined>>(data: T): T {\r\n  const map = new Map()\r\n  function internal(orig: any) {\r\n    if (typeof orig !== \"object\") return orig\r\n    const old = map.get(orig)\r\n    if (old) return old\r\n\r\n    const cache: any = Array.isArray(orig)\r\n      ? orig.map(val => internal(val))\r\n      : Object.fromEntries(Object.entries(orig).map(([key, val]) =>\r\n        [key, key === \"info\" ? val : internal(val)]))\r\n    map.set(orig, cache)\r\n    return cache\r\n  }\r\n  return internal(data)\r\n}\r\n\r\nexport function forEachNodes<T extends Base<T> = AnyNode>(formulas: T[], topDown: (formula: T) => void, bottomUp: (formula: T) => void): void {\r\n  const visiting = new Set<T>(), visited = new Set<T>()\r\n\r\n  function traverse(formula: T) {\r\n    if (visited.has(formula)) return\r\n\r\n    if (visiting.has(formula)) {\r\n      console.error(\"Found cyclical dependency during formula traversal\")\r\n      return\r\n    }\r\n    visiting.add(formula)\r\n\r\n    topDown(formula)\r\n\r\n    formula.operands.forEach(traverse)\r\n\r\n    bottomUp(formula)\r\n\r\n    visiting.delete(formula)\r\n    visited.add(formula)\r\n  }\r\n\r\n  formulas.forEach(traverse)\r\n}\r\n\r\nexport function mapFormulas<Input extends Base<Input> = AnyNode, Interim extends Base<Interim> = Input, Output extends Base<Output> = Interim>(formulas: Input[], topDownMap: (formula: Input | Interim) => Interim, bottomUpMap: (current: Interim | Output, orig: Input | Interim) => Output): Output[] {\r\n  const visiting = new Set<Input | Interim>()\r\n  const topDownMapped = new Map<Input | Interim, Output>()\r\n  const bottomUpMapped = new Map<Interim, Output>()\r\n\r\n  function check(formula: Input | Interim): Output {\r\n    let topDown: Interim | Output | undefined = topDownMapped.get(formula)\r\n    if (topDown) return topDown\r\n    topDown = topDownMap(formula)\r\n\r\n    let bottomUp = bottomUpMapped.get(topDown)\r\n    if (bottomUp) return bottomUp\r\n\r\n    if (visiting.has(topDown)) {\r\n      console.error(\"Found cyclical dependency during formula mapping\")\r\n      return constant(NaN) as any\r\n    }\r\n    visiting.add(topDown)\r\n\r\n    bottomUp = bottomUpMap(traverse(topDown), formula)\r\n\r\n    visiting.delete(topDown)\r\n\r\n    topDownMapped.set(formula, bottomUp)\r\n    bottomUpMapped.set(topDown, bottomUp)\r\n    return bottomUp\r\n  }\r\n\r\n  function traverse(formula: Interim): Interim | Output {\r\n    const operands = formula.operands.map(check)\r\n    return arrayEqual<Interim | Output>(operands, formula.operands) ? formula : { ...formula, operands }\r\n  }\r\n\r\n  const result = formulas.map(check)\r\n  return arrayEqual<Input | Output>(result, formulas) ? formulas as any : result\r\n}\r\n\r\nexport function customMapFormula<Context, Output, Input extends Base<Input>>(formulas: Input[], context: Context, map: (formula: Input, context: Context, map: (node: Input, context: Context) => Output) => Output): Output[] {\r\n  const contextMapping = new Map<Context, [Set<Input>, Map<Input, Output>]>()\r\n  function internalMap(formula: Input, context: Context): Output {\r\n    let current = contextMapping.get(context)\r\n    if (!current) contextMapping.set(context, current = [new Set(), new Map()])\r\n    const [visiting, mapping] = current\r\n\r\n    const old = mapping.get(formula)\r\n    if (old) return old\r\n\r\n    if (visiting.has(formula))\r\n      throw new Error(\"Found cyclical dependency during formula mapping\")\r\n\r\n    visiting.add(formula)\r\n    const newFormula = map(formula, context, internalMap)\r\n    mapping.set(formula, newFormula)\r\n    visiting.delete(formula)\r\n\r\n    return newFormula\r\n  }\r\n  return formulas.map(formula => internalMap(formula, context))\r\n}\r\n\r\nfunction arrayEqual<T>(a: readonly T[] | undefined, b: readonly T[] | undefined): boolean {\r\n  if (a === undefined) return b === undefined\r\n  if (b === undefined) return false\r\n\r\n  return a.length === b.length && a.every((value, i) => value === b[i])\r\n}\r\n","import type { DynStat } from \"../PageCharacter/CharacterDisplay/Tabs/TabOptimize/common\"\r\nimport { assertUnreachable, objPathValue } from \"../Util/Util\"\r\nimport { customMapFormula, forEachNodes, mapFormulas } from \"./internal\"\r\nimport { AnyNode, CommutativeMonoidOperation, ComputeNode, ConstantNode, Data, NumNode, Operation, ReadNode, StrNode, StrPrioNode, ThresholdNode } from \"./type\"\r\nimport { constant } from \"./utils\"\r\n\r\nexport type OptNode = ComputeNode<OptNode, OptNode> | ThresholdNode<OptNode, OptNode, OptNode> |\r\n  ReadNode<number> | ConstantNode<number>\r\n\r\nconst allCommutativeMonoidOperations: StrictDict<CommutativeMonoidOperation, (_: number[]) => number> = {\r\n  min: (x: number[]): number => Math.min(...x),\r\n  max: (x: number[]): number => Math.max(...x),\r\n  add: (x: number[]): number => x.reduce((a, b) => a + b, 0),\r\n  mul: (x: number[]): number => x.reduce((a, b) => a * b, 1),\r\n}\r\nexport const allOperations: StrictDict<Operation | \"threshold\", (_: number[]) => number> = {\r\n  ...allCommutativeMonoidOperations,\r\n  res: ([res]: number[]): number => {\r\n    if (res < 0) return 1 - res / 2\r\n    else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n    return 1 - res\r\n  },\r\n  sum_frac: (x: number[]): number => x[0] / x.reduce((a, b) => a + b),\r\n  threshold: ([value, threshold, pass, fail]: number[]): number => value >= threshold ? pass : fail,\r\n}\r\n\r\nconst commutativeMonoidOperationSet = new Set(Object.keys(allCommutativeMonoidOperations) as (NumNode[\"operation\"])[])\r\n\r\nexport function optimize(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): OptNode[] {\r\n  let opts = constantFold(formulas, topLevelData, shouldFold)\r\n  opts = flatten(opts)\r\n  return deduplicate(opts)\r\n}\r\n\r\n/**\r\n * Compile an array of `formulas` into a JS `Function`\r\n *\r\n * The nodes in the array should be automatically deduped by the JS engine\r\n *\r\n * @param formulas\r\n * @param initial base stats for the formula\r\n * @param binding\r\n * @param slotCount the number of slots in the build (usually 5)\r\n * @returns\r\n */\r\nexport function precompute(formulas: OptNode[], initial: DynStat, binding: (readNode: ReadNode<number>) => string, slotCount: number): (_: { values: DynStat }[]) => number[] {\r\n  let body = `\r\n\"use strict\";\r\n// copied from the code above\r\nfunction res(res) {\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\nconst x0=0`; // making sure `const` has at least one entry\r\n\r\n  let i = 1;\r\n  const names = new Map<NumNode | StrNode, string>()\r\n  forEachNodes(formulas, _ => { }, f => {\r\n    const { operation, operands } = f, name = `x${i++}`, operandNames = operands.map((x: OptNode) => names.get(x)!)\r\n    names.set(f, name)\r\n    switch (operation) {\r\n      case \"read\": {\r\n        const key = binding(f)\r\n        let arr = new Array(slotCount).fill(null).map((x, i) => `(b[${i}].values[\"${key}\"] ?? 0)`)\r\n        if (initial[key] && initial[key] !== 0) {\r\n          arr = [initial[key].toString(), ...arr]\r\n        }\r\n        body += `,${name}=${arr.join('+')}`\r\n        break\r\n      }\r\n      case \"const\": names.set(f, `(${f.value})`); break\r\n      case \"add\": case \"mul\": body += `,${name}=${operandNames.join(operation === \"add\" ? \"+\" : \"*\")}`; break\r\n      case \"min\": case \"max\": body += `,${name}=Math.${operation}(${operandNames})`; break\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = operandNames\r\n        body += `,${name}=(${value}>=${threshold})?${pass}:${fail}`\r\n        break\r\n      }\r\n      case \"res\": body += `,${name}=res(${operandNames[0]})`; break\r\n      case \"sum_frac\": body += `,${name}=${operandNames[0]}/(${operandNames[0]}+${operandNames[1]})`; break\r\n\r\n      default: assertUnreachable(operation)\r\n    }\r\n  })\r\n  body += `;\\nreturn [${formulas.map(f => names.get(f)!)}]`\r\n  return new (Function as any)(`b`, body)\r\n}\r\n\r\nfunction flatten(formulas: OptNode[]): OptNode[] {\r\n  return mapFormulas(formulas, f => f, _formula => {\r\n    let result = _formula\r\n    if (commutativeMonoidOperationSet.has(_formula.operation as Operation)) {\r\n      const formula = _formula as ComputeNode<OptNode>\r\n      const { operation } = formula\r\n\r\n      let flattened = false\r\n      const operands = formula.operands.flatMap(dep =>\r\n        (dep.operation === operation) ? (flattened = true, dep.operands) : [dep])\r\n      result = flattened ? { ...formula, operands } : formula\r\n    }\r\n\r\n    return result\r\n  })\r\n}\r\nfunction deduplicate(formulas: OptNode[]): OptNode[] {\r\n  function elementCounts<T>(array: readonly T[]): Map<T, number> {\r\n    const result = new Map<T, number>()\r\n    for (const value of array) result.set(value, (result.get(value) ?? 0) + 1)\r\n    return result\r\n  }\r\n  function arrayFromCounts<T>(counts: Map<T, number>): T[] {\r\n    return [...counts].flatMap(([dep, count]) => Array(count).fill(dep))\r\n  }\r\n\r\n  const wrap = {\r\n    common: {\r\n      counts: new Map<OptNode, number>(),\r\n      formulas: new Set<OptNode>(),\r\n      operation: \"add\" as Operation\r\n    }\r\n  }\r\n\r\n  while (true) {\r\n    let next: typeof wrap.common | undefined\r\n\r\n    const factored: ComputeNode<OptNode> = { operation: wrap.common.operation, operands: arrayFromCounts(wrap.common.counts) }\r\n\r\n    let candidatesByOperation = new Map<Operation, [ComputeNode<OptNode>, Map<OptNode, number>][]>()\r\n    for (const operation of Object.keys(allCommutativeMonoidOperations))\r\n      candidatesByOperation.set(operation, [])\r\n\r\n    formulas = mapFormulas(formulas, _formula => {\r\n      if (wrap.common.formulas.has(_formula)) {\r\n        const formula = _formula as ComputeNode<OptNode>\r\n        const remainingCounts = new Map(wrap.common.counts)\r\n        const operands = formula.operands.filter(dep => {\r\n          const count = remainingCounts.get(dep)\r\n          if (count) {\r\n            remainingCounts.set(dep, count - 1)\r\n            return false\r\n          }\r\n          return true\r\n        })\r\n\r\n        if (!operands.length)\r\n          return factored\r\n        operands.push(factored)\r\n        return { ...formula, operands }\r\n      }\r\n      return _formula\r\n    }, _formula => {\r\n      if (!commutativeMonoidOperationSet.has(_formula.operation as any)) return _formula\r\n      const formula = _formula as ComputeNode<OptNode>\r\n\r\n      if (next) {\r\n        if (next.operation === formula.operation) {\r\n          const currentCounts = elementCounts(formula.operands), commonCounts = new Map<OptNode, number>()\r\n          const nextCounts = next.counts\r\n          let total = 0\r\n\r\n          for (const [dependency, currentCount] of currentCounts.entries()) {\r\n            const commonCount = Math.min(currentCount, nextCounts.get(dependency) ?? 0)\r\n            if (commonCount) {\r\n              commonCounts.set(dependency, commonCount)\r\n              total += commonCount\r\n            } else commonCounts.delete(dependency)\r\n          }\r\n          if (total > 1) {\r\n            next.counts = commonCounts\r\n            next.formulas.add(formula)\r\n          }\r\n        }\r\n      } else {\r\n        const candidates = candidatesByOperation.get(formula.operation)!\r\n        const counts = elementCounts(formula.operands)\r\n\r\n        for (const [candidate, candidateCounts] of candidates) {\r\n          let total = 0\r\n\r\n          const commonCounts = new Map<OptNode, number>()\r\n          for (const [dependency, candidateCount] of candidateCounts.entries()) {\r\n            const count = Math.min(candidateCount, counts.get(dependency) ?? 0)\r\n            if (count) {\r\n              commonCounts.set(dependency, count)\r\n              total += count\r\n            }\r\n          }\r\n          if (total > 1) {\r\n            next = {\r\n              counts: commonCounts,\r\n              formulas: new Set([formula, candidate]),\r\n              operation: formula.operation\r\n            }\r\n            candidatesByOperation.clear()\r\n            break\r\n          }\r\n        }\r\n        if (!next) candidates.push([formula, counts])\r\n      }\r\n\r\n      return formula\r\n    })\r\n\r\n    if (next) wrap.common = next\r\n    else break\r\n  }\r\n\r\n  return formulas\r\n}\r\n\r\n/**\r\n * Replace nodes with known values with appropriate constants,\r\n * avoiding removal of any nodes that pass `isFixed` predicate\r\n */\r\nexport function constantFold(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): OptNode[] {\r\n  type Context = { data: Data[], processed: Map<NumNode | StrNode, OptNode | StrNode> }\r\n  const origin: Context = { data: [], processed: new Map() }\r\n  const nextContextMap = new Map([[origin, new Map<Data, Context>()]])\r\n\r\n  const context = { data: [topLevelData], processed: new Map() }\r\n  nextContextMap.set(context, new Map())\r\n  nextContextMap.get(origin)!.set(topLevelData, context)\r\n  return customMapFormula<typeof context, OptNode | StrNode, AnyNode>(formulas, context, (formula, context, map) => {\r\n    const { operation } = formula, fold = (x: NumNode, c: typeof context) => map(x, c) as OptNode\r\n    const foldStr = (x: StrNode, c: typeof context) => map(x, c) as StrNode\r\n    let result: OptNode | StrNode\r\n    switch (operation) {\r\n      case \"const\": result = formula; break\r\n      case \"add\": case \"mul\": case \"max\": case \"min\":\r\n        const f = allOperations[operation]\r\n        const numericOperands: number[] = []\r\n        const formulaOperands: OptNode[] = formula.operands.filter(formula => {\r\n          const folded = fold(formula, context)\r\n          return (folded.operation === \"const\")\r\n            ? (numericOperands.push(folded.value), false)\r\n            : true\r\n        }).map(x => fold(x, context))\r\n        const numericValue = f(numericOperands)\r\n\r\n        // Fold degenerate cases. This may incorrectly compute NaN\r\n        // results, which shouldn't appear under expected usage.\r\n        // - zero\r\n        //   - 0 * ... = 0\r\n        // - infinity\r\n        //   - max(infinity, ...) = infinity\r\n        //   - infinity + ... = infinity\r\n        // - (-infinity)\r\n        //   - min(-infinity, ...) - infinity\r\n        //   - (-infinity) + ... = -infinity\r\n        // - NaN\r\n        //   - operation(NaN, ...) = NaN\r\n        if (!isFinite(numericValue)) {\r\n          if ((operation !== \"mul\") &&\r\n            (operation !== \"max\" || numericValue > 0) &&\r\n            (operation !== \"min\" || numericValue < 0)) {\r\n            result = constant(numericValue)\r\n            break\r\n          }\r\n        } else if (operation === \"mul\" && numericValue === 0) {\r\n          result = constant(numericValue)\r\n          break\r\n        }\r\n\r\n        if (numericValue !== f([])) // Skip vacuous values\r\n          formulaOperands.push(constant(numericValue))\r\n        if (formulaOperands.length <= 1) result = formulaOperands[0] ?? constant(f([]))\r\n        else result = { operation, operands: formulaOperands }\r\n        break\r\n      case \"res\": case \"sum_frac\": {\r\n        const operands = formula.operands.map(x => fold(x, context))\r\n        const f = allOperations[operation]\r\n        if (operands.every(x => x.operation === \"const\"))\r\n          result = constant(f(operands.map(x => (x as ConstantNode<number>).value)))\r\n        else result = { ...formula, operands }\r\n        break\r\n      }\r\n      case \"lookup\": {\r\n        const index = foldStr(formula.operands[0], context)\r\n        if (index.operation === \"const\") {\r\n          const selected = formula.table[index.value!] ?? formula.operands[1]\r\n          if (selected) {\r\n            result = map(selected, context)\r\n            break\r\n          }\r\n        }\r\n        throw new Error(`Unsupported ${operation} node while folding`)\r\n      }\r\n      case \"prio\": {\r\n        const first = formula.operands.find(op => {\r\n          const folded = foldStr(op, context)\r\n          if (folded.operation !== \"const\")\r\n            throw new Error(`Unsupported ${operation} node while folding`)\r\n          return folded.value !== undefined\r\n        })\r\n        result = first ? foldStr(first, context) : constant(undefined)\r\n        break\r\n      }\r\n      case \"small\": {\r\n        let smallest = undefined as ConstantNode<string | undefined> | undefined\r\n        for (const operand of formula.operands) {\r\n          const folded = foldStr(operand, context)\r\n          if (folded.operation !== \"const\")\r\n            throw new Error(`Unsupported ${operation} node while folding`)\r\n          if (smallest?.value === undefined || (folded.value !== undefined && folded.value < smallest.value))\r\n            smallest = folded\r\n        }\r\n        result = smallest ?? constant(undefined)\r\n        break\r\n      }\r\n      case \"match\": {\r\n        const [v1, v2, match, unmatch] = formula.operands.map((x: NumNode | StrNode) => map(x, context))\r\n        if (v1.operation !== \"const\" || v2.operation !== \"const\")\r\n          throw new Error(`Unsupported ${operation} node while folding`)\r\n        result = (v1.value === v2.value) ? match : unmatch\r\n        break\r\n      }\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = formula.operands.map(x => map(x, context) as OptNode)\r\n        if (pass.operation === \"const\" && fail.operation === \"const\" && pass.value === fail.value)\r\n          result = pass\r\n        else if (value.operation === \"const\" && threshold.operation === \"const\")\r\n          result = value.value >= threshold.value ? pass : fail\r\n        else\r\n          result = { ...formula, operands: [value, threshold, pass, fail] }\r\n        break\r\n      }\r\n      case \"subscript\": {\r\n        const index = fold(formula.operands[0], context)\r\n        if (index.operation !== \"const\")\r\n          throw new Error(\"Found non-constant subscript node while folding\")\r\n        result = constant(formula.list[index.value])\r\n        break\r\n      }\r\n      case \"read\": {\r\n        const operands = context.data\r\n          .map(x => objPathValue(x, formula.path) as (NumNode | StrNode))\r\n          .filter(x => x)\r\n\r\n        if (operands.length === 0) {\r\n          if (shouldFold(formula)) {\r\n            const { accu } = formula\r\n            if (accu === undefined || accu === \"small\")\r\n              result = formula.type === \"string\" ? constant(undefined) : constant(NaN)\r\n            else result = constant(allOperations[accu]([]))\r\n          } else result = formula\r\n        } else if (formula.accu === undefined || operands.length === 1)\r\n          result = map(operands[operands.length - 1], context)\r\n        else\r\n          result = map({ operation: formula.accu, operands } as ComputeNode | StrPrioNode, context)\r\n        break\r\n      }\r\n      case \"data\": {\r\n        if (formula.reset) context = origin\r\n        const nextMap = nextContextMap.get(context)!\r\n        let nextContext = nextMap.get(formula.data)\r\n        if (!nextContext) {\r\n          nextContext = { data: [...context.data, formula.data], processed: new Map() }\r\n          nextContextMap.set(nextContext, new Map())\r\n          nextMap.set(formula.data, nextContext)\r\n        }\r\n        result = map(formula.operands[0], nextContext)\r\n        break\r\n      }\r\n      default: assertUnreachable(operation)\r\n    }\r\n\r\n    if (result.info) {\r\n      result = { ...result }\r\n      delete result.info\r\n    }\r\n    return result\r\n  }) as OptNode[]\r\n}\r\n\r\nexport const testing = {\r\n  constantFold, flatten, deduplicate\r\n}\r\n","export const genderKeys = [\"F\", \"M\"] as const\r\nexport type Gender = typeof genderKeys[number]\r\n\r\nexport const allElements = ['anemo', 'geo', 'electro', 'hydro', 'pyro', 'cryo', 'dendro'] as const\r\nexport type ElementKey = typeof allElements[number]\r\n\r\nexport const allElementsWithPhy = [\"physical\", ...allElements] as const\r\nexport type ElementKeyWithPhy = typeof allElementsWithPhy[number]\r\n\r\nexport const allRegions = [\"mondstadt\", \"liyue\", \"inazuma\", \"sumeru\", \"fontaine\", \"natlan\", \"snezhnaya\", \"khaenriah\"] as const\r\nexport type Region = typeof allRegions[number]\r\n\r\nexport const allAscension = [0, 1, 2, 3, 4, 5, 6] as const\r\nexport type Ascension = typeof allAscension[number]\r\n\r\nexport const nonTravelerCharacterKeys = [\r\n  \"Albedo\",\r\n  \"Alhaitham\",\r\n  \"Aloy\",\r\n  \"Amber\",\r\n  \"AratakiItto\",\r\n  \"Barbara\",\r\n  \"Beidou\",\r\n  \"Bennett\",\r\n  \"Candace\",\r\n  \"Chongyun\",\r\n  \"Collei\",\r\n  \"Cyno\",\r\n  \"Diluc\",\r\n  \"Diona\",\r\n  \"Dori\",\r\n  \"Eula\",\r\n  \"Faruzan\",\r\n  \"Fischl\",\r\n  \"Ganyu\",\r\n  \"Gorou\",\r\n  \"HuTao\",\r\n  \"Jean\",\r\n  \"KaedeharaKazuha\",\r\n  \"Kaeya\",\r\n  \"KamisatoAyaka\",\r\n  \"KamisatoAyato\",\r\n  \"Keqing\",\r\n  \"Klee\",\r\n  \"KujouSara\",\r\n  \"KukiShinobu\",\r\n  \"Layla\",\r\n  \"Lisa\",\r\n  \"Mona\",\r\n  \"Nahida\",\r\n  \"Nilou\",\r\n  \"Ningguang\",\r\n  \"Noelle\",\r\n  \"Qiqi\",\r\n  \"RaidenShogun\",\r\n  \"Razor\",\r\n  \"Rosaria\",\r\n  \"SangonomiyaKokomi\",\r\n  \"Sayu\",\r\n  \"Shenhe\",\r\n  \"ShikanoinHeizou\",\r\n  \"Sucrose\",\r\n  \"Tartaglia\",\r\n  \"Thoma\",\r\n  \"Tighnari\",\r\n  \"Venti\",\r\n  \"Wanderer\",\r\n  \"Xiangling\",\r\n  \"Xiao\",\r\n  \"Xingqiu\",\r\n  \"Xinyan\",\r\n  \"YaeMiko\",\r\n  \"Yanfei\",\r\n  \"Yaoyao\",\r\n  \"Yelan\",\r\n  \"Yoimiya\",\r\n  \"YunJin\",\r\n  \"Zhongli\",\r\n] as const\r\n\r\nexport const travelerKeys = [\r\n  \"TravelerAnemo\",\r\n  \"TravelerGeo\",\r\n  \"TravelerElectro\",\r\n  \"TravelerDendro\",\r\n] as const\r\nexport type TravelerKey = typeof travelerKeys[number]\r\n\r\nexport const locationGenderedCharacterKeys = [\r\n  ...nonTravelerCharacterKeys,\r\n  \"TravelerF\",\r\n  \"TravelerM\"\r\n] as const\r\nexport type LocationGenderedCharacterKey = typeof locationGenderedCharacterKeys[number]\r\n\r\nexport const allCharacterKeys = [\r\n  ...nonTravelerCharacterKeys,\r\n  ...travelerKeys\r\n] as const\r\nexport type CharacterKey = typeof allCharacterKeys[number]\r\n\r\nexport function characterKeyToLocationGenderedCharacterKey(charKey: CharacterKey, gender: Gender): LocationGenderedCharacterKey {\r\n  if (travelerKeys.includes(charKey as TravelerKey)) return `Traveler${gender}`\r\n  return charKey as LocationGenderedCharacterKey\r\n}\r\n","import { Rarity } from \"./common\"\r\n\r\nexport const allArtifactSets = [\r\n  \"Adventurer\",\r\n  \"ArchaicPetra\",\r\n  \"Berserker\",\r\n  \"BlizzardStrayer\",\r\n  \"BloodstainedChivalry\",\r\n  \"BraveHeart\",\r\n  \"CrimsonWitchOfFlames\",\r\n  \"DeepwoodMemories\",\r\n  \"DefendersWill\",\r\n  \"DesertPavilionChronicle\",\r\n  \"EchoesOfAnOffering\",\r\n  \"EmblemOfSeveredFate\",\r\n  \"FlowerOfParadiseLost\",\r\n  \"Gambler\",\r\n  \"GildedDreams\",\r\n  \"GladiatorsFinale\",\r\n  \"HeartOfDepth\",\r\n  \"HuskOfOpulentDreams\",\r\n  \"Instructor\",\r\n  \"Lavawalker\",\r\n  \"LuckyDog\",\r\n  \"MaidenBeloved\",\r\n  \"MartialArtist\",\r\n  \"NoblesseOblige\",\r\n  \"OceanHuedClam\",\r\n  \"PaleFlame\",\r\n  \"PrayersForDestiny\",\r\n  \"PrayersForIllumination\",\r\n  \"PrayersForWisdom\",\r\n  \"PrayersToSpringtime\",\r\n  \"ResolutionOfSojourner\",\r\n  \"RetracingBolide\",\r\n  \"Scholar\",\r\n  \"ShimenawasReminiscence\",\r\n  \"TenacityOfTheMillelith\",\r\n  \"TheExile\",\r\n  \"ThunderingFury\",\r\n  \"Thundersoother\",\r\n  \"TinyMiracle\",\r\n  \"TravelingDoctor\",\r\n  \"VermillionHereafter\",\r\n  \"ViridescentVenerer\",\r\n  \"WanderersTroupe\",\r\n] as const\r\nexport type ArtifactSetKey = typeof allArtifactSets[number]\r\n\r\nexport const allSlotKeys = [\"flower\", \"plume\", \"sands\", \"goblet\", \"circlet\"] as const\r\nexport type SlotKey = typeof allSlotKeys[number]\r\n\r\nexport const artMaxLevel: Record<Rarity, number> = {\r\n  1: 4,\r\n  2: 4,\r\n  3: 12,\r\n  4: 16,\r\n  5: 20,\r\n} as const\r\n","import { Rarity } from \"./common\"\r\n\r\nexport const allWeaponTypeKeys = ['sword', 'claymore', 'polearm', 'bow', 'catalyst'] as const\r\nexport type WeaponTypeKey = typeof allWeaponTypeKeys[number]\r\n\r\nexport const allWeaponSwordKeys = [\r\n  \"AmenomaKageuchi\",\r\n  \"AquilaFavonia\",\r\n  \"BlackcliffLongsword\",\r\n  \"CinnabarSpindle\",\r\n  \"CoolSteel\",\r\n  \"KagotsurubeIsshin\",\r\n  \"DarkIronSword\",\r\n  \"DullBlade\",\r\n  \"FavoniusSword\",\r\n  \"FesteringDesire\",\r\n  \"FilletBlade\",\r\n  \"FreedomSworn\",\r\n  \"HaranGeppakuFutsu\",\r\n  \"HarbingerOfDawn\",\r\n  \"IronSting\",\r\n  \"KeyOfKhajNisut\",\r\n  \"LightOfFoliarIncision\",\r\n  \"LionsRoar\",\r\n  \"MistsplitterReforged\",\r\n  \"PrimordialJadeCutter\",\r\n  \"PrototypeRancour\",\r\n  \"RoyalLongsword\",\r\n  \"SacrificialSword\",\r\n  \"SapwoodBlade\",\r\n  \"SilverSword\",\r\n  \"SkyriderSword\",\r\n  \"SkywardBlade\",\r\n  \"SummitShaper\",\r\n  \"SwordOfDescension\",\r\n  \"TheAlleyFlash\",\r\n  \"TheBlackSword\",\r\n  \"TheFlute\",\r\n  \"ToukabouShigure\",\r\n  \"TravelersHandySword\",\r\n  \"XiphosMoonlight\",\r\n] as const\r\nexport type WeaponSwordKey = typeof allWeaponSwordKeys[number]\r\n\r\nexport const allWeaponClaymoreKeys = [\r\n  \"Akuoumaru\",\r\n  \"BlackcliffSlasher\",\r\n  \"BloodtaintedGreatsword\",\r\n  \"DebateClub\",\r\n  \"FavoniusGreatsword\",\r\n  \"FerrousShadow\",\r\n  \"ForestRegalia\",\r\n  \"KatsuragikiriNagamasa\",\r\n  \"LithicBlade\",\r\n  \"LuxuriousSeaLord\",\r\n  \"MakhairaAquamarine\",\r\n  \"OldMercsPal\",\r\n  \"PrototypeArchaic\",\r\n  \"Rainslasher\",\r\n  \"RedhornStonethresher\",\r\n  \"RoyalGreatsword\",\r\n  \"SacrificialGreatsword\",\r\n  \"SerpentSpine\",\r\n  \"SkyriderGreatsword\",\r\n  \"SkywardPride\",\r\n  \"SnowTombedStarsilver\",\r\n  \"SongOfBrokenPines\",\r\n  \"TheBell\",\r\n  \"TheUnforged\",\r\n  \"WasterGreatsword\",\r\n  \"Whiteblind\",\r\n  \"WhiteIronGreatsword\",\r\n  \"WolfsGravestone\",\r\n] as const\r\nexport type WeaponClaymoreKey = typeof allWeaponClaymoreKeys[number]\r\n\r\nexport const allWeaponPolearmKeys = [\r\n  \"BeginnersProtector\",\r\n  \"BlackcliffPole\",\r\n  \"BlackTassel\",\r\n  \"CalamityQueller\",\r\n  \"CrescentPike\",\r\n  \"Deathmatch\",\r\n  \"DragonsBane\",\r\n  \"DragonspineSpear\",\r\n  \"EngulfingLightning\",\r\n  \"FavoniusLance\",\r\n  \"Halberd\",\r\n  \"IronPoint\",\r\n  \"KitainCrossSpear\",\r\n  \"LithicSpear\",\r\n  \"MissiveWindspear\",\r\n  \"Moonpiercer\",\r\n  \"PrimordialJadeWingedSpear\",\r\n  \"PrototypeStarglitter\",\r\n  \"RoyalSpear\",\r\n  \"SkywardSpine\",\r\n  \"StaffOfHoma\",\r\n  \"StaffOfTheScarletSands\",\r\n  \"TheCatch\",\r\n  \"VortexVanquisher\",\r\n  \"WavebreakersFin\",\r\n  \"WhiteTassel\",\r\n] as const\r\nexport type WeaponPoleArmKey = typeof allWeaponPolearmKeys[number]\r\n\r\nexport const allWeaponBowKeys = [\r\n  \"AlleyHunter\",\r\n  \"AmosBow\",\r\n  \"AquaSimulacra\",\r\n  \"BlackcliffWarbow\",\r\n  \"CompoundBow\",\r\n  \"ElegyForTheEnd\",\r\n  \"EndOfTheLine\",\r\n  \"FadingTwilight\",\r\n  \"FavoniusWarbow\",\r\n  \"Hamayumi\",\r\n  \"HuntersBow\",\r\n  \"HuntersPath\",\r\n  \"KingsSquire\",\r\n  \"Messenger\",\r\n  \"MitternachtsWaltz\",\r\n  \"MouunsMoon\",\r\n  \"PolarStar\",\r\n  \"Predator\",\r\n  \"PrototypeCrescent\",\r\n  \"RavenBow\",\r\n  \"RecurveBow\",\r\n  \"RoyalBow\",\r\n  \"Rust\",\r\n  \"SacrificialBow\",\r\n  \"SeasonedHuntersBow\",\r\n  \"SharpshootersOath\",\r\n  \"SkywardHarp\",\r\n  \"Slingshot\",\r\n  \"TheStringless\",\r\n  \"TheViridescentHunt\",\r\n  \"ThunderingPulse\",\r\n  \"WindblumeOde\",\r\n] as const\r\nexport type WeaponBowKey = typeof allWeaponBowKeys[number]\r\n\r\nexport const allWeaponCatalystKeys = [\r\n  \"ApprenticesNotes\",\r\n  \"AThousandFloatingDreams\",\r\n  \"BlackcliffAgate\",\r\n  \"DodocoTales\",\r\n  \"EmeraldOrb\",\r\n  \"EverlastingMoonglow\",\r\n  \"EyeOfPerception\",\r\n  \"FavoniusCodex\",\r\n  \"Frostbearer\",\r\n  \"FruitOfFulfillment\",\r\n  \"HakushinRing\",\r\n  \"KagurasVerity\",\r\n  \"LostPrayerToTheSacredWinds\",\r\n  \"MagicGuide\",\r\n  \"MappaMare\",\r\n  \"MemoryOfDust\",\r\n  \"OathswornEye\",\r\n  \"OtherworldlyStory\",\r\n  \"PocketGrimoire\",\r\n  \"PrototypeAmber\",\r\n  \"RoyalGrimoire\",\r\n  \"SacrificialFragments\",\r\n  \"SkywardAtlas\",\r\n  \"SolarPearl\",\r\n  \"TheWidsith\",\r\n  \"ThrillingTalesOfDragonSlayers\",\r\n  \"TulaytullahsRemembrance\",\r\n  \"TwinNephrite\",\r\n  \"WanderingEvenstar\",\r\n  \"WineAndSong\",\r\n] as const\r\nexport type WeaponCatalystKey = typeof allWeaponCatalystKeys[number]\r\n\r\nexport const allWeaponKeys = [\r\n  ...allWeaponSwordKeys,\r\n  ...allWeaponClaymoreKeys,\r\n  ...allWeaponPolearmKeys,\r\n  ...allWeaponBowKeys,\r\n  ...allWeaponCatalystKeys,\r\n] as const\r\nexport type WeaponKey = WeaponSwordKey | WeaponClaymoreKey | WeaponPoleArmKey | WeaponBowKey | WeaponCatalystKey\r\n\r\nexport const weaponMaxLevel: Record<Rarity, number> = {\r\n  1: 70,\r\n  2: 70,\r\n  3: 90,\r\n  4: 90,\r\n  5: 90,\r\n} as const\r\n","import { allArtifactSets, allWeaponBowKeys, allWeaponCatalystKeys, allWeaponClaymoreKeys, allWeaponPolearmKeys, allWeaponSwordKeys, nonTravelerCharacterKeys, WeaponBowKey, WeaponCatalystKey, WeaponClaymoreKey, WeaponPoleArmKey, WeaponSwordKey } from \"@genshin-optimizer/consts\"\n\nexport const allHitModes = [\"hit\", \"avgHit\", \"critHit\"] as const\nexport const allAmpReactions = [\"vaporize\", \"melt\",] as const\nexport const allAdditiveReactions = [\"spread\", \"aggravate\"] as const\nexport const allArtifactSetCount = [1, 2, 3, 4, 5] as const\nexport const allArtifactRarities = [5, 4, 3] as const\n/**\n * @deprecated\n */\nexport const allSlotKeys = [\"flower\", \"plume\", \"sands\", \"goblet\", \"circlet\"] as const\n/**\n * @deprecated\n */\nexport const allElements = ['anemo', 'geo', 'electro', 'hydro', 'pyro', 'cryo', 'dendro'] as const\n/**\n * @deprecated\n */\nexport const allElementsWithPhy = [\"physical\", ...allElements] as const\nexport const allInfusionAuraElements = [\"pyro\", 'cryo', 'hydro'] as const\n/**\n * @deprecated\n */\nexport const allWeaponTypeKeys = ['sword', 'claymore', 'polearm', 'bow', 'catalyst'] as const\nexport const allRollColorKeys = ['roll1', 'roll2', 'roll3', 'roll4', 'roll5', 'roll6'] as const\n/**\n * @deprecated\n */\nexport const allAscension = [0, 1, 2, 3, 4, 5, 6] as const\nexport const allRefinement = [1, 2, 3, 4, 5] as const\nexport const substatType = [\"max\", \"mid\", \"min\"] as const\nexport const genderKeys = [\"F\", \"M\"] as const\nexport type Gender = typeof genderKeys[number]\n\nexport const locationCharacterKeys = [\n  ...nonTravelerCharacterKeys,\n  \"Traveler\",\n] as const\nexport const travelerElements = [\n  \"anemo\",\n  \"geo\",\n  \"electro\",\n  \"dendro\"\n] as const\nexport const travelerFKeys = [\n  \"TravelerAnemoF\",\n  \"TravelerGeoF\",\n  \"TravelerElectroF\",\n  \"TravelerDendroF\",\n] as const\nexport const travelerMKeys = [\n  \"TravelerAnemoM\",\n  \"TravelerGeoM\",\n  \"TravelerElectroM\",\n  \"TravelerDendroM\",\n] as const\n/**\n * @deprecated\n */\nexport const travelerKeys = [\n  \"TravelerAnemo\",\n  \"TravelerGeo\",\n  \"TravelerElectro\",\n  \"TravelerDendro\",\n] as const\n/**\n * @deprecated\n */\nexport const allCharacterKeys = [\n  ...nonTravelerCharacterKeys,\n  ...travelerKeys\n] as const\n\nexport const allCharacterSheetKeys = [\n  ...nonTravelerCharacterKeys,\n  ...travelerFKeys,\n  ...travelerMKeys,\n]\n\n/**\n * @deprecated\n */\nexport const allWeaponKeys = [\n  ...allWeaponSwordKeys,\n  ...allWeaponClaymoreKeys,\n  ...allWeaponPolearmKeys,\n  ...allWeaponBowKeys,\n  ...allWeaponCatalystKeys,\n] as const\n/**\n * @deprecated\n */\nexport type WeaponKey = WeaponSwordKey | WeaponClaymoreKey | WeaponPoleArmKey | WeaponBowKey | WeaponCatalystKey\n\nexport const characterSpecializedStatKeys = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"dendro_dmg_\"] as const\n\nexport type HitModeKey = typeof allHitModes[number]\nexport type AmpReactionKey = typeof allAmpReactions[number]\nexport type AdditiveReactionKey = typeof allAdditiveReactions[number]\nexport type SetNum = typeof allArtifactSetCount[number]\nexport type ArtifactRarity = typeof allArtifactRarities[number]\n/**\n * @deprecated\n */\nexport type SlotKey = typeof allSlotKeys[number]\n/**\n * @deprecated\n */\nexport type ElementKey = typeof allElements[number]\n/**\n * @deprecated\n */\nexport type ElementKeyWithPhy = typeof allElementsWithPhy[number]\nexport type InfusionAuraElements = typeof allInfusionAuraElements[number]\n/**\n * @deprecated\n */\nexport type ArtifactSetKey = typeof allArtifactSets[number]\n/**\n * @deprecated\n */\nexport type CharacterKey = typeof allCharacterKeys[number]\nexport type CharacterSheetKey = typeof allCharacterSheetKeys[number]\nexport type LocationCharacterKey = typeof locationCharacterKeys[number]\n/**\n * @deprecated\n */\nexport type TravelerKey = typeof travelerKeys[number]\nexport type TravelerElementKey = typeof travelerElements[number]\n/**\n * @deprecated\n */\nexport type WeaponTypeKey = typeof allWeaponTypeKeys[number]\nexport type RollColorKey = typeof allRollColorKeys[number]\n/**\n * @deprecated\n */\nexport type Ascension = typeof allAscension[number]\nexport type Refinement = typeof allRefinement[number]\nexport type CharacterSpecializedStatKey = typeof characterSpecializedStatKeys[number]\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\nexport const allowedAmpReactions: Dict<ElementKey, AmpReactionKey[]> = {\n  pyro: [\"vaporize\", \"melt\"],\n  hydro: [\"vaporize\"],\n  cryo: [\"melt\"],\n  anemo: [\"vaporize\", \"melt\"],\n}\nexport const allowedAdditiveReactions: Dict<ElementKey, AdditiveReactionKey[]> = {\n  dendro: [\"spread\"],\n  electro: [\"aggravate\"],\n  anemo: [\"aggravate\"],\n}\n\nexport type SubstatType = typeof substatType[number]\n\nexport function charKeyToLocCharKey(charKey: CharacterKey): LocationCharacterKey {\n  if (travelerKeys.includes(charKey as TravelerKey)) return \"Traveler\"\n  return charKey as LocationCharacterKey\n}\n\nexport function TravelerToElement(key: TravelerKey, element: TravelerElementKey): TravelerKey {\n  return \"Traveler\" + element.toUpperCase().slice(0, 1) + element.slice(1) as TravelerKey\n}\n\nexport type LocationKey = LocationCharacterKey | \"\"\n\nexport function charKeyToCharName(ck: CharacterKey, gender: Gender): string {\n  return ck.startsWith(\"Traveler\") ? \"Traveler\" + gender : ck\n}\n","import { ArtSetExclusion } from \"../../../../Database/DataManagers/BuildSettingData\";\r\nimport { forEachNodes, mapFormulas } from \"../../../../Formula/internal\";\r\nimport { allOperations, constantFold, OptNode } from \"../../../../Formula/optimization\";\r\nimport { ConstantNode } from \"../../../../Formula/type\";\r\nimport { constant, customRead, max, min, threshold } from \"../../../../Formula/utils\";\r\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from \"../../../../Types/consts\";\r\nimport { assertUnreachable, objectKeyMap, objectMap, range } from \"../../../../Util/Util\";\r\n\r\ntype MicropassOperation = \"reaffine\" | \"pruneArtRange\" | \"pruneNodeRange\" | \"pruneOrder\"\r\nexport function pruneAll(nodes: OptNode[], minimum: number[], arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion, forced: Dict<MicropassOperation, boolean>): { nodes: OptNode[], arts: ArtifactsBySlot } {\r\n  let should = forced\r\n  /** If `key` makes progress, all operations in `value` should be performed */\r\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\r\n    pruneOrder: { pruneNodeRange: true },\r\n    pruneArtRange: { pruneNodeRange: true },\r\n    pruneNodeRange: { reaffine: true },\r\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true }\r\n  }\r\n  let count = 0\r\n  while (Object.values(should).some(x => x) && count++ < 20) {\r\n    if (should.pruneOrder) {\r\n      delete should.pruneOrder\r\n      const newArts = pruneOrder(arts, numTop, exclusion)\r\n      if (arts !== newArts) {\r\n        arts = newArts\r\n        should = { ...should, ...deps.pruneOrder }\r\n      }\r\n    }\r\n    if (should.pruneArtRange) {\r\n      delete should.pruneArtRange\r\n      const newArts = pruneArtRange(nodes, arts, minimum)\r\n      if (arts !== newArts) {\r\n        arts = newArts\r\n        should = { ...should, ...deps.pruneArtRange }\r\n      }\r\n    }\r\n    if (should.pruneNodeRange) {\r\n      delete should.pruneNodeRange\r\n      const newNodes = pruneNodeRange(nodes, arts)\r\n      if (nodes !== newNodes) {\r\n        nodes = newNodes\r\n        should = { ...should, ...deps.pruneNodeRange }\r\n      }\r\n    }\r\n    if (should.reaffine) {\r\n      delete should.reaffine\r\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\r\n      if (nodes !== newNodes || arts !== newArts) {\r\n        nodes = newNodes\r\n        arts = newArts\r\n        should = { ...should, ...deps.reaffine }\r\n      }\r\n    }\r\n  }\r\n  return { nodes, arts }\r\n}\r\n\r\nexport function pruneExclusion(nodes: OptNode[], exclusion: ArtSetExclusion): OptNode[] {\r\n  const maxValues: Dict<keyof typeof exclusion, number> = {}\r\n  for (const [key, e] of Object.entries(exclusion)) {\r\n    if (!e.includes(4)) continue\r\n    maxValues[key] = e.includes(2) ? 1 : 3\r\n  }\r\n  return mapFormulas(nodes, f => f, f => {\r\n    if (f.operation !== \"threshold\") return f\r\n\r\n    const [v, t, pass, fail] = f.operands\r\n    if (v.operation === \"read\" && t.operation === \"const\") {\r\n      const key = v.path[v.path.length - 1], thres = t.value\r\n      if (key in maxValues) {\r\n        const max: number = maxValues[key]\r\n        if (max < thres) return fail\r\n        if (thres === 2 && exclusion[key]!.includes(2))\r\n          return threshold(v, 4, pass, fail)\r\n      }\r\n    }\r\n    return f\r\n  })\r\n}\r\n\r\nfunction reaffine(nodes: OptNode[], arts: ArtifactsBySlot, forceRename = false): { nodes: OptNode[], arts: ArtifactsBySlot } {\r\n  const affineNodes = new Set<OptNode>(), topLevelAffine = new Set<OptNode>()\r\n\r\n  function visit(node: OptNode, isAffine: boolean) {\r\n    if (isAffine) affineNodes.add(node)\r\n    else node.operands.forEach(op => affineNodes.has(op) && topLevelAffine.add(op))\r\n  }\r\n\r\n  const dynKeys = new Set<string>()\r\n\r\n  forEachNodes(nodes, _ => { }, f => {\r\n    const { operation } = f\r\n    switch (operation) {\r\n      case \"read\":\r\n        dynKeys.add(f.path[1])\r\n        visit(f, true)\r\n        break\r\n      case \"add\": visit(f, f.operands.every(op => affineNodes.has(op))); break\r\n      case \"mul\": {\r\n        const nonConst = f.operands.filter(op => op.operation !== \"const\")\r\n        visit(f, nonConst.length === 0 || (nonConst.length === 1 && affineNodes.has(nonConst[0])))\r\n        break\r\n      }\r\n      case \"const\": visit(f, true); break\r\n      case \"res\": case \"threshold\": case \"sum_frac\":\r\n      case \"max\": case \"min\": visit(f, false); break\r\n      default: assertUnreachable(operation)\r\n    }\r\n  })\r\n\r\n  if ([...topLevelAffine].every(({ operation }) => operation === \"read\" || operation === \"const\") &&\r\n    Object.keys(arts.base).length === dynKeys.size)\r\n    return { nodes, arts }\r\n\r\n  let current = -1\r\n  function nextDynKey(): string {\r\n    while (dynKeys.has(`${++current}`));\r\n    return `${current}`\r\n  }\r\n\r\n  nodes.forEach(node => affineNodes.has(node) && topLevelAffine.add(node))\r\n  const affine = [...topLevelAffine].filter(f => f.operation !== \"const\")\r\n  const affineMap = new Map(affine.map(node => [node,\r\n    !forceRename && node.operation === \"read\" && node.path[0] === \"dyn\"\r\n      ? node\r\n      : { ...customRead([\"dyn\", `${nextDynKey()}`]), accu: \"add\" as const }]))\r\n  nodes = mapFormulas(nodes, f => affineMap.get(f) ?? f, f => f)\r\n\r\n  function reaffineArt(stat: DynStat): DynStat {\r\n    const values = constantFold([...affineMap.keys()], {\r\n      dyn: objectMap(stat, (value) => constant(value))\r\n    } as any, _ => true)\r\n    return Object.fromEntries([...affineMap.values()].map((v, i) => [v.path[1], (values[i] as ConstantNode<number>).value]))\r\n  }\r\n  const result = {\r\n    nodes, arts: {\r\n      base: reaffineArt(arts.base),\r\n      values: objectKeyMap(allSlotKeys, slot =>\r\n        arts.values[slot].map(({ id, set, values }) => ({ id, set, values: reaffineArt(values) })))\r\n    }\r\n  }\r\n  const offsets = Object.entries(reaffineArt({}))\r\n  for (const arts of Object.values(result.arts.values))\r\n    for (const { values } of arts)\r\n      for (const [key, baseValue] of offsets)\r\n        values[key] -= baseValue\r\n  return result\r\n}\r\n/** Remove artifacts that cannot be in top `numTop` builds */\r\nfunction pruneOrder(arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion): ArtifactsBySlot {\r\n  let progress = false\r\n  /**\r\n   * Note:\r\n   * This function assumes that every base (reaffined) stats are monotonically increasing. That is, artifacts\r\n   * with higher stats are better. This remains true as long as the main and substats are in increasing. Set\r\n   * effects that decrease enemy resistance (which is monotonically decreasing) does not violate this assumption\r\n   * as set effects are not handled here.\r\n   */\r\n  const allowRainbow = !exclusion.rainbow?.length, keys = Object.keys(arts.base)\r\n  const noSwitchIn = new Set(Object.entries(exclusion).filter(([_, v]) => v.length).map(([k]) => k) as ArtifactSetKey[])\r\n  const noSwitchOut = new Set(Object.entries(exclusion).filter(([_, v]) => v.includes(2) && !v.includes(4)).map(([k]) => k) as ArtifactSetKey[])\r\n  const values = objectKeyMap(allSlotKeys, slot => {\r\n    const list = arts.values[slot]\r\n    const newList = list.filter(art => {\r\n      let count = 0\r\n      return list.every(other => {\r\n        const otherBetterEqual = keys.every(k => (other.values[k] ?? 0) >= (art.values[k] ?? 0))\r\n        const otherMaybeBetter = keys.some(k => (other.values[k] ?? 0) > (art.values[k] ?? 0))\r\n        const otherBetter = otherBetterEqual && (otherMaybeBetter || other.id > art.id)\r\n        const canSwitch = (allowRainbow && !noSwitchIn.has(other.set!) && !noSwitchOut.has(art.set!)) || art.set === other.set\r\n        if (otherBetter && canSwitch) count++\r\n        return count < numTop\r\n      })\r\n    })\r\n    if (newList.length !== list.length) progress = true\r\n    return newList\r\n  })\r\n  return progress ? { base: arts.base, values } : arts\r\n}\r\n/** Remove artifacts that cannot reach `minimum` in any build */\r\nfunction pruneArtRange(nodes: OptNode[], arts: ArtifactsBySlot, minimum: number[]): ArtifactsBySlot {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  const wrap = { arts }\r\n  while (true) {\r\n    const artRanges = objectKeyMap(allSlotKeys, slot => computeArtRange(wrap.arts.values[slot]))\r\n    const otherArtRanges = objectKeyMap(allSlotKeys, key =>\r\n      addArtRange(Object.entries(artRanges).map(a => a[0] === key ? baseRange : a[1]).filter(x => x)))\r\n\r\n    let progress = false\r\n    const values = objectKeyMap(allSlotKeys, slot => {\r\n      const result = wrap.arts.values[slot].filter(art => {\r\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\r\n        const newRange = computeNodeRange(nodes, read)\r\n        return nodes.every((node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity))\r\n      })\r\n      if (result.length !== wrap.arts.values[slot].length)\r\n        progress = true\r\n      return result\r\n    })\r\n    if (!progress) break\r\n    wrap.arts = { base: wrap.arts.base, values }\r\n  }\r\n  return wrap.arts\r\n}\r\nfunction pruneNodeRange(nodes: OptNode[], arts: ArtifactsBySlot): OptNode[] {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  const reads = addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\r\n  const nodeRange = computeNodeRange(nodes, reads)\r\n\r\n  return mapFormulas(nodes, f => {\r\n    {\r\n      const { min, max } = nodeRange.get(f)!\r\n      if (min === max) return constant(min)\r\n    }\r\n    const { operation } = f\r\n    const operandRanges = f.operands.map(x => nodeRange.get(x)!)\r\n    switch (operation) {\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = operandRanges\r\n        if (value.min >= threshold.max) return f.operands[2]\r\n        else if (value.max < threshold.min) return f.operands[3]\r\n        if (pass.max === pass.min &&\r\n          fail.max === fail.min &&\r\n          pass.min === fail.min && isFinite(pass.min))\r\n          return constant(pass.max)\r\n        break\r\n      }\r\n      case \"min\": {\r\n        const newOperands = f.operands.filter((_, i) => {\r\n          const op1 = operandRanges[i]\r\n          return operandRanges.every((op2, j) => op1.min <= op2.max)\r\n        })\r\n        if (newOperands.length < operandRanges.length) return min(...newOperands)\r\n        break\r\n      }\r\n      case \"max\": {\r\n        const newOperands = f.operands.filter((_, i) => {\r\n          const op1 = operandRanges[i]\r\n          return operandRanges.every(op2 => op1.max >= op2.min)\r\n        })\r\n        if (newOperands.length < operandRanges.length) return max(...newOperands)\r\n        break\r\n      }\r\n    }\r\n    return f\r\n  }, f => f)\r\n}\r\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\r\n  const result: DynMinMax = {}\r\n  ranges.forEach(range => {\r\n    Object.entries(range).forEach(([key, value]) => {\r\n      if (result[key]) {\r\n        result[key].min += value.min\r\n        result[key].max += value.max\r\n      } else result[key] = { ...value }\r\n    })\r\n  })\r\n  return result\r\n}\r\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\r\n  const result: DynMinMax = {}\r\n  if (arts.length) {\r\n    Object.keys(arts[0].values)\r\n      .filter(key => arts.every(art => art.values[key]))\r\n      .forEach(key => result[key] = { min: arts[0].values[key], max: arts[0].values[key] })\r\n    arts.forEach(({ values }) => {\r\n      for (const [key, value] of Object.entries(values)) {\r\n        if (!result[key]) result[key] = { min: 0, max: value }\r\n        else {\r\n          if (result[key].max < value) result[key].max = value\r\n          if (result[key].min > value) result[key].min = value\r\n        }\r\n      }\r\n    })\r\n  }\r\n  return result\r\n}\r\nexport function computeFullArtRange(arts: ArtifactsBySlot): DynMinMax {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  return addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\r\n}\r\nexport function computeNodeRange(nodes: OptNode[], reads: DynMinMax): Map<OptNode, MinMax> {\r\n  const range = new Map<OptNode, MinMax>()\r\n\r\n  forEachNodes(nodes, _ => { }, f => {\r\n    const { operation } = f\r\n    const operands = f.operands.map(op => range.get(op)!)\r\n    let current: MinMax\r\n    switch (operation) {\r\n      case \"read\":\r\n        if (f.path[0] !== \"dyn\")\r\n          throw new Error(`Found non-dyn path ${f.path} while computing range`)\r\n        current = reads[f.path[1]] ?? { min: 0, max: 0 }\r\n        break\r\n      case \"const\": current = computeMinMax([f.value]); break\r\n      case \"add\": case \"min\": case \"max\":\r\n        current = {\r\n          min: allOperations[operation](operands.map(x => x.min)),\r\n          max: allOperations[operation](operands.map(x => x.max)),\r\n        }; break\r\n      case \"res\": current = {\r\n        min: allOperations[operation]([operands[0].max]),\r\n        max: allOperations[operation]([operands[0].min]),\r\n      }; break\r\n      case \"mul\": current = operands.reduce((accu, current) => computeMinMax([\r\n        accu.min * current.min, accu.min * current.max,\r\n        accu.max * current.min, accu.max * current.max,\r\n      ])); break\r\n      case \"threshold\":\r\n        if (operands[0].min >= operands[1].max) current = operands[2]\r\n        else if (operands[0].max < operands[1].min) current = operands[3]\r\n        else current = computeMinMax([], [operands[2], operands[3]])\r\n        break\r\n      case \"sum_frac\": {\r\n        const [x, c] = operands, sum = { min: x.min + c.min, max: x.max + c.max }\r\n        if (sum.min <= 0 && sum.max >= 0)\r\n          current = (x.min <= 0 && x.max >= 0) ? { min: NaN, max: NaN } : { min: -Infinity, max: Infinity }\r\n        else\r\n          // TODO: Check this\r\n          current = computeMinMax([\r\n            x.min / sum.min, x.min / sum.max,\r\n            x.max / sum.min, x.max / sum.max\r\n          ])\r\n        break\r\n      }\r\n      default: assertUnreachable(operation)\r\n    }\r\n    range.set(f, current)\r\n  })\r\n  return range\r\n}\r\nfunction computeMinMax(values: readonly number[], minMaxes: readonly MinMax[] = []): MinMax {\r\n  const max = Math.max(...values, ...minMaxes.map(x => x.max))\r\n  const min = Math.min(...values, ...minMaxes.map(x => x.min))\r\n  return { min, max }\r\n}\r\n\r\nexport function filterArts(arts: ArtifactsBySlot, filters: RequestFilter): ArtifactsBySlot {\r\n  return {\r\n    base: arts.base,\r\n    values: objectKeyMap(allSlotKeys, slot => {\r\n      const filter = filters[slot]\r\n      switch (filter.kind) {\r\n        case \"id\": return arts.values[slot].filter(art => filter.ids.has(art.id))\r\n        case \"exclude\": return arts.values[slot].filter(art => !filter.sets.has(art.set!))\r\n        case \"required\": return arts.values[slot].filter(art => filter.sets.has(art.set!))\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\r\n  return builds.flatMap(x => x).sort((a, b) => b.value - a.value).slice(0, maxNum)\r\n}\r\nexport function mergePlot(plots: PlotData[]): PlotData {\r\n  let scale = 0.01, reductionScaling = 2, maxCount = 1500\r\n  let keys = new Set(plots.flatMap(x => Object.values(x).map(v => Math.round(v.plot! / scale))))\r\n  while (keys.size > maxCount) {\r\n    scale *= reductionScaling\r\n    keys = new Set([...keys].map(key => Math.round(key / reductionScaling)))\r\n  }\r\n  const result: PlotData = {}\r\n  for (const plot of plots)\r\n    for (const build of Object.values(plot)) {\r\n      const x = Math.round(build.plot! / scale) * scale\r\n      if (!result[x] || result[x]!.value < build.value)\r\n        result[x] = build\r\n    }\r\n  return result\r\n}\r\n\r\nexport function countBuilds(arts: ArtifactsBySlot): number {\r\n  return allSlotKeys.reduce((_count, slot) => _count * arts.values[slot].length, 1)\r\n}\r\n\r\n\r\nexport function* filterFeasiblePerm(filters: Iterable<RequestFilter>, _artSets: ArtifactsBySlot): Iterable<RequestFilter> {\r\n  const artSets = objectMap(_artSets.values, values => new Set(values.map(v => v.set)))\r\n  filter_loop: for (const filter of filters) {\r\n    for (const [slot, f] of Object.entries(filter)) {\r\n      const available = artSets[slot]!\r\n      switch (f.kind) {\r\n        case \"required\": if ([...f.sets].every(s => !available.has(s))) continue filter_loop; break\r\n        case \"exclude\": if ([...available].every(s => f.sets.has(s!))) continue filter_loop; break\r\n        case \"id\": break\r\n      }\r\n    }\r\n    yield filter\r\n  }\r\n}\r\nexport function exclusionToAllowed(exclusion: number[] | undefined): Set<number> {\r\n  return new Set(exclusion?.includes(2)\r\n    ? exclusion.includes(4) ? [0, 1] : [0, 1, 4, 5]\r\n    : exclusion?.includes(4) ? [0, 1, 2, 3] : [0, 1, 2, 3, 4, 5])\r\n}\r\n/** A *disjoint* set of `RequestFilter` satisfying the exclusion rules */\r\nexport function* artSetPerm(exclusion: ArtSetExclusion, _artSets: ArtifactSetKey[]): Iterable<RequestFilter> {\r\n  /**\r\n   * This generation algorithm is separated into two parts:\r\n   * - \"Shape\" generation\r\n   *   - It first generates all build \"shapes\", e.g., AABBC, ABBCD\r\n   *   - It then filters the generated shapes according to the rainbow exclusion, e.g., removes ABBCD if excluding 3 rainbows\r\n   *   - It then merges the remaining shapes into wildcards, e.g. AABAA + AABAB + AABAC => AABA*\r\n   * - Shape filling\r\n   *   - From the given shapes, it tries to fill in all non-rainbow slots, e.g., slots A and B of AABBC, with actual artifacts\r\n   *   - It then fills the rainbow slots, e.g., slot C of AABBC while ensuring the exclusion rule of each sets\r\n   */\r\n  const artSets = [...new Set(_artSets)], allowedRainbows = exclusionToAllowed(exclusion.rainbow)\r\n  let shapes: number[][] = []\r\n  function populateShapes(current: number[], list: Set<number>, rainbows: number[]) {\r\n    if (current.length === 5) {\r\n      if (allowedRainbows.has(rainbows.length))\r\n        shapes.push(current)\r\n      return\r\n    }\r\n    for (const i of list) populateShapes([...current, i], list, rainbows.filter(j => j !== i))\r\n    populateShapes([...current, current.length], new Set([...list, current.length]), [...rainbows, current.length])\r\n  }\r\n  populateShapes([0], new Set([0]), [0])\r\n  function indexOfShape(shape: number[], replacing: number) {\r\n    if (range(replacing + 1, 4).some(i => shape[i] !== 5))\r\n      return undefined\r\n    shape = [...shape]\r\n    shape[replacing] = 5\r\n    return shape.reduce((a, b) => a * 6 + b, 0)\r\n  }\r\n  for (let replacing = 4; replacing >= 0; replacing--) {\r\n    const required: Map<number, number> = new Map()\r\n    for (const shape of shapes) {\r\n      const id = indexOfShape(shape, replacing)\r\n      if (id === undefined) continue\r\n      required.set(id, (required.get(id) ?? new Set(shape.slice(0, replacing)).size + 1) - 1)\r\n    }\r\n    for (const [id, remaining] of required.entries()) {\r\n      if (remaining === 0) {\r\n        const shape = [...shapes.find(shape => indexOfShape(shape, replacing) === id)!]\r\n        shape[replacing] = 5\r\n        shapes = shapes.filter(shape => indexOfShape(shape, replacing) !== id)\r\n        shapes.push(shape)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Shapes are now calculated and merged, proceed to fill in the sets\r\n\r\n  const noFilter = { kind: \"exclude\" as const, sets: new Set<ArtifactSetKey>() }\r\n  const result: RequestFilter = objectKeyMap(allSlotKeys, _ => noFilter)\r\n\r\n  const counts = { ...objectMap(exclusion, _ => 0), ...objectKeyMap(artSets, _ => 0) }\r\n  const allowedCounts = objectMap(exclusion, exclusionToAllowed)\r\n\r\n  function* check(shape: number[]) {\r\n    const used: Set<ArtifactSetKey> = new Set()\r\n    let groupped: number[][] = [], rainbows: number[] = []\r\n    for (const i of shape) {\r\n      groupped.push([])\r\n      if (i === 5) rainbows.push(groupped.length - 1)\r\n      else groupped[i].push(groupped.length - 1)\r\n    }\r\n    groupped = groupped.filter(v => v.length).sort((a, b) => b.length - a.length)\r\n    let usableRainbows = rainbows.length\r\n\r\n    // Inception.. because js doesn't like functions inside a for-loop\r\n    function* check(i: number) {\r\n      if (i === groupped.length)\r\n        return yield* check_free(0)\r\n\r\n      for (const set of artSets) {\r\n        if (used.has(set)) continue\r\n        const length = groupped[i].length, allowedSet = allowedCounts[set]\r\n        let requiredRainbows = 0\r\n\r\n        if (allowedSet && !allowedSet.has(length)) {\r\n          // Look ahead and see if we have enough rainbows to fill to the next `allowedSet` if we use the current set\r\n          requiredRainbows = (range(length + 1, 5).find(l => allowedSet.has(l)) ?? 6) - length\r\n          if (requiredRainbows > usableRainbows) continue // Not enough rainbows. Next..\r\n        }\r\n\r\n        used.add(set)\r\n        counts[set] = groupped[i].length\r\n        groupped[i].forEach(j => result[allSlotKeys[j]] = { kind: \"required\", sets: new Set([set]) })\r\n        usableRainbows -= requiredRainbows\r\n\r\n        yield* check(i + 1)\r\n\r\n        usableRainbows += requiredRainbows\r\n        counts[set] = 0\r\n        used.delete(set)\r\n      }\r\n    }\r\n    // We separate filling rainbow slots from groupped slots because it has an entirely\r\n    // different set of rules regarding what can be filled and what states to be kept.\r\n    function* check_free(i: number) {\r\n      const remaining = rainbows.length - i, isolated: ArtifactSetKey[] = [], missing: ArtifactSetKey[] = [], rejected: ArtifactSetKey[] = []\r\n      let required = 0\r\n      for (const set of artSets) {\r\n        const allowedSet = allowedCounts[set], count = counts[set]\r\n        if (!allowedSet) continue\r\n        if (range(1, remaining).every(j => !allowedSet.has(count + j))) rejected.push(set)\r\n        else if (!allowedSet.has(count)) {\r\n          required += [...allowedSet].find(x => x > count)! - count\r\n          missing.push(set)\r\n        }\r\n        else if (range(0, remaining).some(j => !allowedSet.has(count + j))) isolated.push(set)\r\n      }\r\n      if (required > remaining) return\r\n      if (i === rainbows.length) {\r\n        yield { ...result }\r\n        return\r\n      }\r\n      if (required === remaining) {\r\n        for (const set of missing) {\r\n          counts[set]++\r\n          result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\r\n          yield* check_free(i + 1)\r\n          counts[set]--\r\n        }\r\n        return\r\n      }\r\n      for (const set of [...isolated, ...missing]) {\r\n        counts[set]++\r\n        result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\r\n        yield* check_free(i + 1)\r\n        counts[set]--\r\n      }\r\n      result[allSlotKeys[rainbows[i]]] = { kind: \"exclude\", sets: new Set([...missing, ...rejected, ...isolated]) }\r\n      yield* check_free(i + 1)\r\n    }\r\n    yield* check(0)\r\n  }\r\n  for (const shape of shapes) yield* check(shape)\r\n}\r\n\r\nexport type RequestFilter = StrictDict<SlotKey,\r\n  { kind: \"required\", sets: Set<ArtifactSetKey> } |\r\n  { kind: \"exclude\", sets: Set<ArtifactSetKey> } |\r\n  { kind: \"id\", ids: Set<string> }\r\n>\r\n\r\nexport type DynStat = { [key in string]: number }\r\nexport type ArtifactBuildData = {\r\n  id: string\r\n  set?: ArtifactSetKey\r\n  values: DynStat\r\n}\r\nexport type ArtifactsBySlot = { base: DynStat, values: StrictDict<SlotKey, ArtifactBuildData[]> }\r\n\r\nexport type PlotData = Dict<number, Build>\r\nexport interface Build {\r\n  value: number\r\n  plot?: number\r\n  artifactIds: string[]\r\n}\r\n\r\nexport type DynMinMax = { [key in string]: MinMax }\r\nexport type MinMax = { min: number, max: number }\r\n","import { customMapFormula, forEachNodes } from \"../../../../Formula/internal\";\nimport { allOperations, OptNode } from \"../../../../Formula/optimization\";\nimport { ConstantNode } from \"../../../../Formula/type\";\nimport { prod, threshold } from \"../../../../Formula/utils\";\nimport { SlotKey } from \"../../../../Types/consts\";\nimport { assertUnreachable, objectKeyValueMap, objectMap } from \"../../../../Util/Util\";\nimport type { InterimResult, Setup, SplitWorker } from \"./BackgroundWorker\";\nimport { ArtifactBuildData, ArtifactsBySlot, computeFullArtRange, computeNodeRange, countBuilds, DynStat, filterArts, MinMax, pruneAll, RequestFilter } from \"./common\";\n\ntype Approximation = {\n  base: number,\n  /** optimization target contribution from a given artifact (id) */\n  conts: StrictDict<string, number>\n}\ntype Filter = {\n  nodes: OptNode[], arts: ArtifactsBySlot\n  /**\n   * The contribution of each artifact to the optimization target. The (over)estimated\n   * optimization target value is the sum of contributions of all artifacts in the build.\n   */\n  approxs: Approximation[], maxConts: Record<SlotKey, number>[]\n  /** How many times has this filter been splitted */\n  age: number\n  /** Total number of builds in this filter */\n  count: number\n  /** Whether or not this filter is in a valid (calculated) state */\n  calculated?: boolean\n}\nexport class BNBSplitWorker implements SplitWorker {\n  min: number[]\n  nodes: OptNode[]\n  arts: ArtifactsBySlot\n  maxBuilds: number\n\n  /**\n   * Filters are not neccessarily in a valid state, i.e., \"calculated\".\n   * We amortize the calculation to 1-per-split so that the calculation\n   * overhead doesn't lead to lag.\n   */\n  filters: Filter[] = []\n  interim: InterimResult | undefined\n  firstUncalculated = 0\n\n  callback: (interim: InterimResult) => void\n\n  constructor({ arts, optimizationTarget, filters, maxBuilds }: Setup, callback: (interim: InterimResult) => void) {\n    this.arts = arts\n    this.min = [-Infinity, ...filters.map(x => x.min)]\n    this.nodes = [optimizationTarget, ...filters.map(x => x.value)]\n    this.callback = callback\n    this.maxBuilds = maxBuilds\n\n    // make sure we can approximate it\n    linearUpperBound(this.nodes, arts)\n  }\n\n  addFilter(filter: RequestFilter): void {\n    const arts = filterArts(this.arts, filter), count = countBuilds(arts)\n    if (count)\n      this.filters.push({ nodes: this.nodes, arts, maxConts: [], approxs: [], age: 0, count })\n  }\n  split(newThreshold: number, minCount: number): RequestFilter | undefined {\n    if (newThreshold > this.min[0]) {\n      this.min[0] = newThreshold\n      // All calculations become stale\n      this.firstUncalculated = 0\n      this.filters.forEach(filter => delete filter.calculated)\n    }\n    if (this.firstUncalculated < this.filters.length)\n      this.calculateFilter(this.firstUncalculated++) // Amortize the filter calculation to 1-per-split\n\n    while (this.filters.length) {\n      const filter = this.getApproxFilter(), { arts, count } = filter\n      this.reportInterim(false)\n      if (!count) continue\n\n      if (count <= minCount) {\n        this.reportInterim(true)\n        return objectMap(arts.values, arts => ({ kind: \"id\" as const, ids: new Set(arts.map(art => art.id)) }))\n      }\n      this.splitOldFilter(filter)\n    }\n    this.reportInterim(true)\n    return undefined\n  }\n\n  reportInterim(forced = false) {\n    if (this.interim && (this.interim.skipped > 1000000 || forced === true)) {\n      this.callback(this.interim)\n      this.interim = undefined\n    }\n  }\n\n  splitOldFilter({ nodes, arts, approxs, age }: Filter) {\n    /**\n     * Split the artifacts in each slot into high/low main (index 0) contribution along 1/3 of the\n     * contribution range. If the main contribution of a slot is in range 500-2000, the the high-\n     * contibution artifact has contribution of at least 1500, and the rest are low-contribution.\n     */\n    const splitted = objectMap(arts.values, arts => {\n      const remaining = arts.map((art) => ({ art, cont: approxs[0].conts[art.id] }))\n        .sort(({ cont: c1 }, { cont: c2 }) => c2 - c1)\n      const minCont = remaining[remaining.length - 1]?.cont ?? 0\n      let contCutoff = remaining.reduce((accu, { cont }) => accu + cont, -minCont * remaining.length) / 3\n\n      const index = Math.max(1, remaining.findIndex(({ cont }) => (contCutoff -= cont - minCont) <= 0))\n      const lowArts = remaining.splice(index).map(({ art }) => art), highArts = remaining.map(({ art }) => art)\n      return {\n        high: { arts: highArts, maxConts: approxs.map(approx => maxContribution(highArts, approx)), },\n        low: { arts: lowArts, maxConts: approxs.map(approx => maxContribution(lowArts, approx)) },\n      }\n    })\n    const remaining = Object.keys(splitted), { filters } = this\n    const current: StrictDict<SlotKey, ArtifactBuildData[]> = {} as any\n    const currentCont: StrictDict<SlotKey, number[]> = {} as any\n    function partialSplit(count: number) {\n      if (!remaining.length) {\n        const maxConts = approxs.map((_, i) => objectMap(currentCont, val => val[i]))\n        const currentArts = { base: arts.base, values: { ...current } }\n        filters.push({ nodes, arts: currentArts, maxConts, approxs, age: age + 1, count })\n        return\n      }\n      const slot = remaining.pop()!, { high, low } = splitted[slot]\n      if (low.arts.length) {\n        current[slot] = low.arts\n        currentCont[slot] = low.maxConts\n        partialSplit(count * low.arts.length)\n      }\n      if (high.arts.length) {\n        current[slot] = high.arts\n        currentCont[slot] = high.maxConts\n        partialSplit(count * high.arts.length)\n      }\n      remaining.push(slot)\n    }\n    partialSplit(1)\n  }\n\n  /** *Precondition*: `this.filters` must not be empty */\n  getApproxFilter(): Filter {\n    this.calculateFilter(this.filters.length - 1)\n    if (this.firstUncalculated > this.filters.length)\n      this.firstUncalculated = this.filters.length\n    return this.filters.pop()!\n  }\n  /** Update calculate on filter at index `i` if not done so already */\n  calculateFilter(i: number): void {\n    let { nodes, arts, maxConts, approxs, age, count: oldCount, calculated } = this.filters[i]\n    if (calculated) return\n    if (age < 3 || age % 5 === 2) { // Make sure the condition includes initial filter `age === 0`\n      // Either the filter is so early that we can get a good cutoff, or the problem has\n      // gotten small enough that the old approximation becomes inaccurate\n      ({ nodes, arts } = pruneAll(nodes, this.min, arts, this.maxBuilds, {}, { pruneNodeRange: true }))\n      if (Object.values(arts.values).every(x => x.length)) {\n        approxs = approximation(nodes, arts)\n        maxConts = approxs.map(approx => objectMap(arts.values, val => maxContribution(val, approx)))\n      }\n    }\n    // Removing artifacts that doesn't meet the required opt target contributions.\n    //\n    // We could actually loop `newValues` computation if the removed artifacts have\n    // the highest contribution in one of the target node as the removal will raise\n    // the required contribution even further. However, once is generally enough.\n    const leadingConts = maxConts.map((cont, i) => Object.values(cont)\n      .reduce((accu, val) => accu + val, approxs[i].base - this.min[i]))\n    const newValues = objectMap(arts.values, (arts, slot) => {\n      const requiredConts = leadingConts.map((lc, i) => maxConts[i][slot] - lc)\n      return arts.filter(({ id }) => approxs.every(({ conts }, i) => conts[id] >= requiredConts[i]))\n    })\n    arts = { base: arts.base, values: newValues }\n    const newCount = countBuilds(arts)\n    if (newCount !== oldCount)\n      if (this.interim) this.interim.skipped += oldCount - newCount\n      else this.interim = { command: \"interim\", buildValues: undefined, tested: 0, failed: 0, skipped: oldCount - newCount }\n    this.filters[i] = { nodes, arts, maxConts, approxs, age, count: newCount, calculated: true }\n  }\n}\n\nfunction maxContribution(arts: ArtifactBuildData[], approximation: Approximation): number {\n  return Math.max(...arts.map(({ id }) => approximation.conts[id]!))\n}\nfunction approximation(nodes: OptNode[], arts: ArtifactsBySlot): Approximation[] {\n  return linearUpperBound(nodes, arts).map(weight => ({\n    base: dot(arts.base, weight, weight.$c),\n    conts: objectKeyValueMap(Object.values(arts.values).flat(),\n      data => [data.id, dot(data.values, weight, 0)])\n  }))\n}\nfunction dot(values: DynStat, lin: DynStat, c: number): number {\n  return Object.entries(values).reduce((accu, [k, v]) => accu + (lin[k] ?? 0) * v, c)\n}\n\nfunction weightedSum(...entries: readonly (readonly [number, Linear])[]): Linear\nfunction weightedSum(...entries: readonly (readonly [number, DynStat])[]): DynStat\nfunction weightedSum(...entries: readonly (readonly [number, DynStat])[]): DynStat {\n  const result = {}\n  for (const [weight, entry] of entries)\n    for (const [k, v] of Object.entries(entry))\n      result[k] = (result[k] ?? 0) + weight * v\n  return result\n}\nexport type Linear = DynStat & { $c: number }\n/** Compute a linear upper bound of `nodes` */\nexport function linearUpperBound(nodes: OptNode[], arts: ArtifactsBySlot): Linear[] {\n  const cents = weightedSum([1, arts.base], ...Object.values(arts.values).map(arts =>\n    [1 / arts.length, weightedSum(...arts.map(art => [1, art.values] as const))] as const))\n  const getCent = (lin: Linear) => dot(cents, lin, lin.$c)\n\n  const minMaxes = new Map<OptNode, MinMax>()\n  forEachNodes(nodes, f => {\n    const { operation } = f\n    if (operation === \"mul\") minMaxes.set(f, { min: NaN, max: NaN })\n    switch (operation) {\n      case \"mul\": case \"min\": case \"max\": case \"threshold\": case \"res\": case \"sum_frac\":\n        f.operands.forEach(op => minMaxes.set(op, { min: NaN, max: NaN })); break\n    }\n  }, _ => _)\n  const nodeRanges = computeNodeRange([...minMaxes.keys()], computeFullArtRange(arts))\n  for (const [node, minMax] of nodeRanges.entries()) minMaxes.set(node, minMax)\n\n  function slopePoint(slope: number, x0: number, y0: number, lin: Linear): Linear {\n    return weightedSum([1, { $c: y0 - slope * x0 }], [slope, lin])\n  }\n  function interpolate(x0: number, y0: number, x1: number, y1: number, lin: Linear, upper: boolean): Linear {\n    if (Math.abs(x0 - x1) < 1e-10)\n      return { $c: upper ? Math.max(y0, y1) : Math.min(y0, y1) }\n    return slopePoint((y1 - y0) / (x1 - x0), x0, y0, lin)\n  }\n\n  const upper = \"u\", lower = \"l\", outward = \"o\"\n  type Context = typeof upper | typeof lower | typeof outward\n  return customMapFormula<Context, Linear, OptNode>(nodes, upper, (f, context, _map) => {\n    const { operation } = f\n    const map: (op: OptNode, c?: Context) => Linear = (op, c = context) => _map(op, c)\n    const oppositeContext = context === upper ? lower : upper\n\n    if (context === outward) {\n      const { min, max } = minMaxes.get(f)!\n      if (min < 0 && max > 0)\n        // TODO: We can bypass this restriction by converting `f`\n        // to `min(f, 0)` or `max(f, 0)` as appropriate\n        throw new PolyError(\"Zero-crossing\", operation)\n      return map(f, max <= 0 ? lower : upper)\n    }\n\n    switch (operation) {\n      case \"const\": return { $c: f.value }\n      case \"read\": return { $c: 0, [f.path[1]]: 1 }\n      case \"add\": return weightedSum(...f.operands.map(op => [1, map(op)] as const))\n      case \"min\": case \"max\": {\n        const op = allOperations[operation]\n        const xs = f.operands.filter(op => op.operation !== \"const\"), [xOp] = xs\n        if (xs.length !== 1) throw new PolyError(\"Multivariate\", operation)\n\n        const x = map(xOp), c = op(f.operands.filter(op => op.operation === \"const\")\n          .map(c => (c as ConstantNode<number>).value))\n        if ((operation === \"max\" && context === lower) || (operation === \"min\" && context === upper))\n          return x\n        const { min, max } = minMaxes.get(xOp)!, yMin = op([min, c]), yMax = op([max, c])\n        return interpolate(min, yMin, max, yMax, x, context === upper)\n      }\n      case \"res\": {\n        if (context !== upper) throw new PolyError(\"Unsupported direction\", operation)\n        const op = allOperations[operation]\n        const [xOp] = f.operands, { min, max } = minMaxes.get(xOp)!\n        const x = map(xOp, oppositeContext)\n        // Linear region 1 - base/2 or concave region with peak at base = 0\n        if (min < 0 && max < 1.75) return weightedSum([1, { $c: 1 }], [-0.5, x])\n        // Clamp `min` to guarantee upper bound\n        else return interpolate(min, op([min]), max, op([max]), x, context === upper)\n      }\n      case \"sum_frac\": {\n        if (context !== upper) throw new PolyError(\"Unsupported direction\", operation)\n        const [xOp, cOp] = f.operands\n        if (cOp.operation !== \"const\") throw new PolyError(\"Non-constant node\", operation)\n        const x = map(xOp), c = cOp.value, { min, max } = minMaxes.get(xOp)!\n        const loc = Math.sqrt((min + c) * (max + c))\n        if (min <= -c) throw new PolyError(\"Unsupported pattern\", operation)\n        return slopePoint(c / (c + loc) / (c + loc), loc, loc / (loc + c), x)\n      }\n      case \"threshold\": {\n        const [vOp, tOp, pOp, fOp] = f.operands\n        if (fOp.operation !== \"const\" || tOp.operation !== \"const\")\n          throw new PolyError(\"Non-constant node\", operation)\n        if (pOp.operation !== \"const\") {\n          if (fOp.value !== 0) throw new PolyError(\"Unsupported pattern\", operation)\n\n          const threshOp = threshold(vOp, tOp, 1, fOp), mulOp = prod(threshOp, pOp)\n          // Populate `minMaxes` to ensure consistency\n          const { min, max } = minMaxes.get(pOp)!\n          minMaxes.set(threshOp, { min: 0, max: 1 })\n          minMaxes.set(mulOp, { min: Math.min(min, 0), max: Math.max(max, 0) })\n          return map(mulOp)\n        }\n        const { min, max } = minMaxes.get(vOp)!\n        const thresh = tOp.value, pass = pOp.value, fail = fOp.value\n        const isFirstHalf = (pass > fail) === (context === upper)\n\n        const v = map(vOp, pass > fail ? context : oppositeContext)\n        const yThresh = isFirstHalf ? pass : fail\n        const slope = (pass - fail) / (isFirstHalf ? (thresh - min) : (max - thresh))\n        return slopePoint(slope, thresh, yThresh, v)\n      }\n      case \"mul\": {\n        const { min, max } = minMaxes.get(f)!\n        if (min < 0 && max > 0) throw new PolyError(\"Zero-crossing\", operation)\n        if ((min < 0 && context !== lower) || (max > 0 && context !== upper))\n          throw new PolyError(\"Unsupported direction\", operation)\n\n        // For x/a >= 0, sum{x/a} <= n, and k > 0, it follows that\n        //\n        //   k prod{x} <= k/n prod{a} sum{x/a}\n        //\n        // This follows from AM-GM; prod{x/a} <= (sum{x/a}/n)^n <= sum{x/a}/n\n        const operands = [...f.operands], flattenedOperands: OptNode[] = []\n        let coeff = 1\n        while (operands.length) {\n          const operand = operands.pop()!\n          if (operand.operation === \"mul\") operands.push(...operand.operands)\n          else if (operand.operation === \"const\") coeff *= operand.value;\n          else flattenedOperands.push(operand)\n        }\n        const lins = flattenedOperands.map(op => map(op, outward))\n        const ranges = flattenedOperands.map(op => minMaxes.get(op)!)\n\n        // Set `a` to the centroid of `x`, normalizing so that `sum{x/a} = n`\n        const cents = lins.map(getCent)\n        const factor = cents.reduce((accu, cent, i) => accu + (cent >= 0 ? ranges[i].max : ranges[i].min) / cent, 0)\n        const prod = cents.reduce((a, b) => a * factor * b / lins.length, coeff / factor)\n        return weightedSum(...lins.map((op, i) => [prod / cents[i], op] as const))\n      }\n\n      default: assertUnreachable(operation)\n    }\n  })\n}\nclass PolyError extends Error {\n  constructor(cause: string, operation: string) {\n    super(`Found ${cause} in ${operation} node when generating polynomial upper bound`)\n  }\n}\n","import { optimize, OptNode, precompute } from '../../../../Formula/optimization';\nimport type { InterimResult, Setup } from './BackgroundWorker';\nimport { ArtifactBuildData, ArtifactsBySlot, Build, countBuilds, filterArts, mergePlot, PlotData, pruneAll, RequestFilter } from './common';\n\nexport class ComputeWorker {\n  builds: Build[] = []\n  buildValues: number[] | undefined = undefined\n  plotData: PlotData | undefined\n  threshold = -Infinity\n  maxBuilds: number\n  min: number[]\n\n  arts: ArtifactsBySlot\n  nodes: OptNode[]\n\n  callback: (interim: InterimResult) => void\n\n  constructor({ arts, optimizationTarget, filters, plotBase, maxBuilds }: Setup, callback: (interim: InterimResult) => void) {\n    this.arts = arts\n    this.min = filters.map(x => x.min)\n    this.maxBuilds = maxBuilds\n    this.callback = callback\n    this.nodes = filters.map(x => x.value)\n    this.nodes.push(optimizationTarget)\n    if (plotBase) {\n      this.plotData = {}\n      this.nodes.push(plotBase)\n    }\n    this.nodes = optimize(this.nodes, {}, _ => false)\n  }\n\n  compute(newThreshold: number, filter: RequestFilter) {\n    if (this.threshold > newThreshold) this.threshold = newThreshold\n    const { min, interimReport } = this, self = this // `this` in nested functions means different things\n    let preArts = filterArts(this.arts, filter)\n    const totalCount = countBuilds(preArts), oldMaxBuildCount = this.builds.length\n\n    let nodes = this.nodes;\n    ({ nodes, arts: preArts } = pruneAll(nodes, min, preArts, this.maxBuilds, {}, {\n      pruneArtRange: true, pruneNodeRange: true,\n    }))\n    const arts = Object.values(preArts.values).sort((a, b) => a.length - b.length)\n    const compute = precompute(nodes, preArts.base, f => f.path[1], arts.length)\n\n    const buffer = Array<ArtifactBuildData>(arts.length)\n    const count = { tested: 0, failed: 0, skipped: totalCount - countBuilds(preArts) }\n\n    function permute(i: number) {\n      if (i < 0) {\n        const result = compute(buffer)\n        if (min.every((m, i) => (m <= result[i]))) {\n          const value = result[min.length], { builds, plotData } = self\n          let build: Build | undefined\n          if (value >= self.threshold) {\n            build = { value, artifactIds: buffer.map(x => x.id).filter(id => id) }\n            builds.push(build)\n          }\n          if (plotData) {\n            const x = result[min.length + 1]\n            if (!plotData[x] || plotData[x]!.value < value) {\n              if (!build) build = { value, artifactIds: buffer.map(x => x.id).filter(id => id) }\n              build.plot = x\n              plotData[x] = build\n            }\n          }\n        }\n        else count.failed += 1\n        return\n      }\n      arts[i].forEach(art => {\n        buffer[i] = art\n        permute(i - 1)\n      })\n      if (i === 0) {\n        count.tested += arts[0].length\n        if (count.tested > 1 << 16)\n          interimReport(count)\n      }\n    }\n\n    permute(arts.length - 1)\n    interimReport(count, this.builds.length > oldMaxBuildCount)\n  }\n\n  refresh(force: boolean): void {\n    const { maxBuilds } = this\n    if (Object.keys(this.plotData ?? {}).length >= 100000)\n      this.plotData = mergePlot([this.plotData!])\n\n    if (this.builds.length >= 1000 || force) {\n      this.builds = this.builds\n        .sort((a, b) => b.value - a.value)\n        .slice(0, maxBuilds)\n      this.buildValues = this.builds.map(x => x.value)\n      this.threshold = Math.max(this.threshold, this.buildValues[maxBuilds - 1] ?? -Infinity)\n    }\n  }\n  interimReport = (count: { tested: number, failed: number, skipped: number }, forced = false) => {\n    this.refresh(forced)\n    this.callback({ command: \"interim\", buildValues: this.buildValues, ...count })\n    this.buildValues = undefined\n    count.tested = 0\n    count.failed = 0\n    count.skipped = 0\n  }\n}\n","import { allSlotKeys } from '../../../../Types/consts';\r\nimport type { InterimResult, Setup, SplitWorker } from './BackgroundWorker';\r\nimport { ArtifactsBySlot, countBuilds, filterArts, RequestFilter } from './common';\r\n\r\nexport class DefaultSplitWorker implements SplitWorker {\r\n  arts: ArtifactsBySlot\r\n  filters: RequestFilter[] = []\r\n\r\n  constructor({ arts }: Setup, _callback: (interim: InterimResult) => void) {\r\n    this.arts = arts\r\n  }\r\n  addFilter(filter: RequestFilter) {\r\n    this.filters.push(filter)\r\n  }\r\n  split(_newThreshold: number, minCount: number) {\r\n    while (this.filters.length) {\r\n      const filter = this.filters.pop()!, count = countBuilds(filterArts(this.arts, filter))\r\n      if (count <= minCount) return filter\r\n      splitBySetOrID(this.arts, filter, minCount).forEach(filter => this.addFilter(filter))\r\n    }\r\n  }\r\n}\r\n\r\nfunction splitBySetOrID(_arts: ArtifactsBySlot, filter: RequestFilter, limit: number): RequestFilter[] {\r\n  const arts = filterArts(_arts, filter)\r\n\r\n  const candidates = allSlotKeys\r\n    .map(slot => ({ slot, sets: new Set(arts.values[slot].map(x => x.set)) }))\r\n    .filter(({ sets }) => sets.size > 1)\r\n  if (!candidates.length)\r\n    return splitByID(arts, filter, limit)\r\n  const { sets, slot } = candidates.reduce((a, b) => a.sets.size < b.sets.size ? a : b)\r\n  return [...sets].map(set => ({ ...filter, [slot]: { kind: \"required\", sets: new Set([set]) } }))\r\n}\r\nfunction splitByID(_arts: ArtifactsBySlot, filter: RequestFilter, limit: number): RequestFilter[] {\r\n  const arts = filterArts(_arts, filter)\r\n  const count = countBuilds(arts)\r\n\r\n  const candidates = allSlotKeys\r\n    .map(slot => ({ slot, length: arts.values[slot].length }))\r\n    .filter(x => x.length > 1)\r\n  const { slot, length } = candidates.reduce((a, b) => a.length < b.length ? a : b)\r\n\r\n  const numChunks = Math.ceil(count / limit)\r\n  const boundedNumChunks = Math.min(numChunks, length)\r\n  const chunk = Array(boundedNumChunks).fill(0).map(_ => new Set<string>())\r\n  arts.values[slot].forEach(({ id }, i) => chunk[i % boundedNumChunks].add(id))\r\n  return chunk.map(ids => ({ ...filter, [slot]: { kind: \"id\", ids } }))\r\n}\r\n","import { ArtSetExclusion } from '../../../../Database/DataManagers/BuildSettingData'\r\nimport { OptNode } from '../../../../Formula/optimization'\r\nimport { assertUnreachable } from '../../../../Util/Util'\r\nimport { BNBSplitWorker } from \"./BNBSplitWorker\"\r\nimport { ArtifactsBySlot, artSetPerm, Build, countBuilds, filterArts, filterFeasiblePerm, PlotData, RequestFilter } from \"./common\"\r\nimport { ComputeWorker } from \"./ComputeWorker\"\r\nimport { DefaultSplitWorker } from './DefaultSplitWorker'\r\n\r\nlet id: number, splitWorker: SplitWorker, computeWorker: ComputeWorker\r\n\r\nonmessage = ({ data }: { data: WorkerCommand }) => {\r\n  const { command } = data\r\n  let result: WorkerResult\r\n  switch (command) {\r\n    case \"setup\": {\r\n      id = data.id\r\n      const splitID = `split${id}`, computeID = `compute${id}`\r\n      try {\r\n        splitWorker = new BNBSplitWorker(data, interim => postMessage({ id, source: splitID, ...interim }))\r\n      } catch {\r\n        splitWorker = new DefaultSplitWorker(data, interim => postMessage({ id, source: splitID, ...interim }))\r\n      }\r\n      computeWorker = new ComputeWorker(data, interim => postMessage({ id, source: computeID, ...interim }))\r\n      result = { command: \"iterate\" }\r\n      break\r\n    }\r\n    case \"split\": {\r\n      if (data.filter) splitWorker.addFilter(data.filter)\r\n      const filter = splitWorker.split(data.threshold, data.minCount)\r\n      result = { command: \"split\", filter }\r\n      break\r\n    }\r\n    case \"iterate\": {\r\n      const { threshold, filter } = data\r\n      computeWorker.compute(threshold, filter)\r\n      result = { command: \"iterate\" }\r\n      break\r\n    }\r\n    case \"finalize\": {\r\n      computeWorker.refresh(true)\r\n      const { builds, plotData } = computeWorker\r\n      result = { command: \"finalize\", builds, plotData }\r\n      break\r\n    }\r\n    case \"count\": {\r\n      const { exclusion } = data, arts = computeWorker.arts\r\n      const setPerm = filterFeasiblePerm(artSetPerm(exclusion, [...new Set(Object.values(arts.values).flatMap(x => x.map(x => x.set!)))]), arts)\r\n      const counts = data.arts.map(_ => 0)\r\n      for (const perm of setPerm)\r\n        data.arts.forEach((arts, i) => counts[i] += countBuilds(filterArts(arts, perm)));\r\n      result = { command: \"count\", counts }\r\n      break\r\n    }\r\n    default: assertUnreachable(command)\r\n  }\r\n  postMessage({ id, ...result })\r\n}\r\n\r\nexport interface SplitWorker {\r\n  addFilter(filter: RequestFilter): void\r\n  split(newThreshold: number, minCount: number): RequestFilter | undefined\r\n}\r\n\r\nexport type WorkerCommand = Setup | Split | Iterate | Finalize | Count\r\nexport type WorkerResult = SourcedInterimResult | SplitResult | IterateResult | FinalizeResult | CountResult\r\n\r\nexport interface Setup {\r\n  command: \"setup\"\r\n\r\n  id: number\r\n  arts: ArtifactsBySlot\r\n\r\n  optimizationTarget: OptNode\r\n  filters: { value: OptNode, min: number }[]\r\n  plotBase: OptNode | undefined,\r\n  maxBuilds: number\r\n}\r\nexport interface Split {\r\n  command: \"split\"\r\n  threshold: number\r\n  minCount: number\r\n  filter?: RequestFilter\r\n}\r\nexport interface Iterate {\r\n  command: \"iterate\"\r\n  threshold: number\r\n  filter: RequestFilter\r\n}\r\n\r\nexport interface Finalize {\r\n  command: \"finalize\"\r\n}\r\nexport interface Count {\r\n  command: \"count\"\r\n  arts: ArtifactsBySlot[]\r\n  exclusion: ArtSetExclusion\r\n}\r\nexport interface SplitResult {\r\n  command: \"split\"\r\n  filter: RequestFilter | undefined\r\n}\r\nexport interface IterateResult {\r\n  command: \"iterate\"\r\n}\r\nexport interface FinalizeResult {\r\n  command: \"finalize\"\r\n  builds: Build[]\r\n  plotData?: PlotData\r\n}\r\nexport interface CountResult {\r\n  command: \"count\"\r\n  counts: number[]\r\n}\r\nexport interface InterimResult {\r\n  command: \"interim\"\r\n  buildValues: number[] | undefined\r\n  /** The number of builds since last report, including failed builds */\r\n  tested: number\r\n  /** The number of builds that does not meet the min-filter requirement since last report */\r\n  failed: number\r\n  skipped: number\r\n}\r\nexport interface SourcedInterimResult extends InterimResult {\r\n  /** the source of the message, must be unique for each source of `buildValues` */\r\n  source: string\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [531], () => (__webpack_require__(12337)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + \"161cc23ea5600aac\" + \".js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (typeof import.meta.url === \"string\") scriptUrl = import.meta.url\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t337: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","objPathValue","obj","keys","Array","isArray","console","error","reduce","a","k","objectKeyMap","map","Object","fromEntries","i","objectKeyValueMap","items","t","objectMap","fn","entries","v","rangeGen","from","to","range","assertUnreachable","value","Error","constant","NaN","name","percent","info","operation","operands","type","Number","MAX_VALUE","Infinity","unit","intoOps","values","intoV","forEachNodes","formulas","topDown","bottomUp","visiting","Set","visited","forEach","traverse","formula","has","add","delete","mapFormulas","topDownMap","bottomUpMap","topDownMapped","Map","bottomUpMapped","check","get","arrayEqual","set","result","customMapFormula","context","contextMapping","internalMap","current","mapping","old","newFormula","b","undefined","length","every","allCommutativeMonoidOperations","min","x","Math","max","mul","allOperations","res","sum_frac","threshold","pass","fail","commutativeMonoidOperationSet","flatten","f","_formula","flattened","flatMap","dep","deduplicate","elementCounts","array","wrap","common","counts","factored","count","fill","candidatesByOperation","remainingCounts","filter","push","currentCounts","commonCounts","nextCounts","total","dependency","currentCount","commonCount","candidates","candidate","candidateCounts","candidateCount","clear","constantFold","topLevelData","shouldFold","origin","data","processed","nextContextMap","fold","c","foldStr","numericOperands","formulaOperands","folded","numericValue","isFinite","index","selected","table","first","find","op","smallest","operand","v1","v2","match","unmatch","list","path","accu","reset","nextMap","nextContext","nonTravelerCharacterKeys","travelerKeys","allWeaponSwordKeys","allWeaponClaymoreKeys","allWeaponPolearmKeys","allWeaponBowKeys","allWeaponCatalystKeys","allSlotKeys","pruneAll","nodes","minimum","arts","numTop","exclusion","forced","should","deps","pruneNodeRange","reaffine","pruneOrder","pruneArtRange","some","newArts","newNodes","forceRename","affineNodes","topLevelAffine","visit","node","isAffine","dynKeys","_","nonConst","base","size","nextDynKey","affine","affineMap","reaffineArt","stat","dyn","slot","id","offsets","key","baseValue","progress","allowRainbow","rainbow","noSwitchIn","noSwitchOut","includes","newList","art","other","otherBetterEqual","otherMaybeBetter","otherBetter","canSwitch","baseRange","artRanges","computeArtRange","otherArtRanges","addArtRange","read","newRange","computeNodeRange","nodeRange","operandRanges","newOperands","op1","op2","j","ranges","reads","computeMinMax","sum","minMaxes","filterArts","filters","kind","ids","sets","countBuilds","_count","exclusionToAllowed","artSetPerm","_artSets","artSets","allowedRainbows","shapes","indexOfShape","shape","replacing","populateShapes","rainbows","required","slice","remaining","noFilter","allowedCounts","used","groupped","sort","usableRainbows","check_free","isolated","missing","rejected","allowedSet","requiredRainbows","l","BNBSplitWorker","constructor","optimizationTarget","maxBuilds","callback","interim","firstUncalculated","this","linearUpperBound","addFilter","maxConts","approxs","age","split","newThreshold","minCount","calculated","calculateFilter","getApproxFilter","reportInterim","splitOldFilter","skipped","splitted","cont","conts","c1","c2","minCont","contCutoff","findIndex","lowArts","splice","highArts","high","approx","maxContribution","low","currentCont","partialSplit","val","currentArts","pop","oldCount","weight","dot","$c","flat","approximation","leadingConts","newValues","requiredConts","lc","newCount","command","buildValues","tested","failed","lin","weightedSum","entry","cents","getCent","nodeRanges","computeFullArtRange","minMax","slopePoint","slope","x0","y0","interpolate","x1","y1","upper","abs","lower","_map","oppositeContext","PolyError","xs","xOp","cOp","loc","sqrt","vOp","tOp","pOp","fOp","threshOp","ge","le","mulOp","prod","thresh","isFirstHalf","flattenedOperands","coeff","lins","factor","cent","cause","super","ComputeWorker","plotBase","builds","plotData","interimReport","refresh","opts","optimize","compute","self","preArts","totalCount","oldMaxBuildCount","initial","binding","slotCount","body","names","operandNames","arr","toString","join","Function","precompute","buffer","permute","m","build","artifactIds","plot","force","plots","scale","round","mergePlot","DefaultSplitWorker","_callback","_newThreshold","splitBySetOrID","_arts","limit","numChunks","ceil","boundedNumChunks","chunk","splitByID","splitWorker","computeWorker","onmessage","splitID","computeID","postMessage","source","setPerm","filter_loop","available","s","filterFeasiblePerm","perm","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","__webpack_exports__","O","chunkIds","priority","notFulfilled","fulfilled","r","e","chunkId","Promise","all","promises","u","miniCssF","g","globalThis","window","o","prop","prototype","hasOwnProperty","call","scriptUrl","import","meta","url","replace","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","then"],"sourceRoot":""}