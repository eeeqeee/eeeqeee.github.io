name: Deploy

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'ref to build'
        required: true
      path:
        description: 'path'
      build_flags:
        description: 'additional build flags'
      env:
        description: 'set env for npm run build'
      repository:
        description: 'repository for genshin-optimizer'
        default: eeeqeee/genshin-optimizer

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout genshin-optimizer
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.repository }}
        ref: ${{ github.event.inputs.ref }}
        path: genshin-optimizer
        ssh-key: ${{ secrets.ssh_key_optimizer }}
    - name: Disable clone_pipeline.js
      run: |
        echo > genshin-optimizer/clone_pipeline.js
    - name: Checkout pipeline
      uses: actions/checkout@v3
      with:
        repository: eeeqeee/genshin-optimizer-pipeline
        path: genshin-optimizer/pipeline
        ssh-key: ${{ secrets.ssh_key_pipeline }}
    - name: Checkout GenshinData
      uses: actions/checkout@v3
      with:
        repository: eeeqeee/GenshinData
        path: genshin-optimizer/pipeline/GenshinData
        ssh-key: ${{ secrets.ssh_key_genshindata }}
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Get npm cache directory
      id: npm-cache-dir
      run: |
        echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
    - uses: actions/cache@v3
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Get path
      id: get-path
      run: |
        if [[ -z "${{ github.event.inputs.path }}" ]]; then
          echo "path=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        else
          echo "path=${{ github.event.inputs.path }}" >> $GITHUB_OUTPUT
        fi
      working-directory: genshin-optimizer
    - name: Get commit msg
      id: get-commit-msg
      run: |
        echo "msg=\"deploy: $(git rev-parse HEAD) to genshin-optimizer/${{ steps.get-path.outputs.path }}\"" >> $GITHUB_OUTPUT
      working-directory: genshin-optimizer
    - run: |
        npm ci
      working-directory: genshin-optimizer/pipeline
    - run: |
        npm ci
      working-directory: genshin-optimizer
    - name: Build genshin-optimizer
      run: |
        PUBLIC_URL="/genshin-optimizer/${{ steps.get-path.outputs.path }}" ${{ github.event.inputs.env }} npm run build ${{ github.event.inputs.build_flags }}
      working-directory: genshin-optimizer
    - name: Checkout gh-pages
      uses: actions/checkout@v3
      with:
        ref: gh-pages
        path: gh-pages
    - name: Move to gh-pages
      run: |
        mkdir --parents "gh-pages/genshin-optimizer/${{ steps.get-path.outputs.path }}"
        rm -rfv "gh-pages/genshin-optimizer/${{ steps.get-path.outputs.path }}" || true
        mv "genshin-optimizer/build" "gh-pages/genshin-optimizer/${{ steps.get-path.outputs.path }}"
    - name: Make commit to deploy
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add "genshin-optimizer/${{ steps.get-path.outputs.path }}"
        git commit -m ${{ steps.get-commit-msg.outputs.msg }}
        git push origin gh-pages
      working-directory: gh-pages
